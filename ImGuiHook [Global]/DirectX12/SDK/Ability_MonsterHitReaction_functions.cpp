#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability_MonsterHitReaction

#include "Basic.hpp"

#include "Ability_MonsterHitReaction_classes.hpp"
#include "Ability_MonsterHitReaction_parameters.hpp"


namespace SDK
{

// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.ApplyHitReaction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FM1CalcDamageInfo                InDamageInfo                                           (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UAbility_MonsterHitReaction_C::ApplyHitReaction(const struct FM1CalcDamageInfo& InDamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "ApplyHitReaction");

	Params::Ability_MonsterHitReaction_C_ApplyHitReaction Parms{};

	Parms.InDamageInfo = std::move(InDamageInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.ApplyHitReactionData
// (Public, BlueprintCallable, BlueprintEvent)

void UAbility_MonsterHitReaction_C::ApplyHitReactionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "ApplyHitReactionData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.ApplyShake
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FM1CalcDamageInfo                DamageInfo                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UAbility_MonsterHitReaction_C::ApplyShake(const struct FM1CalcDamageInfo& DamageInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "ApplyShake");

	Params::Ability_MonsterHitReaction_C_ApplyShake Parms{};

	Parms.DamageInfo = std::move(DamageInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.BP_OnActivated
// (Event, Protected, BlueprintEvent)

void UAbility_MonsterHitReaction_C::BP_OnActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "BP_OnActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.CheckCanHandleHitReaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     InTag                                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FM1CalcDamageInfo                InDamageInfo                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    bCanHandle                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAbility_MonsterHitReaction_C::CheckCanHandleHitReaction(const struct FGameplayTag& InTag, const struct FM1CalcDamageInfo& InDamageInfo, bool* bCanHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "CheckCanHandleHitReaction");

	Params::Ability_MonsterHitReaction_C_CheckCanHandleHitReaction Parms{};

	Parms.InTag = std::move(InTag);
	Parms.InDamageInfo = std::move(InDamageInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (bCanHandle != nullptr)
		*bCanHandle = Parms.bCanHandle;
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.ExecuteUbergraph_Ability_MonsterHitReaction
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAbility_MonsterHitReaction_C::ExecuteUbergraph_Ability_MonsterHitReaction(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "ExecuteUbergraph_Ability_MonsterHitReaction");

	Params::Ability_MonsterHitReaction_C_ExecuteUbergraph_Ability_MonsterHitReaction Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.FindConfigDataByBoneName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             InBoneName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FM1NormalMonsterHitReactionData  FoundData                                              (Parm, OutParm)

void UAbility_MonsterHitReaction_C::FindConfigDataByBoneName(class FName InBoneName, struct FM1NormalMonsterHitReactionData* FoundData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "FindConfigDataByBoneName");

	Params::Ability_MonsterHitReaction_C_FindConfigDataByBoneName Parms{};

	Parms.InBoneName = InBoneName;

	UObject::ProcessEvent(Func, &Parms);

	if (FoundData != nullptr)
		*FoundData = std::move(Parms.FoundData);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.FindConfigIndexByPartsName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             PartsName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ConfigIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAbility_MonsterHitReaction_C::FindConfigIndexByPartsName(class FName PartsName, int32* ConfigIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "FindConfigIndexByPartsName");

	Params::Ability_MonsterHitReaction_C_FindConfigIndexByPartsName Parms{};

	Parms.PartsName = PartsName;

	UObject::ProcessEvent(Func, &Parms);

	if (ConfigIndex != nullptr)
		*ConfigIndex = Parms.ConfigIndex;
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.GetAnimLengthOfMaxDamagedParts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   AnimLength                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAbility_MonsterHitReaction_C::GetAnimLengthOfMaxDamagedParts(float* AnimLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "GetAnimLengthOfMaxDamagedParts");

	Params::Ability_MonsterHitReaction_C_GetAnimLengthOfMaxDamagedParts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimLength != nullptr)
		*AnimLength = Parms.AnimLength;
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.HandleHitReaction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FM1AbilityEvent                  InAbilityEvent                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void UAbility_MonsterHitReaction_C::HandleHitReaction(const struct FM1AbilityEvent& InAbilityEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "HandleHitReaction");

	Params::Ability_MonsterHitReaction_C_HandleHitReaction Parms{};

	Parms.InAbilityEvent = std::move(InAbilityEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.OnAbilityEvent_251AA2D44B9389D9339DBFAF8E4C08D6
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FM1AbilityEvent                  Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UAbility_MonsterHitReaction_C::OnAbilityEvent_251AA2D44B9389D9339DBFAF8E4C08D6(const struct FM1AbilityEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "OnAbilityEvent_251AA2D44B9389D9339DBFAF8E4C08D6");

	Params::Ability_MonsterHitReaction_C_OnAbilityEvent_251AA2D44B9389D9339DBFAF8E4C08D6 Parms{};

	Parms.Event = std::move(Event);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.OnFinish_1701721E4A50F5BD911C04A56D969E5A
// (BlueprintCallable, BlueprintEvent)

void UAbility_MonsterHitReaction_C::OnFinish_1701721E4A50F5BD911C04A56D969E5A()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "OnFinish_1701721E4A50F5BD911C04A56D969E5A");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.OnFinish_7F20141544ECD76BD8D4308ED014768A
// (BlueprintCallable, BlueprintEvent)

void UAbility_MonsterHitReaction_C::OnFinish_7F20141544ECD76BD8D4308ED014768A()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "OnFinish_7F20141544ECD76BD8D4308ED014768A");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.OnFinish_9E01B27043A751769011D993AC566BC6
// (BlueprintCallable, BlueprintEvent)

void UAbility_MonsterHitReaction_C::OnFinish_9E01B27043A751769011D993AC566BC6()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "OnFinish_9E01B27043A751769011D993AC566BC6");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.ResetLoopAnimationTriggerWithDelay
// (BlueprintCallable, BlueprintEvent)

void UAbility_MonsterHitReaction_C::ResetLoopAnimationTriggerWithDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "ResetLoopAnimationTriggerWithDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.ResetPlayCountAndHitParts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAbility_MonsterHitReaction_C::ResetPlayCountAndHitParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "ResetPlayCountAndHitParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.TryFillHitReactionData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAbility_MonsterHitReaction_C::TryFillHitReactionData(bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "TryFillHitReactionData");

	Params::Ability_MonsterHitReaction_C_TryFillHitReactionData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.WaitAnimationEnd
// (BlueprintCallable, BlueprintEvent)

void UAbility_MonsterHitReaction_C::WaitAnimationEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "WaitAnimationEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ability_MonsterHitReaction.Ability_MonsterHitReaction_C.WaitShakeEnd
// (BlueprintCallable, BlueprintEvent)

void UAbility_MonsterHitReaction_C::WaitShakeEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ability_MonsterHitReaction_C", "WaitShakeEnd");

	UObject::ProcessEvent(Func, nullptr);
}

}

