#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability_PlayerJump

#include "Basic.hpp"

#include "M1_structs.hpp"
#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "M1Data_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ability_PlayerJump.Ability_PlayerJump_C
// 0x00C8 (0x0368 - 0x02A0)
class UAbility_PlayerJump_C final : public UM1Ability
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          AttachedFallHighVFX;                               // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicalSurface, class FName>           LandHardVFXSurfaceMap;                             // 0x02B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           PlayingJumpMontage;                                // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EM1CharacterGender, class UAnimMontage*> JumpMontage;                                       // 0x0308(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        LastLandedTime;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastFallingTime;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Apply_FallHighVFX();
	void Apply_JumpMontage(class FName InSectionName);
	void Apply_JumpMontageSection(class FName NewSectionName);
	void BP_OnActivated();
	void BP_OnDeactivated(bool bCancelled);
	bool CanApplyFallingFX();
	bool CanApplyLandFX();
	void ExecuteUbergraph_Ability_PlayerJump(int32 EntryPoint);
	void GetJumpMontageParam(class UAnimMontage** OutMontage);
	void Handle_FallingFX();
	void Handle_FallingHighVFX();
	void Handle_FallingSFX();
	void Handle_LandFX();
	void Handle_LandHardVFX();
	void Handle_LandSFX();
	void OnAbilityEvent_14C22D8E4EC91E31776CB1961AA65F52(const struct FM1AbilityEvent& Event);
	void OnAbilityEvent_1F79FB04463ECA4E6A1854B978E38E08(const struct FM1AbilityEvent& Event);
	void OnAbilityEvent_4573FAC14446C984EDA447BA7B2D81EB(const struct FM1AbilityEvent& Event);
	void OnAbilityEvent_C0CEC1D14A18DDAC0474CFB1BAB64EAA(const struct FM1AbilityEvent& Event);
	void OnAbilityEvent_F0DF10F847B72C4747A91A8F8E4D78B3(const struct FM1AbilityEvent& Event);
	void OwnerOnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	bool ShouldApplyFallHighVFX();
	bool ShouldApplyLandHardVFX(class FName* LandHardVFX, struct FTransform* LandHardTransform);
	bool ShouldPlayFallAnim();
	void Unapply_FallHighVFX();
	void Unapply_FallingSFX();
	void Unapply_JumpMontage(bool bImmediately);

	bool ShouldApplyFallingSFX() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ability_PlayerJump_C">();
	}
	static class UAbility_PlayerJump_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_PlayerJump_C>();
	}
};
static_assert(alignof(UAbility_PlayerJump_C) == 0x000008, "Wrong alignment on UAbility_PlayerJump_C");
static_assert(sizeof(UAbility_PlayerJump_C) == 0x000368, "Wrong size on UAbility_PlayerJump_C");
static_assert(offsetof(UAbility_PlayerJump_C, UberGraphFrame) == 0x0002A0, "Member 'UAbility_PlayerJump_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAbility_PlayerJump_C, AttachedFallHighVFX) == 0x0002A8, "Member 'UAbility_PlayerJump_C::AttachedFallHighVFX' has a wrong offset!");
static_assert(offsetof(UAbility_PlayerJump_C, LandHardVFXSurfaceMap) == 0x0002B0, "Member 'UAbility_PlayerJump_C::LandHardVFXSurfaceMap' has a wrong offset!");
static_assert(offsetof(UAbility_PlayerJump_C, PlayingJumpMontage) == 0x000300, "Member 'UAbility_PlayerJump_C::PlayingJumpMontage' has a wrong offset!");
static_assert(offsetof(UAbility_PlayerJump_C, JumpMontage) == 0x000308, "Member 'UAbility_PlayerJump_C::JumpMontage' has a wrong offset!");
static_assert(offsetof(UAbility_PlayerJump_C, LastLandedTime) == 0x000358, "Member 'UAbility_PlayerJump_C::LastLandedTime' has a wrong offset!");
static_assert(offsetof(UAbility_PlayerJump_C, LastFallingTime) == 0x000360, "Member 'UAbility_PlayerJump_C::LastFallingTime' has a wrong offset!");

}

