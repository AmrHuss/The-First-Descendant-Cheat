#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ability

#include "Basic.hpp"

#include "M1_structs.hpp"
#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Ability_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Ability.Ability_C
// 0x2940 (0x2CB0 - 0x0370)
class UAbility_C : public UM1BaseAnimInstance
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct Ability::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0378(0x0048)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x03C0(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03C8(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root_2;                              // 0x03D0(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose_1;                   // 0x03F0(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x04B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x04E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0508(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x0530(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_14;                      // 0x0558(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_3;                  // 0x0578(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_13;                      // 0x05E8(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x0608(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_12;                      // 0x0678(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x0698(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_11;                      // 0x06C0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_4;                      // 0x06E0(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x07A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x07D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x07F8(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x0820(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x0848(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0868(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x08D8(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x08F8(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x0968(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0988(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x09B0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_3;                      // 0x09D0(0x00C8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_22;                   // 0x0A98(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_21;                   // 0x0AE0(0x0048)()
	struct FAnimNode_BlendListByInt               AnimGraphNode_BlendListByInt_1;                    // 0x0B28(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_6;                   // 0x0B70(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_20;                   // 0x0BB8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_19;                   // 0x0C00(0x0048)()
	struct FAnimNode_BlendListByInt               AnimGraphNode_BlendListByInt;                      // 0x0C48(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_18;                   // 0x0C90(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_17;                   // 0x0CD8(0x0048)()
	struct FM1AnimNode_Reinitialize               M1AnimGraphNode_Reinitialize_2;                    // 0x0D20(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0D48(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x0D68(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0E30(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0E58(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_16;                   // 0x0E80(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_15;                   // 0x0EC8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_5;                   // 0x0F10(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0F58(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0F78(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0FA0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_14;                   // 0x0FC0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_13;                   // 0x1008(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x1050(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x1098(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x10E0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_12;                   // 0x1128(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_11;                   // 0x1170(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x11B8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x11D8(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x12A0(0x00C8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x1368(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x1390(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x13B8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_10;                   // 0x13E0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x1428(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x1470(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x14B8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x1500(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_2;                   // 0x1548(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x1590(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x15D8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x1620(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_1;                   // 0x1668(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x16B0(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x16F8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x1740(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x1760(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x17A8(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x17C8(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x17F0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1810(0x00C8)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend_1;                       // 0x18D8(0x00C8)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer;                     // 0x19A0(0x00C8)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x1A68(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x1B30(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1BB0(0x0028)()
	struct FM1AnimNode_Reinitialize               M1AnimGraphNode_Reinitialize_1;                    // 0x1BD8(0x0028)()
	struct FM1AnimNode_Reinitialize               M1AnimGraphNode_Reinitialize;                      // 0x1C00(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x1C28(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x1C70(0x0048)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x1CB8(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x1CD8(0x00C8)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_3;                         // 0x1DA0(0x01F0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_4;                        // 0x1F90(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x2098(0x0108)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_2;                         // 0x21A0(0x01F0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x2390(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x2498(0x0108)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK_1;                         // 0x25A0(0x01F0)()
	struct FAnimNode_TwoBoneIK                    AnimGraphNode_TwoBoneIK;                           // 0x2790(0x01F0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x2980(0x0108)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x2A88(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x2AA8(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x2AC8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x2AE8(0x0048)()
	double                                        KnockHitDirYaw;                                    // 0x2B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        KnockAnimPlayRate;                                 // 0x2B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             DeboneRootSocketTransform;                         // 0x2B40(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeboneRootSocketValid;                             // 0x2B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B71[0xF];                                     // 0x2B71(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DeboneLeftFootTransform;                           // 0x2B80(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeboneLeftFootValid;                               // 0x2BB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB1[0xF];                                     // 0x2BB1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DeboneRightFootTransform;                          // 0x2BC0(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeboneRightFootValid;                              // 0x2BF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BF1[0xF];                                     // 0x2BF1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DeboneLeftHandTransform;                           // 0x2C00(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeboneLeftHandValid;                               // 0x2C30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C31[0xF];                                     // 0x2C31(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DeboneRightHandTransform;                          // 0x2C40(0x0030)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeboneRightHandValid;                              // 0x2C70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C71[0x3];                                     // 0x2C71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KnockActivateCount;                                // 0x2C74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KnockStage;                                        // 0x2C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKnockdown;                                        // 0x2C7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKnockback;                                        // 0x2C7D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDeboneAttached;                                   // 0x2C7E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVoidShackles;                                     // 0x2C7F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVoidShacklesExit;                                 // 0x2C80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C81[0x3];                                     // 0x2C81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoidShacklesAnimPresetType;                        // 0x2C84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VoidShacklesPlayerAnimType;                        // 0x2C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHitReactionEnabled;                               // 0x2C8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C8D[0x3];                                     // 0x2C8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitReactionReset;                                  // 0x2C90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHitReactionFront;                                 // 0x2C94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C95[0x3];                                     // 0x2C95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitReactionAnimIndex;                              // 0x2C98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDeboneVerticalType;                               // 0x2C9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDeboneEnduring;                                   // 0x2C9D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDeboneArrived;                                    // 0x2C9E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9F[0x1];                                     // 0x2C9F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        KnockRecoveryAnimPlayRate;                         // 0x2CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityLayer(const struct FPoseLink& InPose, struct FPoseLink* AbilityLayer_0);
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void DeboneIKLayer(const struct FPoseLink& InPose_BeforeDeboneIK, struct FPoseLink* DeboneIKLayer_0);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_BlendListByEnum_302539994305D0447C4A14982E2646E0();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_BlendListByEnum_D11B7C264EF0048B5B18B7932DFC0233();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_BlendListByEnum_E42411AC4C973292B781B589250C10FA();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_ModifyBone_481738B1453FB33739D6B79AC93C425E();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_ModifyBone_4F32910A42649A9923A1C48891C53431();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_ModifyBone_A40055744CB7E7C9B3B7E1A09B995FED();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_ModifyBone_AA5C42214537AEFCC40EBF9DA9392119();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_ModifyBone_C107912D44D33E184ED4B78A91DFFDF7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_TransitionResult_28025AC242DBD88F3C8E2CA0C345E62C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_TransitionResult_983EB16F49ACF347CFE1F7B652174894();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_TransitionResult_9A81C87642BF108653B42A8BB964F104();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_TransitionResult_B316C9CB488D7B0AC5A87596224F7D14();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_TwoBoneIK_B4B0F6EF401499235341BA90B93FD58D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_TwoBoneIK_B756352D4105477522A07485BFF724F7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_TwoBoneIK_BEA64D8E4B55E6D85C7AB89473394766();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_AnimGraphNode_TwoBoneIK_F129509F4AAE478D693D78A1211F52EB();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_M1AnimGraphNode_Reinitialize_33E61B734132A3D62FEEB291DB857B9B();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_M1AnimGraphNode_Reinitialize_49C97505467FB04840E0759E83E8272D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_Ability_M1AnimGraphNode_Reinitialize_95F71B144C3CCC2EA03319B6D7A2756C();
	void ExecuteUbergraph_Ability(int32 EntryPoint);

	void GetDeboneSocketAlpha(bool IsValid, class FName CurveName, double* OutAlpha) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ability_C">();
	}
	static class UAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_C>();
	}
};
static_assert(alignof(UAbility_C) == 0x000010, "Wrong alignment on UAbility_C");
static_assert(sizeof(UAbility_C) == 0x002CB0, "Wrong size on UAbility_C");
static_assert(offsetof(UAbility_C, UberGraphFrame) == 0x000370, "Member 'UAbility_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAbility_C, __AnimBlueprintMutables) == 0x000378, "Member 'UAbility_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimBlueprintExtension_PropertyAccess) == 0x0003C0, "Member 'UAbility_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimBlueprintExtension_Base) == 0x0003C8, "Member 'UAbility_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_Root_2) == 0x0003D0, "Member 'UAbility_C::AnimGraphNode_Root_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_LinkedInputPose_1) == 0x0003F0, "Member 'UAbility_C::AnimGraphNode_LinkedInputPose_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult_10) == 0x0004B8, "Member 'UAbility_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult_9) == 0x0004E0, "Member 'UAbility_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult_8) == 0x000508, "Member 'UAbility_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_UseCachedPose_6) == 0x000530, "Member 'UAbility_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_14) == 0x000558, "Member 'UAbility_C::AnimGraphNode_StateResult_14' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendSpacePlayer_3) == 0x000578, "Member 'UAbility_C::AnimGraphNode_BlendSpacePlayer_3' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_13) == 0x0005E8, "Member 'UAbility_C::AnimGraphNode_StateResult_13' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendSpacePlayer_2) == 0x000608, "Member 'UAbility_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_12) == 0x000678, "Member 'UAbility_C::AnimGraphNode_StateResult_12' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_UseCachedPose_5) == 0x000698, "Member 'UAbility_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_11) == 0x0006C0, "Member 'UAbility_C::AnimGraphNode_StateResult_11' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateMachine_4) == 0x0006E0, "Member 'UAbility_C::AnimGraphNode_StateMachine_4' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult_7) == 0x0007A8, "Member 'UAbility_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult_6) == 0x0007D0, "Member 'UAbility_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult_5) == 0x0007F8, "Member 'UAbility_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_UseCachedPose_4) == 0x000820, "Member 'UAbility_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_10) == 0x000848, "Member 'UAbility_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000868, "Member 'UAbility_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_9) == 0x0008D8, "Member 'UAbility_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendSpacePlayer) == 0x0008F8, "Member 'UAbility_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_8) == 0x000968, "Member 'UAbility_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_UseCachedPose_3) == 0x000988, "Member 'UAbility_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_7) == 0x0009B0, "Member 'UAbility_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateMachine_3) == 0x0009D0, "Member 'UAbility_C::AnimGraphNode_StateMachine_3' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_22) == 0x000A98, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_22' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_21) == 0x000AE0, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_21' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByInt_1) == 0x000B28, "Member 'UAbility_C::AnimGraphNode_BlendListByInt_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByBool_6) == 0x000B70, "Member 'UAbility_C::AnimGraphNode_BlendListByBool_6' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_20) == 0x000BB8, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_20' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_19) == 0x000C00, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_19' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByInt) == 0x000C48, "Member 'UAbility_C::AnimGraphNode_BlendListByInt' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_18) == 0x000C90, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_18' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_17) == 0x000CD8, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_17' has a wrong offset!");
static_assert(offsetof(UAbility_C, M1AnimGraphNode_Reinitialize_2) == 0x000D20, "Member 'UAbility_C::M1AnimGraphNode_Reinitialize_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_6) == 0x000D48, "Member 'UAbility_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateMachine_2) == 0x000D68, "Member 'UAbility_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult_4) == 0x000E30, "Member 'UAbility_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult_3) == 0x000E58, "Member 'UAbility_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_16) == 0x000E80, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_16' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_15) == 0x000EC8, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_15' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByBool_5) == 0x000F10, "Member 'UAbility_C::AnimGraphNode_BlendListByBool_5' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_5) == 0x000F58, "Member 'UAbility_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_UseCachedPose_2) == 0x000F78, "Member 'UAbility_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_4) == 0x000FA0, "Member 'UAbility_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_14) == 0x000FC0, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_14' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_13) == 0x001008, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_13' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByBool_4) == 0x001050, "Member 'UAbility_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByBool_3) == 0x001098, "Member 'UAbility_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByBool_2) == 0x0010E0, "Member 'UAbility_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_12) == 0x001128, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_12' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_11) == 0x001170, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_11' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_3) == 0x0011B8, "Member 'UAbility_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateMachine_1) == 0x0011D8, "Member 'UAbility_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_ApplyAdditive) == 0x0012A0, "Member 'UAbility_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult_2) == 0x001368, "Member 'UAbility_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult_1) == 0x001390, "Member 'UAbility_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TransitionResult) == 0x0013B8, "Member 'UAbility_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_10) == 0x0013E0, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_10' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_9) == 0x001428, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_8) == 0x001470, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_7) == 0x0014B8, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_6) == 0x001500, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByEnum_2) == 0x001548, "Member 'UAbility_C::AnimGraphNode_BlendListByEnum_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_5) == 0x001590, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_4) == 0x0015D8, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_3) == 0x001620, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByEnum_1) == 0x001668, "Member 'UAbility_C::AnimGraphNode_BlendListByEnum_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_2) == 0x0016B0, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByEnum) == 0x0016F8, "Member 'UAbility_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_2) == 0x001740, "Member 'UAbility_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer_1) == 0x001760, "Member 'UAbility_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult_1) == 0x0017A8, "Member 'UAbility_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_UseCachedPose_1) == 0x0017C8, "Member 'UAbility_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateResult) == 0x0017F0, "Member 'UAbility_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_StateMachine) == 0x001810, "Member 'UAbility_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TwoWayBlend_1) == 0x0018D8, "Member 'UAbility_C::AnimGraphNode_TwoWayBlend_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_LinkedAnimLayer) == 0x0019A0, "Member 'UAbility_C::AnimGraphNode_LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TwoWayBlend) == 0x001A68, "Member 'UAbility_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SaveCachedPose) == 0x001B30, "Member 'UAbility_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_UseCachedPose) == 0x001BB0, "Member 'UAbility_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UAbility_C, M1AnimGraphNode_Reinitialize_1) == 0x001BD8, "Member 'UAbility_C::M1AnimGraphNode_Reinitialize_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, M1AnimGraphNode_Reinitialize) == 0x001C00, "Member 'UAbility_C::M1AnimGraphNode_Reinitialize' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByBool_1) == 0x001C28, "Member 'UAbility_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_BlendListByBool) == 0x001C70, "Member 'UAbility_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_Root_1) == 0x001CB8, "Member 'UAbility_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_LinkedInputPose) == 0x001CD8, "Member 'UAbility_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TwoBoneIK_3) == 0x001DA0, "Member 'UAbility_C::AnimGraphNode_TwoBoneIK_3' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_ModifyBone_4) == 0x001F90, "Member 'UAbility_C::AnimGraphNode_ModifyBone_4' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_ModifyBone_3) == 0x002098, "Member 'UAbility_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TwoBoneIK_2) == 0x0021A0, "Member 'UAbility_C::AnimGraphNode_TwoBoneIK_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_ModifyBone_2) == 0x002390, "Member 'UAbility_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_ModifyBone_1) == 0x002498, "Member 'UAbility_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TwoBoneIK_1) == 0x0025A0, "Member 'UAbility_C::AnimGraphNode_TwoBoneIK_1' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_TwoBoneIK) == 0x002790, "Member 'UAbility_C::AnimGraphNode_TwoBoneIK' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_ModifyBone) == 0x002980, "Member 'UAbility_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_LocalToComponentSpace) == 0x002A88, "Member 'UAbility_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_ComponentToLocalSpace) == 0x002AA8, "Member 'UAbility_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_Root) == 0x002AC8, "Member 'UAbility_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAbility_C, AnimGraphNode_SequencePlayer) == 0x002AE8, "Member 'UAbility_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAbility_C, KnockHitDirYaw) == 0x002B30, "Member 'UAbility_C::KnockHitDirYaw' has a wrong offset!");
static_assert(offsetof(UAbility_C, KnockAnimPlayRate) == 0x002B38, "Member 'UAbility_C::KnockAnimPlayRate' has a wrong offset!");
static_assert(offsetof(UAbility_C, DeboneRootSocketTransform) == 0x002B40, "Member 'UAbility_C::DeboneRootSocketTransform' has a wrong offset!");
static_assert(offsetof(UAbility_C, DeboneRootSocketValid) == 0x002B70, "Member 'UAbility_C::DeboneRootSocketValid' has a wrong offset!");
static_assert(offsetof(UAbility_C, DeboneLeftFootTransform) == 0x002B80, "Member 'UAbility_C::DeboneLeftFootTransform' has a wrong offset!");
static_assert(offsetof(UAbility_C, DeboneLeftFootValid) == 0x002BB0, "Member 'UAbility_C::DeboneLeftFootValid' has a wrong offset!");
static_assert(offsetof(UAbility_C, DeboneRightFootTransform) == 0x002BC0, "Member 'UAbility_C::DeboneRightFootTransform' has a wrong offset!");
static_assert(offsetof(UAbility_C, DeboneRightFootValid) == 0x002BF0, "Member 'UAbility_C::DeboneRightFootValid' has a wrong offset!");
static_assert(offsetof(UAbility_C, DeboneLeftHandTransform) == 0x002C00, "Member 'UAbility_C::DeboneLeftHandTransform' has a wrong offset!");
static_assert(offsetof(UAbility_C, DeboneLeftHandValid) == 0x002C30, "Member 'UAbility_C::DeboneLeftHandValid' has a wrong offset!");
static_assert(offsetof(UAbility_C, DeboneRightHandTransform) == 0x002C40, "Member 'UAbility_C::DeboneRightHandTransform' has a wrong offset!");
static_assert(offsetof(UAbility_C, DeboneRightHandValid) == 0x002C70, "Member 'UAbility_C::DeboneRightHandValid' has a wrong offset!");
static_assert(offsetof(UAbility_C, KnockActivateCount) == 0x002C74, "Member 'UAbility_C::KnockActivateCount' has a wrong offset!");
static_assert(offsetof(UAbility_C, KnockStage) == 0x002C78, "Member 'UAbility_C::KnockStage' has a wrong offset!");
static_assert(offsetof(UAbility_C, bKnockdown) == 0x002C7C, "Member 'UAbility_C::bKnockdown' has a wrong offset!");
static_assert(offsetof(UAbility_C, bKnockback) == 0x002C7D, "Member 'UAbility_C::bKnockback' has a wrong offset!");
static_assert(offsetof(UAbility_C, bDeboneAttached) == 0x002C7E, "Member 'UAbility_C::bDeboneAttached' has a wrong offset!");
static_assert(offsetof(UAbility_C, bVoidShackles) == 0x002C7F, "Member 'UAbility_C::bVoidShackles' has a wrong offset!");
static_assert(offsetof(UAbility_C, bVoidShacklesExit) == 0x002C80, "Member 'UAbility_C::bVoidShacklesExit' has a wrong offset!");
static_assert(offsetof(UAbility_C, VoidShacklesAnimPresetType) == 0x002C84, "Member 'UAbility_C::VoidShacklesAnimPresetType' has a wrong offset!");
static_assert(offsetof(UAbility_C, VoidShacklesPlayerAnimType) == 0x002C88, "Member 'UAbility_C::VoidShacklesPlayerAnimType' has a wrong offset!");
static_assert(offsetof(UAbility_C, bHitReactionEnabled) == 0x002C8C, "Member 'UAbility_C::bHitReactionEnabled' has a wrong offset!");
static_assert(offsetof(UAbility_C, HitReactionReset) == 0x002C90, "Member 'UAbility_C::HitReactionReset' has a wrong offset!");
static_assert(offsetof(UAbility_C, bHitReactionFront) == 0x002C94, "Member 'UAbility_C::bHitReactionFront' has a wrong offset!");
static_assert(offsetof(UAbility_C, HitReactionAnimIndex) == 0x002C98, "Member 'UAbility_C::HitReactionAnimIndex' has a wrong offset!");
static_assert(offsetof(UAbility_C, bDeboneVerticalType) == 0x002C9C, "Member 'UAbility_C::bDeboneVerticalType' has a wrong offset!");
static_assert(offsetof(UAbility_C, bDeboneEnduring) == 0x002C9D, "Member 'UAbility_C::bDeboneEnduring' has a wrong offset!");
static_assert(offsetof(UAbility_C, bDeboneArrived) == 0x002C9E, "Member 'UAbility_C::bDeboneArrived' has a wrong offset!");
static_assert(offsetof(UAbility_C, KnockRecoveryAnimPlayRate) == 0x002CA0, "Member 'UAbility_C::KnockRecoveryAnimPlayRate' has a wrong offset!");

}

