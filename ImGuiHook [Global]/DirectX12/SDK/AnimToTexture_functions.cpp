#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimToTexture

#include "Basic.hpp"

#include "AnimToTexture_classes.hpp"
#include "AnimToTexture_parameters.hpp"


namespace SDK
{

// Function AnimToTexture.AnimToTextureDataAsset.BP_GetBonePositionTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UAnimToTextureDataAsset::BP_GetBonePositionTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "BP_GetBonePositionTexture");

	Params::AnimToTextureDataAsset_BP_GetBonePositionTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.BP_GetBoneRotationTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UAnimToTextureDataAsset::BP_GetBoneRotationTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "BP_GetBoneRotationTexture");

	Params::AnimToTextureDataAsset_BP_GetBoneRotationTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.BP_GetBoneWeightTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UAnimToTextureDataAsset::BP_GetBoneWeightTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "BP_GetBoneWeightTexture");

	Params::AnimToTextureDataAsset_BP_GetBoneWeightTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.BP_GetSkeletalMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMesh* UAnimToTextureDataAsset::BP_GetSkeletalMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "BP_GetSkeletalMesh");

	Params::AnimToTextureDataAsset_BP_GetSkeletalMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.BP_GetStaticMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UAnimToTextureDataAsset::BP_GetStaticMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "BP_GetStaticMesh");

	Params::AnimToTextureDataAsset_BP_GetStaticMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.GetIndexFromAnimSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequence*                    Sequence                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAnimToTextureDataAsset::GetIndexFromAnimSequence(const class UAnimSequence* Sequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "GetIndexFromAnimSequence");

	Params::AnimToTextureDataAsset_GetIndexFromAnimSequence Parms{};

	Parms.Sequence = Sequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureDataAsset.ResetInfo
// (Final, Native, Public)

void UAnimToTextureDataAsset::ResetInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimToTextureDataAsset", "ResetInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.AllocateInstanceData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimToTextureInstanceData       InstanceData                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimToTextureInstancePlaybackLibrary::AllocateInstanceData(struct FAnimToTextureInstanceData& InstanceData, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "AllocateInstanceData");

	Params::AnimToTextureInstancePlaybackLibrary_AllocateInstanceData Parms{};

	Parms.InstanceData = std::move(InstanceData);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InstanceData = std::move(Parms.InstanceData);
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.AnimStateFromDataAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimToTextureDataAsset*          DataAsset                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StateIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimToTextureAnimState          AnimState                                              (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::AnimStateFromDataAsset(const class UAnimToTextureDataAsset* DataAsset, int32 StateIndex, struct FAnimToTextureAnimState* AnimState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "AnimStateFromDataAsset");

	Params::AnimToTextureInstancePlaybackLibrary_AnimStateFromDataAsset Parms{};

	Parms.DataAsset = DataAsset;
	Parms.StateIndex = StateIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AnimState != nullptr)
		*AnimState = std::move(Parms.AnimState);

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.BatchUpdateInstancedMeshComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInstancedStaticMeshComponent*    InstancedMeshComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimToTextureInstanceData       InstanceData                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAnimToTextureInstancePlaybackLibrary::BatchUpdateInstancedMeshComponent(class UInstancedStaticMeshComponent* InstancedMeshComponent, struct FAnimToTextureInstanceData& InstanceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "BatchUpdateInstancedMeshComponent");

	Params::AnimToTextureInstancePlaybackLibrary_BatchUpdateInstancedMeshComponent Parms{};

	Parms.InstancedMeshComponent = InstancedMeshComponent;
	Parms.InstanceData = std::move(InstanceData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InstanceData = std::move(Parms.InstanceData);
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.GetInstancePlaybackData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimToTextureInstanceData       InstanceData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimToTextureInstancePlaybackDataInstancePlaybackData                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::GetInstancePlaybackData(const struct FAnimToTextureInstanceData& InstanceData, int32 InstanceIndex, struct FAnimToTextureInstancePlaybackData* InstancePlaybackData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "GetInstancePlaybackData");

	Params::AnimToTextureInstancePlaybackLibrary_GetInstancePlaybackData Parms{};

	Parms.InstanceData = std::move(InstanceData);
	Parms.InstanceIndex = InstanceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InstancePlaybackData != nullptr)
		*InstancePlaybackData = std::move(Parms.InstancePlaybackData);

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.GetInstanceTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FAnimToTextureInstanceData       InstanceData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       InstanceTransform                                      (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::GetInstanceTransform(const struct FAnimToTextureInstanceData& InstanceData, int32 InstanceIndex, struct FTransform* InstanceTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "GetInstanceTransform");

	Params::AnimToTextureInstancePlaybackLibrary_GetInstanceTransform Parms{};

	Parms.InstanceData = std::move(InstanceData);
	Parms.InstanceIndex = InstanceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InstanceTransform != nullptr)
		*InstanceTransform = std::move(Parms.InstanceTransform);

	return Parms.ReturnValue;
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.SetupInstancedMeshComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInstancedStaticMeshComponent*    InstancedMeshComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimToTextureInstanceData       InstanceData                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   NumInstances                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimToTextureInstancePlaybackLibrary::SetupInstancedMeshComponent(class UInstancedStaticMeshComponent* InstancedMeshComponent, struct FAnimToTextureInstanceData& InstanceData, int32 NumInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "SetupInstancedMeshComponent");

	Params::AnimToTextureInstancePlaybackLibrary_SetupInstancedMeshComponent Parms{};

	Parms.InstancedMeshComponent = InstancedMeshComponent;
	Parms.InstanceData = std::move(InstanceData);
	Parms.NumInstances = NumInstances;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InstanceData = std::move(Parms.InstanceData);
}


// Function AnimToTexture.AnimToTextureInstancePlaybackLibrary.UpdateInstanceData
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FAnimToTextureInstanceData       InstanceData                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAnimToTextureInstancePlaybackDataPlaybackData                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimToTextureInstancePlaybackLibrary::UpdateInstanceData(struct FAnimToTextureInstanceData& InstanceData, int32 InstanceIndex, const struct FAnimToTextureInstancePlaybackData& PlaybackData, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AnimToTextureInstancePlaybackLibrary", "UpdateInstanceData");

	Params::AnimToTextureInstancePlaybackLibrary_UpdateInstanceData Parms{};

	Parms.InstanceData = std::move(InstanceData);
	Parms.InstanceIndex = InstanceIndex;
	Parms.PlaybackData = std::move(PlaybackData);
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InstanceData = std::move(Parms.InstanceData);

	return Parms.ReturnValue;
}

}

