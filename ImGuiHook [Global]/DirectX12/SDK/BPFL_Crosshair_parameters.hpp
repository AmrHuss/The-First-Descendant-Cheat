#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_Crosshair

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPFL_Crosshair.BPFL_Crosshair_C.Abs (Vector2D)
// 0x0040 (0x0040 - 0x0000)
struct BPFL_Crosshair_C_Abs__Vector2D_ final
{
public:
	struct FVector2D                              In;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Out;                                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Crosshair_C_Abs__Vector2D_) == 0x000008, "Wrong alignment on BPFL_Crosshair_C_Abs__Vector2D_");
static_assert(sizeof(BPFL_Crosshair_C_Abs__Vector2D_) == 0x000040, "Wrong size on BPFL_Crosshair_C_Abs__Vector2D_");
static_assert(offsetof(BPFL_Crosshair_C_Abs__Vector2D_, In) == 0x000000, "Member 'BPFL_Crosshair_C_Abs__Vector2D_::In' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Abs__Vector2D_, __WorldContext) == 0x000008, "Member 'BPFL_Crosshair_C_Abs__Vector2D_::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Abs__Vector2D_, Out) == 0x000010, "Member 'BPFL_Crosshair_C_Abs__Vector2D_::Out' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Abs__Vector2D_, CallFunc_BreakVector2D_X) == 0x000018, "Member 'BPFL_Crosshair_C_Abs__Vector2D_::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Abs__Vector2D_, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'BPFL_Crosshair_C_Abs__Vector2D_::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Abs__Vector2D_, CallFunc_Abs_ReturnValue) == 0x000028, "Member 'BPFL_Crosshair_C_Abs__Vector2D_::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Abs__Vector2D_, CallFunc_Abs_ReturnValue_1) == 0x000030, "Member 'BPFL_Crosshair_C_Abs__Vector2D_::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Abs__Vector2D_, CallFunc_MakeVector2D_ReturnValue) == 0x000038, "Member 'BPFL_Crosshair_C_Abs__Vector2D_::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function BPFL_Crosshair.BPFL_Crosshair_C.LinearColorToSRGB
// 0x0090 (0x0090 - 0x0000)
struct BPFL_Crosshair_C_LinearColorToSRGB final
{
public:
	struct FLinearColor                           LinearColor_;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SRGB_;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_ByteToDouble_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_ByteToDouble_ReturnValue_1;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_ByteToDouble_ReturnValue_2;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_ByteToDouble_ReturnValue_3;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_B_ImplicitCast;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_A_ImplicitCast;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_R_ImplicitCast;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_G_ImplicitCast;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Crosshair_C_LinearColorToSRGB) == 0x000008, "Wrong alignment on BPFL_Crosshair_C_LinearColorToSRGB");
static_assert(sizeof(BPFL_Crosshair_C_LinearColorToSRGB) == 0x000090, "Wrong size on BPFL_Crosshair_C_LinearColorToSRGB");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, LinearColor_) == 0x000000, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::LinearColor_' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, __WorldContext) == 0x000010, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, SRGB_) == 0x000018, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::SRGB_' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x000028, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, CallFunc_Conv_ByteToDouble_ReturnValue) == 0x000030, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::CallFunc_Conv_ByteToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, CallFunc_Conv_ByteToDouble_ReturnValue_1) == 0x000038, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::CallFunc_Conv_ByteToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000040, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, CallFunc_Conv_ByteToDouble_ReturnValue_2) == 0x000050, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::CallFunc_Conv_ByteToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, CallFunc_Conv_ByteToDouble_ReturnValue_3) == 0x000058, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::CallFunc_Conv_ByteToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000060, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x000068, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, K2Node_MakeStruct_LinearColor) == 0x000070, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, K2Node_MakeStruct_B_ImplicitCast) == 0x000080, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::K2Node_MakeStruct_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, K2Node_MakeStruct_A_ImplicitCast) == 0x000084, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::K2Node_MakeStruct_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, K2Node_MakeStruct_R_ImplicitCast) == 0x000088, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::K2Node_MakeStruct_R_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_LinearColorToSRGB, K2Node_MakeStruct_G_ImplicitCast) == 0x00008C, "Member 'BPFL_Crosshair_C_LinearColorToSRGB::K2Node_MakeStruct_G_ImplicitCast' has a wrong offset!");

// Function BPFL_Crosshair.BPFL_Crosshair_C.SafeHypotenus
// 0x0040 (0x0040 - 0x0000)
struct BPFL_Crosshair_C_SafeHypotenus final
{
public:
	struct FVector2D                              In_vector2d;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Return_value;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Hypotenuse_ReturnValue;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Crosshair_C_SafeHypotenus) == 0x000008, "Wrong alignment on BPFL_Crosshair_C_SafeHypotenus");
static_assert(sizeof(BPFL_Crosshair_C_SafeHypotenus) == 0x000040, "Wrong size on BPFL_Crosshair_C_SafeHypotenus");
static_assert(offsetof(BPFL_Crosshair_C_SafeHypotenus, In_vector2d) == 0x000000, "Member 'BPFL_Crosshair_C_SafeHypotenus::In_vector2d' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_SafeHypotenus, __WorldContext) == 0x000008, "Member 'BPFL_Crosshair_C_SafeHypotenus::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_SafeHypotenus, Return_value) == 0x000010, "Member 'BPFL_Crosshair_C_SafeHypotenus::Return_value' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_SafeHypotenus, CallFunc_BreakVector2D_X) == 0x000018, "Member 'BPFL_Crosshair_C_SafeHypotenus::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_SafeHypotenus, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'BPFL_Crosshair_C_SafeHypotenus::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_SafeHypotenus, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000028, "Member 'BPFL_Crosshair_C_SafeHypotenus::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_SafeHypotenus, CallFunc_Hypotenuse_ReturnValue) == 0x000030, "Member 'BPFL_Crosshair_C_SafeHypotenus::CallFunc_Hypotenuse_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_SafeHypotenus, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'BPFL_Crosshair_C_SafeHypotenus::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_SafeHypotenus, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'BPFL_Crosshair_C_SafeHypotenus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BPFL_Crosshair.BPFL_Crosshair_C.Truncate (Vector2D)
// 0x0048 (0x0048 - 0x0000)
struct BPFL_Crosshair_C_Truncate__Vector2D_ final
{
public:
	struct FVector2D                              In;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Out;                                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_Crosshair_C_Truncate__Vector2D_) == 0x000008, "Wrong alignment on BPFL_Crosshair_C_Truncate__Vector2D_");
static_assert(sizeof(BPFL_Crosshair_C_Truncate__Vector2D_) == 0x000048, "Wrong size on BPFL_Crosshair_C_Truncate__Vector2D_");
static_assert(offsetof(BPFL_Crosshair_C_Truncate__Vector2D_, In) == 0x000000, "Member 'BPFL_Crosshair_C_Truncate__Vector2D_::In' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Truncate__Vector2D_, __WorldContext) == 0x000008, "Member 'BPFL_Crosshair_C_Truncate__Vector2D_::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Truncate__Vector2D_, Out) == 0x000010, "Member 'BPFL_Crosshair_C_Truncate__Vector2D_::Out' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Truncate__Vector2D_, CallFunc_BreakVector2D_X) == 0x000018, "Member 'BPFL_Crosshair_C_Truncate__Vector2D_::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Truncate__Vector2D_, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'BPFL_Crosshair_C_Truncate__Vector2D_::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Truncate__Vector2D_, CallFunc_FTrunc_ReturnValue) == 0x000028, "Member 'BPFL_Crosshair_C_Truncate__Vector2D_::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Truncate__Vector2D_, CallFunc_FTrunc_ReturnValue_1) == 0x00002C, "Member 'BPFL_Crosshair_C_Truncate__Vector2D_::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Truncate__Vector2D_, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000030, "Member 'BPFL_Crosshair_C_Truncate__Vector2D_::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Truncate__Vector2D_, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000038, "Member 'BPFL_Crosshair_C_Truncate__Vector2D_::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_Crosshair_C_Truncate__Vector2D_, CallFunc_MakeVector2D_ReturnValue) == 0x000040, "Member 'BPFL_Crosshair_C_Truncate__Vector2D_::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

}

