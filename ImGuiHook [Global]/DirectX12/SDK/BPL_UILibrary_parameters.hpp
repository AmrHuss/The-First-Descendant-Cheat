#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_UILibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "M1Data_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI ArcheType_Icon
// 0x0058 (0x0058 - 0x0000)
struct BPL_UILibrary_C_Get_UI_ArcheType_Icon final
{
public:
	EM1SkillArcheType                             InArcheType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             ArcheTypeIcon;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EM1SkillArcheType                             Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_ArcheType_Icon) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_ArcheType_Icon");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_ArcheType_Icon) == 0x000058, "Wrong size on BPL_UILibrary_C_Get_UI_ArcheType_Icon");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, InArcheType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::InArcheType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, ArcheTypeIcon) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::ArcheTypeIcon' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, Temp_byte_Variable) == 0x000018, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, Temp_object_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, Temp_object_Variable_1) == 0x000028, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, Temp_object_Variable_2) == 0x000030, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, Temp_object_Variable_3) == 0x000038, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, Temp_object_Variable_4) == 0x000040, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, Temp_object_Variable_5) == 0x000048, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ArcheType_Icon, K2Node_Select_Default) == 0x000050, "Member 'BPL_UILibrary_C_Get_UI_ArcheType_Icon::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI CurrencyType_Icon
// 0x0258 (0x0258 - 0x0000)
struct BPL_UILibrary_C_Get_UI_CurrencyType_Icon final
{
public:
	EM1CurrencyType                               InCurrencyType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              ElementalTypeIcon;                                 // 0x0010(0x0030)(Parm, OutParm, HasGetValueTypeHash)
	EM1CurrencyType                               Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable;                          // 0x0048(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_1;                        // 0x0078(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_2;                        // 0x00A8(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_3;                        // 0x00D8(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_4;                        // 0x0108(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_5;                        // 0x0138(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_6;                        // 0x0168(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_7;                        // 0x0198(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_8;                        // 0x01C8(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_9;                        // 0x01F8(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              K2Node_Select_Default;                             // 0x0228(0x0030)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_CurrencyType_Icon");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon) == 0x000258, "Wrong size on BPL_UILibrary_C_Get_UI_CurrencyType_Icon");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, InCurrencyType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::InCurrencyType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, ElementalTypeIcon) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::ElementalTypeIcon' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_byte_Variable) == 0x000040, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_softobject_Variable) == 0x000048, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_softobject_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_softobject_Variable_1) == 0x000078, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_softobject_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_softobject_Variable_2) == 0x0000A8, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_softobject_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_softobject_Variable_3) == 0x0000D8, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_softobject_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_softobject_Variable_4) == 0x000108, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_softobject_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_softobject_Variable_5) == 0x000138, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_softobject_Variable_5' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_softobject_Variable_6) == 0x000168, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_softobject_Variable_6' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_softobject_Variable_7) == 0x000198, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_softobject_Variable_7' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_softobject_Variable_8) == 0x0001C8, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_softobject_Variable_8' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, Temp_softobject_Variable_9) == 0x0001F8, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::Temp_softobject_Variable_9' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_CurrencyType_Icon, K2Node_Select_Default) == 0x000228, "Member 'BPL_UILibrary_C_Get_UI_CurrencyType_Icon::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI ElemntalType_Color
// 0x00A8 (0x00A8 - 0x0000)
struct BPL_UILibrary_C_Get_UI_ElemntalType_Color final
{
public:
	EM1ElementalDamageChannel                     InElementalDamageType;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ElementalTypeColor;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EM1ElementalDamageChannel                     Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_ElemntalType_Color) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_ElemntalType_Color");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_ElemntalType_Color) == 0x0000A8, "Wrong size on BPL_UILibrary_C_Get_UI_ElemntalType_Color");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, InElementalDamageType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::InElementalDamageType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, ElementalTypeColor) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::ElementalTypeColor' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, Temp_byte_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, Temp_struct_Variable) == 0x000024, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, Temp_struct_Variable_1) == 0x000034, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, Temp_struct_Variable_2) == 0x000044, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, Temp_struct_Variable_3) == 0x000054, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, Temp_struct_Variable_4) == 0x000064, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, Temp_struct_Variable_5) == 0x000074, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, Temp_struct_Variable_6) == 0x000084, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Color, K2Node_Select_Default) == 0x000094, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Color::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI ElemntalType_Icon
// 0x0060 (0x0060 - 0x0000)
struct BPL_UILibrary_C_Get_UI_ElemntalType_Icon final
{
public:
	EM1ElementalDamageChannel                     InElementalDamageType;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             ElementalTypeIcon;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EM1ElementalDamageChannel                     Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_ElemntalType_Icon");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon) == 0x000060, "Wrong size on BPL_UILibrary_C_Get_UI_ElemntalType_Icon");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, InElementalDamageType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::InElementalDamageType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, ElementalTypeIcon) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::ElementalTypeIcon' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, Temp_byte_Variable) == 0x000018, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, Temp_object_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, Temp_object_Variable_1) == 0x000028, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, Temp_object_Variable_2) == 0x000030, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, Temp_object_Variable_3) == 0x000038, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, Temp_object_Variable_4) == 0x000040, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, Temp_object_Variable_5) == 0x000048, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, Temp_object_Variable_6) == 0x000050, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Icon, K2Node_Select_Default) == 0x000058, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Icon::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI ElemntalType_Text
// 0x00A8 (0x00A8 - 0x0000)
struct BPL_UILibrary_C_Get_UI_ElemntalType_Text final
{
public:
	EM1ElementalDamageChannel                     InElementalDamageType;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 ElementalTypeText;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	EM1ElementalDamageChannel                     Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_4;                            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_5;                            // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_6;                            // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_ElemntalType_Text) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_ElemntalType_Text");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_ElemntalType_Text) == 0x0000A8, "Wrong size on BPL_UILibrary_C_Get_UI_ElemntalType_Text");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, InElementalDamageType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::InElementalDamageType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, ElementalTypeText) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::ElementalTypeText' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, Temp_byte_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, Temp_string_Variable) == 0x000028, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, Temp_string_Variable_1) == 0x000038, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, Temp_string_Variable_2) == 0x000048, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, Temp_string_Variable_3) == 0x000058, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, Temp_string_Variable_4) == 0x000068, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::Temp_string_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, Temp_string_Variable_5) == 0x000078, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::Temp_string_Variable_5' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, Temp_string_Variable_6) == 0x000088, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::Temp_string_Variable_6' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ElemntalType_Text, K2Node_Select_Default) == 0x000098, "Member 'BPL_UILibrary_C_Get_UI_ElemntalType_Text::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI ItemOptionTierColor
// 0x0088 (0x0088 - 0x0000)
struct BPL_UILibrary_C_Get_UI_ItemOptionTierColor final
{
public:
	EM1ItemOptionTierType                         OptionTierType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TierColor;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EM1ItemOptionTierType                         Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_ItemOptionTierColor");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor) == 0x000088, "Wrong size on BPL_UILibrary_C_Get_UI_ItemOptionTierColor");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor, OptionTierType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor::OptionTierType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor, TierColor) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor::TierColor' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor, Temp_byte_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor, Temp_struct_Variable) == 0x000024, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor, Temp_struct_Variable_1) == 0x000034, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor, Temp_struct_Variable_2) == 0x000044, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor, Temp_struct_Variable_3) == 0x000054, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor, Temp_struct_Variable_4) == 0x000064, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor, K2Node_Select_Default) == 0x000074, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI ItemOptionTierColor_DeepColors
// 0x0088 (0x0088 - 0x0000)
struct BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors final
{
public:
	EM1ItemOptionTierType                         OptionTierType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TierColor;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EM1ItemOptionTierType                         Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors) == 0x000088, "Wrong size on BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors, OptionTierType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors::OptionTierType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors, TierColor) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors::TierColor' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors, Temp_byte_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors, Temp_struct_Variable) == 0x000024, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors, Temp_struct_Variable_1) == 0x000034, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors, Temp_struct_Variable_2) == 0x000044, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors, Temp_struct_Variable_3) == 0x000054, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors, Temp_struct_Variable_4) == 0x000064, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors, K2Node_Select_Default) == 0x000074, "Member 'BPL_UILibrary_C_Get_UI_ItemOptionTierColor_DeepColors::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI RoundsType_Icon
// 0x0050 (0x0050 - 0x0000)
struct BPL_UILibrary_C_Get_UI_RoundsType_Icon final
{
public:
	EM1RoundsType                                 InRoundsType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             ElementalTypeIcon;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EM1RoundsType                                 Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_RoundsType_Icon) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_RoundsType_Icon");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_RoundsType_Icon) == 0x000050, "Wrong size on BPL_UILibrary_C_Get_UI_RoundsType_Icon");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon, InRoundsType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon::InRoundsType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon, ElementalTypeIcon) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon::ElementalTypeIcon' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon, Temp_byte_Variable) == 0x000018, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon, Temp_object_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon, Temp_object_Variable_1) == 0x000028, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon, Temp_object_Variable_2) == 0x000030, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon, Temp_object_Variable_3) == 0x000038, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon, Temp_object_Variable_4) == 0x000040, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon, K2Node_Select_Default) == 0x000048, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI RoundsType_Icon2
// 0x0050 (0x0050 - 0x0000)
struct BPL_UILibrary_C_Get_UI_RoundsType_Icon2 final
{
public:
	EM1RoundsType                                 InRoundsType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             ElementalTypeIcon;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EM1RoundsType                                 Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_RoundsType_Icon2");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2) == 0x000050, "Wrong size on BPL_UILibrary_C_Get_UI_RoundsType_Icon2");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2, InRoundsType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon2::InRoundsType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon2::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2, ElementalTypeIcon) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon2::ElementalTypeIcon' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2, Temp_byte_Variable) == 0x000018, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon2::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2, Temp_object_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon2::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2, Temp_object_Variable_1) == 0x000028, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon2::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2, Temp_object_Variable_2) == 0x000030, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon2::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2, Temp_object_Variable_3) == 0x000038, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon2::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2, Temp_object_Variable_4) == 0x000040, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon2::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Icon2, K2Node_Select_Default) == 0x000048, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Icon2::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI RoundsType_Text
// 0x0088 (0x0088 - 0x0000)
struct BPL_UILibrary_C_Get_UI_RoundsType_Text final
{
public:
	EM1RoundsType                                 InRoundsType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 ElementalTypeText;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	EM1RoundsType                                 Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_4;                            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_RoundsType_Text) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_RoundsType_Text");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_RoundsType_Text) == 0x000088, "Wrong size on BPL_UILibrary_C_Get_UI_RoundsType_Text");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Text, InRoundsType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Text::InRoundsType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Text, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Text::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Text, ElementalTypeText) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Text::ElementalTypeText' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Text, Temp_byte_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Text::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Text, Temp_string_Variable) == 0x000028, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Text::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Text, Temp_string_Variable_1) == 0x000038, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Text::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Text, Temp_string_Variable_2) == 0x000048, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Text::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Text, Temp_string_Variable_3) == 0x000058, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Text::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Text, Temp_string_Variable_4) == 0x000068, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Text::Temp_string_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_RoundsType_Text, K2Node_Select_Default) == 0x000078, "Member 'BPL_UILibrary_C_Get_UI_RoundsType_Text::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI TierColor_Base
// 0x0098 (0x0098 - 0x0000)
struct BPL_UILibrary_C_Get_UI_TierColor_Base final
{
public:
	EM1ItemTierType                               InItemTierType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TierColor;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EM1ItemTierType                               Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_TierColor_Base) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_TierColor_Base");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_TierColor_Base) == 0x000098, "Wrong size on BPL_UILibrary_C_Get_UI_TierColor_Base");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, InItemTierType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::InItemTierType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, TierColor) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::TierColor' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, Temp_byte_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, Temp_struct_Variable) == 0x000024, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, Temp_struct_Variable_1) == 0x000034, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, Temp_struct_Variable_2) == 0x000044, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, Temp_struct_Variable_3) == 0x000054, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, Temp_struct_Variable_4) == 0x000064, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, Temp_struct_Variable_5) == 0x000074, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Base, K2Node_Select_Default) == 0x000084, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Base::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI TierColor_Line
// 0x0098 (0x0098 - 0x0000)
struct BPL_UILibrary_C_Get_UI_TierColor_Line final
{
public:
	EM1ItemTierType                               InItemTierType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TierColor_Line;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EM1ItemTierType                               Temp_byte_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_TierColor_Line) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_TierColor_Line");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_TierColor_Line) == 0x000098, "Wrong size on BPL_UILibrary_C_Get_UI_TierColor_Line");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, InItemTierType) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::InItemTierType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, TierColor_Line) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::TierColor_Line' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, Temp_byte_Variable) == 0x000020, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, Temp_struct_Variable) == 0x000024, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, Temp_struct_Variable_1) == 0x000034, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, Temp_struct_Variable_2) == 0x000044, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, Temp_struct_Variable_3) == 0x000054, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, Temp_struct_Variable_4) == 0x000064, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, Temp_struct_Variable_5) == 0x000074, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_TierColor_Line, K2Node_Select_Default) == 0x000084, "Member 'BPL_UILibrary_C_Get_UI_TierColor_Line::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Get UI WeaponClass_Icon
// 0x0118 (0x0118 - 0x0000)
struct BPL_UILibrary_C_Get_UI_WeaponClass_Icon final
{
public:
	EM1EquipItemClassType                         InEquipItemClass;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              ElementalTypeIcon;                                 // 0x0010(0x0030)(Parm, OutParm, HasGetValueTypeHash)
	EM1EquipItemClassType                         Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_8;                            // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_9;                            // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_10;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_11;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_12;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_13;                           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_14;                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_15;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_16;                           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_17;                           // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_18;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x00E8(0x0030)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Get_UI_WeaponClass_Icon");
static_assert(sizeof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon) == 0x000118, "Wrong size on BPL_UILibrary_C_Get_UI_WeaponClass_Icon");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, InEquipItemClass) == 0x000000, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::InEquipItemClass' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, __WorldContext) == 0x000008, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, ElementalTypeIcon) == 0x000010, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::ElementalTypeIcon' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_byte_Variable) == 0x000040, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable) == 0x000048, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_1) == 0x000050, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_2) == 0x000058, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_3) == 0x000060, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_4) == 0x000068, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_5) == 0x000070, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_6) == 0x000078, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_7) == 0x000080, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_8) == 0x000088, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_9) == 0x000090, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_10) == 0x000098, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_11) == 0x0000A0, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_12) == 0x0000A8, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_13) == 0x0000B0, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_14) == 0x0000B8, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_15) == 0x0000C0, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_16) == 0x0000C8, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_17) == 0x0000D0, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, Temp_object_Variable_18) == 0x0000D8, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, K2Node_Select_Default) == 0x0000E0, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Get_UI_WeaponClass_Icon, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x0000E8, "Member 'BPL_UILibrary_C_Get_UI_WeaponClass_Icon::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.Set UI Rounds Color
// 0x0080 (0x0080 - 0x0000)
struct BPL_UILibrary_C_Set_UI_Rounds_Color final
{
public:
	class UImage*                                 InImage;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EM1RoundsType                                 InRoundType;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EM1RoundsType                                 Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_Set_UI_Rounds_Color) == 0x000008, "Wrong alignment on BPL_UILibrary_C_Set_UI_Rounds_Color");
static_assert(sizeof(BPL_UILibrary_C_Set_UI_Rounds_Color) == 0x000080, "Wrong size on BPL_UILibrary_C_Set_UI_Rounds_Color");
static_assert(offsetof(BPL_UILibrary_C_Set_UI_Rounds_Color, InImage) == 0x000000, "Member 'BPL_UILibrary_C_Set_UI_Rounds_Color::InImage' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Set_UI_Rounds_Color, InRoundType) == 0x000008, "Member 'BPL_UILibrary_C_Set_UI_Rounds_Color::InRoundType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Set_UI_Rounds_Color, __WorldContext) == 0x000010, "Member 'BPL_UILibrary_C_Set_UI_Rounds_Color::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Set_UI_Rounds_Color, Temp_byte_Variable) == 0x000018, "Member 'BPL_UILibrary_C_Set_UI_Rounds_Color::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Set_UI_Rounds_Color, Temp_struct_Variable) == 0x00001C, "Member 'BPL_UILibrary_C_Set_UI_Rounds_Color::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Set_UI_Rounds_Color, Temp_struct_Variable_1) == 0x00002C, "Member 'BPL_UILibrary_C_Set_UI_Rounds_Color::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Set_UI_Rounds_Color, Temp_struct_Variable_2) == 0x00003C, "Member 'BPL_UILibrary_C_Set_UI_Rounds_Color::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Set_UI_Rounds_Color, Temp_struct_Variable_3) == 0x00004C, "Member 'BPL_UILibrary_C_Set_UI_Rounds_Color::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Set_UI_Rounds_Color, Temp_struct_Variable_4) == 0x00005C, "Member 'BPL_UILibrary_C_Set_UI_Rounds_Color::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_Set_UI_Rounds_Color, K2Node_Select_Default) == 0x00006C, "Member 'BPL_UILibrary_C_Set_UI_Rounds_Color::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.SetUICurrencyIcon
// 0x0230 (0x0230 - 0x0000)
struct BPL_UILibrary_C_SetUICurrencyIcon final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EM1CurrencyType                               CurrencyType;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EM1CurrencyType                               Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable;                          // 0x0020(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_1;                        // 0x0050(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_2;                        // 0x0080(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_3;                        // 0x00B0(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_4;                        // 0x00E0(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_5;                        // 0x0110(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_6;                        // 0x0140(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_7;                        // 0x0170(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_8;                        // 0x01A0(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable_9;                        // 0x01D0(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              K2Node_Select_Default;                             // 0x0200(0x0030)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_SetUICurrencyIcon) == 0x000008, "Wrong alignment on BPL_UILibrary_C_SetUICurrencyIcon");
static_assert(sizeof(BPL_UILibrary_C_SetUICurrencyIcon) == 0x000230, "Wrong size on BPL_UILibrary_C_SetUICurrencyIcon");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Image) == 0x000000, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Image' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, CurrencyType) == 0x000008, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::CurrencyType' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, __WorldContext) == 0x000010, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_byte_Variable) == 0x000018, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_softobject_Variable) == 0x000020, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_softobject_Variable' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_softobject_Variable_1) == 0x000050, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_softobject_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_softobject_Variable_2) == 0x000080, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_softobject_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_softobject_Variable_3) == 0x0000B0, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_softobject_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_softobject_Variable_4) == 0x0000E0, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_softobject_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_softobject_Variable_5) == 0x000110, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_softobject_Variable_5' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_softobject_Variable_6) == 0x000140, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_softobject_Variable_6' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_softobject_Variable_7) == 0x000170, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_softobject_Variable_7' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_softobject_Variable_8) == 0x0001A0, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_softobject_Variable_8' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, Temp_softobject_Variable_9) == 0x0001D0, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::Temp_softobject_Variable_9' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUICurrencyIcon, K2Node_Select_Default) == 0x000200, "Member 'BPL_UILibrary_C_SetUICurrencyIcon::K2Node_Select_Default' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.SetUIKeyColor
// 0x0048 (0x0048 - 0x0000)
struct BPL_UILibrary_C_SetUIKeyColor final
{
public:
	class UM1TextBlock*                           InText;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 InImage;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                InBorder;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           KeyColor;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0034(0x0014)()
};
static_assert(alignof(BPL_UILibrary_C_SetUIKeyColor) == 0x000008, "Wrong alignment on BPL_UILibrary_C_SetUIKeyColor");
static_assert(sizeof(BPL_UILibrary_C_SetUIKeyColor) == 0x000048, "Wrong size on BPL_UILibrary_C_SetUIKeyColor");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor, InText) == 0x000000, "Member 'BPL_UILibrary_C_SetUIKeyColor::InText' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor, InImage) == 0x000008, "Member 'BPL_UILibrary_C_SetUIKeyColor::InImage' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor, InBorder) == 0x000010, "Member 'BPL_UILibrary_C_SetUIKeyColor::InBorder' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor, __WorldContext) == 0x000018, "Member 'BPL_UILibrary_C_SetUIKeyColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor, KeyColor) == 0x000020, "Member 'BPL_UILibrary_C_SetUIKeyColor::KeyColor' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BPL_UILibrary_C_SetUIKeyColor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'BPL_UILibrary_C_SetUIKeyColor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor, CallFunc_IsValid_ReturnValue_2) == 0x000032, "Member 'BPL_UILibrary_C_SetUIKeyColor::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor, K2Node_MakeStruct_SlateColor) == 0x000034, "Member 'BPL_UILibrary_C_SetUIKeyColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.SetUIKeyColor_Material
// 0x0048 (0x0048 - 0x0000)
struct BPL_UILibrary_C_SetUIKeyColor_Material final
{
public:
	class UM1TextBlock*                           InText;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 InImage;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                InBorder;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SetColor;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0030(0x0014)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_UILibrary_C_SetUIKeyColor_Material) == 0x000008, "Wrong alignment on BPL_UILibrary_C_SetUIKeyColor_Material");
static_assert(sizeof(BPL_UILibrary_C_SetUIKeyColor_Material) == 0x000048, "Wrong size on BPL_UILibrary_C_SetUIKeyColor_Material");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor_Material, InText) == 0x000000, "Member 'BPL_UILibrary_C_SetUIKeyColor_Material::InText' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor_Material, InImage) == 0x000008, "Member 'BPL_UILibrary_C_SetUIKeyColor_Material::InImage' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor_Material, InBorder) == 0x000010, "Member 'BPL_UILibrary_C_SetUIKeyColor_Material::InBorder' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor_Material, __WorldContext) == 0x000018, "Member 'BPL_UILibrary_C_SetUIKeyColor_Material::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor_Material, SetColor) == 0x000020, "Member 'BPL_UILibrary_C_SetUIKeyColor_Material::SetColor' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor_Material, K2Node_MakeStruct_SlateColor) == 0x000030, "Member 'BPL_UILibrary_C_SetUIKeyColor_Material::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor_Material, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'BPL_UILibrary_C_SetUIKeyColor_Material::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor_Material, CallFunc_IsValid_ReturnValue_1) == 0x000045, "Member 'BPL_UILibrary_C_SetUIKeyColor_Material::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIKeyColor_Material, CallFunc_IsValid_ReturnValue_2) == 0x000046, "Member 'BPL_UILibrary_C_SetUIKeyColor_Material::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.SetUIMaxCharacterColor_Text
// 0x0048 (0x0048 - 0x0000)
struct BPL_UILibrary_C_SetUIMaxCharacterColor_Text final
{
public:
	class UM1TextBlock*                           InText;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 InImage;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                InBorder;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           KeyColor;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0034(0x0014)()
};
static_assert(alignof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text) == 0x000008, "Wrong alignment on BPL_UILibrary_C_SetUIMaxCharacterColor_Text");
static_assert(sizeof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text) == 0x000048, "Wrong size on BPL_UILibrary_C_SetUIMaxCharacterColor_Text");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text, InText) == 0x000000, "Member 'BPL_UILibrary_C_SetUIMaxCharacterColor_Text::InText' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text, InImage) == 0x000008, "Member 'BPL_UILibrary_C_SetUIMaxCharacterColor_Text::InImage' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text, InBorder) == 0x000010, "Member 'BPL_UILibrary_C_SetUIMaxCharacterColor_Text::InBorder' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text, __WorldContext) == 0x000018, "Member 'BPL_UILibrary_C_SetUIMaxCharacterColor_Text::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text, KeyColor) == 0x000020, "Member 'BPL_UILibrary_C_SetUIMaxCharacterColor_Text::KeyColor' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BPL_UILibrary_C_SetUIMaxCharacterColor_Text::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'BPL_UILibrary_C_SetUIMaxCharacterColor_Text::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text, CallFunc_IsValid_ReturnValue_2) == 0x000032, "Member 'BPL_UILibrary_C_SetUIMaxCharacterColor_Text::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxCharacterColor_Text, K2Node_MakeStruct_SlateColor) == 0x000034, "Member 'BPL_UILibrary_C_SetUIMaxCharacterColor_Text::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.SetUIMaxMasteryColor_Text
// 0x0048 (0x0048 - 0x0000)
struct BPL_UILibrary_C_SetUIMaxMasteryColor_Text final
{
public:
	class UM1TextBlock*                           InText;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 InImage;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                InBorder;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           KeyColor;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0034(0x0014)()
};
static_assert(alignof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text) == 0x000008, "Wrong alignment on BPL_UILibrary_C_SetUIMaxMasteryColor_Text");
static_assert(sizeof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text) == 0x000048, "Wrong size on BPL_UILibrary_C_SetUIMaxMasteryColor_Text");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text, InText) == 0x000000, "Member 'BPL_UILibrary_C_SetUIMaxMasteryColor_Text::InText' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text, InImage) == 0x000008, "Member 'BPL_UILibrary_C_SetUIMaxMasteryColor_Text::InImage' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text, InBorder) == 0x000010, "Member 'BPL_UILibrary_C_SetUIMaxMasteryColor_Text::InBorder' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text, __WorldContext) == 0x000018, "Member 'BPL_UILibrary_C_SetUIMaxMasteryColor_Text::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text, KeyColor) == 0x000020, "Member 'BPL_UILibrary_C_SetUIMaxMasteryColor_Text::KeyColor' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BPL_UILibrary_C_SetUIMaxMasteryColor_Text::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'BPL_UILibrary_C_SetUIMaxMasteryColor_Text::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text, CallFunc_IsValid_ReturnValue_2) == 0x000032, "Member 'BPL_UILibrary_C_SetUIMaxMasteryColor_Text::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIMaxMasteryColor_Text, K2Node_MakeStruct_SlateColor) == 0x000034, "Member 'BPL_UILibrary_C_SetUIMaxMasteryColor_Text::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function BPL_UILibrary.BPL_UILibrary_C.SetUIWarringColor_Text
// 0x0048 (0x0048 - 0x0000)
struct BPL_UILibrary_C_SetUIWarringColor_Text final
{
public:
	class UM1TextBlock*                           InText;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 InImage;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                InBorder;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           KeyColor;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0034(0x0014)()
};
static_assert(alignof(BPL_UILibrary_C_SetUIWarringColor_Text) == 0x000008, "Wrong alignment on BPL_UILibrary_C_SetUIWarringColor_Text");
static_assert(sizeof(BPL_UILibrary_C_SetUIWarringColor_Text) == 0x000048, "Wrong size on BPL_UILibrary_C_SetUIWarringColor_Text");
static_assert(offsetof(BPL_UILibrary_C_SetUIWarringColor_Text, InText) == 0x000000, "Member 'BPL_UILibrary_C_SetUIWarringColor_Text::InText' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIWarringColor_Text, InImage) == 0x000008, "Member 'BPL_UILibrary_C_SetUIWarringColor_Text::InImage' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIWarringColor_Text, InBorder) == 0x000010, "Member 'BPL_UILibrary_C_SetUIWarringColor_Text::InBorder' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIWarringColor_Text, __WorldContext) == 0x000018, "Member 'BPL_UILibrary_C_SetUIWarringColor_Text::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIWarringColor_Text, KeyColor) == 0x000020, "Member 'BPL_UILibrary_C_SetUIWarringColor_Text::KeyColor' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIWarringColor_Text, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BPL_UILibrary_C_SetUIWarringColor_Text::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIWarringColor_Text, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'BPL_UILibrary_C_SetUIWarringColor_Text::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIWarringColor_Text, CallFunc_IsValid_ReturnValue_2) == 0x000032, "Member 'BPL_UILibrary_C_SetUIWarringColor_Text::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_UILibrary_C_SetUIWarringColor_Text, K2Node_MakeStruct_SlateColor) == 0x000034, "Member 'BPL_UILibrary_C_SetUIWarringColor_Text::K2Node_MakeStruct_SlateColor' has a wrong offset!");

}

