#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AKComponent

#include "Basic.hpp"

#include "BP_AKComponent_classes.hpp"
#include "BP_AKComponent_parameters.hpp"


namespace SDK
{

// Function BP_AKComponent.BP_AKComponent_C.BP_OnAbilityActorDestroyed
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)

void UBP_AKComponent_C::BP_OnAbilityActorDestroyed(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnAbilityActorDestroyed");

	Params::BP_AKComponent_C_BP_OnAbilityActorDestroyed Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnAbilityActorSpawned
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnAbilityActorSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnAbilityActorSpawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnAbilityProjectileBounce
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnAbilityProjectileBounce(const struct FVector& Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnAbilityProjectileBounce");

	Params::BP_AKComponent_C_BP_OnAbilityProjectileBounce Parms{};

	Parms.Velocity = std::move(Velocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnAbilityProjectileExplosion
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)

void UBP_AKComponent_C::BP_OnAbilityProjectileExplosion(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnAbilityProjectileExplosion");

	Params::BP_AKComponent_C_BP_OnAbilityProjectileExplosion Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnAbilityProjectileHit
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        HitSurfaceType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)

void UBP_AKComponent_C::BP_OnAbilityProjectileHit(EPhysicalSurface HitSurfaceType, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnAbilityProjectileHit");

	Params::BP_AKComponent_C_BP_OnAbilityProjectileHit Parms{};

	Parms.HitSurfaceType = HitSurfaceType;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnAbilityProjectilePassBy
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnAbilityProjectilePassBy(const struct FVector& Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnAbilityProjectilePassBy");

	Params::BP_AKComponent_C_BP_OnAbilityProjectilePassBy Parms{};

	Parms.Velocity = std::move(Velocity);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnApplyBattleVoice
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InActivate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnApplyBattleVoice(bool InActivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnApplyBattleVoice");

	Params::BP_AKComponent_C_BP_OnApplyBattleVoice Parms{};

	Parms.InActivate = InActivate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnChangeAudioMixOption
// (Event, Protected, BlueprintEvent)
// Parameters:
// EM1AudioMix                             InOption                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnChangeAudioMixOption(EM1AudioMix InOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnChangeAudioMixOption");

	Params::BP_AKComponent_C_BP_OnChangeAudioMixOption Parms{};

	Parms.InOption = InOption;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnChangedTimeDilation
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnChangedTimeDilation(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnChangedTimeDilation");

	Params::BP_AKComponent_C_BP_OnChangedTimeDilation Parms{};

	Parms.Rate = Rate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnChangedWeaponByHold
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnChangedWeaponByHold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnChangedWeaponByHold");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnChangeGamePadVibrationAmount
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   InMount                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnChangeGamePadVibrationAmount(float InMount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnChangeGamePadVibrationAmount");

	Params::BP_AKComponent_C_BP_OnChangeGamePadVibrationAmount Parms{};

	Parms.InMount = InMount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnChangeUseGamepadVibration
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bUse                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnChangeUseGamepadVibration(bool bUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnChangeUseGamepadVibration");

	Params::BP_AKComponent_C_BP_OnChangeUseGamepadVibration Parms{};

	Parms.bUse = bUse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnCharacterDie
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWeakness                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnCharacterDie(bool bWeakness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnCharacterDie");

	Params::BP_AKComponent_C_BP_OnCharacterDie Parms{};

	Parms.bWeakness = bWeakness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnCharacterMeleeHit
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UM1DataSoundEffects*              OptionalSoundEffects                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        HitSurfaceType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnCharacterMeleeHit(const class UM1DataSoundEffects* OptionalSoundEffects, EPhysicalSurface HitSurfaceType, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnCharacterMeleeHit");

	Params::BP_AKComponent_C_BP_OnCharacterMeleeHit Parms{};

	Parms.OptionalSoundEffects = OptionalSoundEffects;
	Parms.HitSurfaceType = HitSurfaceType;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnCharacterRangeHit
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UM1DataSoundEffects*              SoundEffects                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        HitSurfaceType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)

void UBP_AKComponent_C::BP_OnCharacterRangeHit(const class UM1DataSoundEffects* SoundEffects, EPhysicalSurface HitSurfaceType, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnCharacterRangeHit");

	Params::BP_AKComponent_C_BP_OnCharacterRangeHit Parms{};

	Parms.SoundEffects = SoundEffects;
	Parms.HitSurfaceType = HitSurfaceType;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnCharacterReceiveDynamicDialogueAnimNotify
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// EM1DynamicDialogueStimulus              Stimulus                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           InEventName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   ArgPaths                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_AKComponent_C::BP_OnCharacterReceiveDynamicDialogueAnimNotify(EM1DynamicDialogueStimulus Stimulus, const class FString& InEventName, const TArray<class FString>& ArgPaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnCharacterReceiveDynamicDialogueAnimNotify");

	Params::BP_AKComponent_C_BP_OnCharacterReceiveDynamicDialogueAnimNotify Parms{};

	Parms.Stimulus = Stimulus;
	Parms.InEventName = std::move(InEventName);
	Parms.ArgPaths = std::move(ArgPaths);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnCharacterReceiveFootStepAnimNotify
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FString                           SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           CharacterFootStepAction                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnCharacterReceiveFootStepAnimNotify(const class FString& SurfaceType, const class FString& CharacterFootStepAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnCharacterReceiveFootStepAnimNotify");

	Params::BP_AKComponent_C_BP_OnCharacterReceiveFootStepAnimNotify Parms{};

	Parms.SurfaceType = std::move(SurfaceType);
	Parms.CharacterFootStepAction = std::move(CharacterFootStepAction);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnDoorCloseEnd
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnDoorCloseEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnDoorCloseEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnDoorCloseStart
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnDoorCloseStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnDoorCloseStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnDoorOpenEnd
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnDoorOpenEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnDoorOpenEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnDoorOpenStart
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnDoorOpenStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnDoorOpenStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnDropItemObtained
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnDropItemObtained()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnDropItemObtained");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnDropItemSpawned
// (Event, Protected, BlueprintEvent)
// Parameters:
// EM1ImportanceType                       InImportanceType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnDropItemSpawned(EM1ImportanceType InImportanceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnDropItemSpawned");

	Params::BP_AKComponent_C_BP_OnDropItemSpawned Parms{};

	Parms.InImportanceType = InImportanceType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnHookChangedWireState
// (Event, Protected, BlueprintEvent)
// Parameters:
// EM1WireState                            State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnHookChangedWireState(EM1WireState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnHookChangedWireState");

	Params::BP_AKComponent_C_BP_OnHookChangedWireState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMiniGameFinished
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsSuccess                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnMiniGameFinished(const bool bIsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMiniGameFinished");

	Params::BP_AKComponent_C_BP_OnMiniGameFinished Parms{};

	Parms.bIsSuccess = bIsSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMiniGameStartedBySpecialCharacter
// (Event, Protected, BlueprintEvent)
// Parameters:
// EM1MiniGameType                         InMiniGameType                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnMiniGameStartedBySpecialCharacter(const EM1MiniGameType InMiniGameType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMiniGameStartedBySpecialCharacter");

	Params::BP_AKComponent_C_BP_OnMiniGameStartedBySpecialCharacter Parms{};

	Parms.InMiniGameType = InMiniGameType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterAIMontageSound
// (Event, Protected, BlueprintEvent)
// Parameters:
// EM1MonsterMontageSoundType              MonsterMontageSoundType                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnMonsterAIMontageSound(EM1MonsterMontageSoundType MonsterMontageSoundType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterAIMontageSound");

	Params::BP_AKComponent_C_BP_OnMonsterAIMontageSound Parms{};

	Parms.MonsterMontageSoundType = MonsterMontageSoundType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterDamaged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsHitWeakPoint                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnMonsterDamaged(bool bIsHitWeakPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterDamaged");

	Params::BP_AKComponent_C_BP_OnMonsterDamaged Parms{};

	Parms.bIsHitWeakPoint = bIsHitWeakPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterGainKnockStatusEffect
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnMonsterGainKnockStatusEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterGainKnockStatusEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterReceiveAnimNotify
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsFollowComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           AttachTargetName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           TargetMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsDebugNotify                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnMonsterReceiveAnimNotify(class UAkAudioEvent* AkEvent, bool bIsFollowComponent, const class FString& AttachTargetName, class USkeletalMeshComponent* TargetMesh, bool bIsDebugNotify, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterReceiveAnimNotify");

	Params::BP_AKComponent_C_BP_OnMonsterReceiveAnimNotify Parms{};

	Parms.AkEvent = AkEvent;
	Parms.bIsFollowComponent = bIsFollowComponent;
	Parms.AttachTargetName = std::move(AttachTargetName);
	Parms.TargetMesh = TargetMesh;
	Parms.bIsDebugNotify = bIsDebugNotify;
	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterReceiveAnimNotifyEnd
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkComponent*                     TargetAkComponent                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnMonsterReceiveAnimNotifyEnd(const class UAkComponent* TargetAkComponent, class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterReceiveAnimNotifyEnd");

	Params::BP_AKComponent_C_BP_OnMonsterReceiveAnimNotifyEnd Parms{};

	Parms.TargetAkComponent = TargetAkComponent;
	Parms.AkEvent = AkEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterReceiveFootStepAnimNotify
// (Event, Protected, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PlayerFootStepAction                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnMonsterReceiveFootStepAnimNotify(EPhysicalSurface SurfaceType, uint8 PlayerFootStepAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterReceiveFootStepAnimNotify");

	Params::BP_AKComponent_C_BP_OnMonsterReceiveFootStepAnimNotify Parms{};

	Parms.SurfaceType = SurfaceType;
	Parms.PlayerFootStepAction = PlayerFootStepAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterStartMoveByPurpose
// (Event, Protected, BlueprintEvent)
// Parameters:
// EM1AIMovePurpose                        MovePurpose                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInBattle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnMonsterStartMoveByPurpose(EM1AIMovePurpose MovePurpose, bool bInBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterStartMoveByPurpose");

	Params::BP_AKComponent_C_BP_OnMonsterStartMoveByPurpose Parms{};

	Parms.MovePurpose = MovePurpose;
	Parms.bInBattle = bInBattle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterStartMoveWithDamage
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnMonsterStartMoveWithDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterStartMoveWithDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterStartNormalMeleeAttack
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnMonsterStartNormalMeleeAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterStartNormalMeleeAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterStartNormalRangedAttack
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnMonsterStartNormalRangedAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterStartNormalRangedAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterStartRush
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnMonsterStartRush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterStartRush");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMonsterStopMoveByPurpose
// (Event, Protected, BlueprintEvent)
// Parameters:
// EM1AIMovePurpose                        MovePurpose                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInBattle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIdle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnMonsterStopMoveByPurpose(EM1AIMovePurpose MovePurpose, bool bInBattle, bool bIdle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMonsterStopMoveByPurpose");

	Params::BP_AKComponent_C_BP_OnMonsterStopMoveByPurpose Parms{};

	Parms.MovePurpose = MovePurpose;
	Parms.bInBattle = bInBattle;
	Parms.bIdle = bIdle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMovingActorDespawn
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnMovingActorDespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMovingActorDespawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMovingActorMoveEnd
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnMovingActorMoveEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMovingActorMoveEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMovingActorMoveStart
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Speed                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnMovingActorMoveStart(const float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMovingActorMoveStart");

	Params::BP_AKComponent_C_BP_OnMovingActorMoveStart Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnMovingActorSpawn
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnMovingActorSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnMovingActorSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnNpcInteractionStarted
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnNpcInteractionStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnNpcInteractionStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnNpcLookedAtPlayer
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnNpcLookedAtPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnNpcLookedAtPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnNpcPlayerApproached
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnNpcPlayerApproached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnNpcPlayerApproached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerActiveDBNO
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnPlayerActiveDBNO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerActiveDBNO");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerBattleStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bInBattleState                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerBattleStateChanged(const bool bInBattleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerBattleStateChanged");

	Params::BP_AKComponent_C_BP_OnPlayerBattleStateChanged Parms{};

	Parms.bInBattleState = bInBattleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerChangedWireState
// (Event, Protected, BlueprintEvent)
// Parameters:
// EM1WireState                            State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerChangedWireState(EM1WireState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerChangedWireState");

	Params::BP_AKComponent_C_BP_OnPlayerChangedWireState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerDamaged
// (Event, Protected, BlueprintEvent)
// Parameters:
// EM1DynamicDialogueStimulus              DamageStimulus                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerDamaged(EM1DynamicDialogueStimulus DamageStimulus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerDamaged");

	Params::BP_AKComponent_C_BP_OnPlayerDamaged Parms{};

	Parms.DamageStimulus = DamageStimulus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerDamagedFromDirection
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerDamagedFromDirection(float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerDamagedFromDirection");

	Params::BP_AKComponent_C_BP_OnPlayerDamagedFromDirection Parms{};

	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerEndDebone
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnPlayerEndDebone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerEndDebone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerEnterArea
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FString                           LocationString                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerEnterArea(const class FString& LocationString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerEnterArea");

	Params::BP_AKComponent_C_BP_OnPlayerEnterArea Parms{};

	Parms.LocationString = std::move(LocationString);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerEnterEpicBossRange
// (BlueprintEvent)
// Parameters:
// class FString                           EpicBossName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerEnterEpicBossRange(const class FString& EpicBossName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerEnterEpicBossRange");

	Params::BP_AKComponent_C_BP_OnPlayerEnterEpicBossRange Parms{};

	Parms.EpicBossName = std::move(EpicBossName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerExitEpicBossRange
// (BlueprintEvent)
// Parameters:
// class FString                           EpicBossName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerExitEpicBossRange(const class FString& EpicBossName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerExitEpicBossRange");

	Params::BP_AKComponent_C_BP_OnPlayerExitEpicBossRange Parms{};

	Parms.EpicBossName = std::move(EpicBossName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerFalling
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   VelocityZ                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerFalling(const float VelocityZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerFalling");

	Params::BP_AKComponent_C_BP_OnPlayerFalling Parms{};

	Parms.VelocityZ = VelocityZ;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerFirstFailedOfAutoReload
// (Event, Protected, BlueprintEvent)
// Parameters:
// EM1DynamicDialogueStimulus              EmptyRoundsStimulus                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerFirstFailedOfAutoReload(EM1DynamicDialogueStimulus EmptyRoundsStimulus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerFirstFailedOfAutoReload");

	Params::BP_AKComponent_C_BP_OnPlayerFirstFailedOfAutoReload Parms{};

	Parms.EmptyRoundsStimulus = EmptyRoundsStimulus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerInitSound
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnPlayerInitSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerInitSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerJoinMission
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnPlayerJoinMission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerJoinMission");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerKilledEpicBoss
// (BlueprintEvent)
// Parameters:
// class FString                           EpicBossName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerKilledEpicBoss(const class FString& EpicBossName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerKilledEpicBoss");

	Params::BP_AKComponent_C_BP_OnPlayerKilledEpicBoss Parms{};

	Parms.EpicBossName = std::move(EpicBossName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerLanded
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    Hard                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerLanded(const bool Hard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerLanded");

	Params::BP_AKComponent_C_BP_OnPlayerLanded Parms{};

	Parms.Hard = Hard;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerNeedToPlayLocalSound
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    LocalSoundToPlay                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerNeedToPlayLocalSound(class UAkAudioEvent* LocalSoundToPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerNeedToPlayLocalSound");

	Params::BP_AKComponent_C_BP_OnPlayerNeedToPlayLocalSound Parms{};

	Parms.LocalSoundToPlay = LocalSoundToPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerOutPlayableArea
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    InActivatedEvent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerOutPlayableArea(class UAkAudioEvent* InActivatedEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerOutPlayableArea");

	Params::BP_AKComponent_C_BP_OnPlayerOutPlayableArea Parms{};

	Parms.InActivatedEvent = InActivatedEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerRangedWeaponChargeGaugeDecrease
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ChargeLevel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerRangedWeaponChargeGaugeDecrease(class UAkAudioEvent* AkEvent, int32 ChargeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerRangedWeaponChargeGaugeDecrease");

	Params::BP_AKComponent_C_BP_OnPlayerRangedWeaponChargeGaugeDecrease Parms{};

	Parms.AkEvent = AkEvent;
	Parms.ChargeLevel = ChargeLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerRangedWeaponChargeGaugeIncrease
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ChargeLevel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerRangedWeaponChargeGaugeIncrease(class UAkAudioEvent* AkEvent, int32 ChargeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerRangedWeaponChargeGaugeIncrease");

	Params::BP_AKComponent_C_BP_OnPlayerRangedWeaponChargeGaugeIncrease Parms{};

	Parms.AkEvent = AkEvent;
	Parms.ChargeLevel = ChargeLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerRangedWeaponChargeIdle
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerRangedWeaponChargeIdle(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerRangedWeaponChargeIdle");

	Params::BP_AKComponent_C_BP_OnPlayerRangedWeaponChargeIdle Parms{};

	Parms.AkEvent = AkEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerRangedWeaponFired
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   Fireinterval_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RoundRate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ChargeLevel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerRangedWeaponFired(class UAkAudioEvent* AkEvent, float Fireinterval_0, float RoundRate, int32 ChargeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerRangedWeaponFired");

	Params::BP_AKComponent_C_BP_OnPlayerRangedWeaponFired Parms{};

	Parms.AkEvent = AkEvent;
	Parms.Fireinterval_0 = Fireinterval_0;
	Parms.RoundRate = RoundRate;
	Parms.ChargeLevel = ChargeLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerRangedWeaponStopFire
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnPlayerRangedWeaponStopFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerRangedWeaponStopFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerReceiveAnimNotify
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsFollowComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerReceiveAnimNotify(class UAkAudioEvent* AkEvent, bool bIsFollowComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerReceiveAnimNotify");

	Params::BP_AKComponent_C_BP_OnPlayerReceiveAnimNotify Parms{};

	Parms.AkEvent = AkEvent;
	Parms.bIsFollowComponent = bIsFollowComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerReceiveFootStepAnimNotify
// (Event, Protected, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PlayerFootStepAction                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerReceiveFootStepAnimNotify(EPhysicalSurface SurfaceType, uint8 PlayerFootStepAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerReceiveFootStepAnimNotify");

	Params::BP_AKComponent_C_BP_OnPlayerReceiveFootStepAnimNotify Parms{};

	Parms.SurfaceType = SurfaceType;
	Parms.PlayerFootStepAction = PlayerFootStepAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerRegisteredCamp
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnPlayerRegisteredCamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerRegisteredCamp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerReviveByRescue
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AM1Player*                        HelperPlayer                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerReviveByRescue(const class AM1Player* HelperPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerReviveByRescue");

	Params::BP_AKComponent_C_BP_OnPlayerReviveByRescue Parms{};

	Parms.HelperPlayer = HelperPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerReviveByRespawn
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnPlayerReviveByRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerReviveByRespawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerSelectHero
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FString                           SelectedHeroStringID                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerSelectHero(const class FString& SelectedHeroStringID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerSelectHero");

	Params::BP_AKComponent_C_BP_OnPlayerSelectHero Parms{};

	Parms.SelectedHeroStringID = std::move(SelectedHeroStringID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerStartDebone
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnPlayerStartDebone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerStartDebone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerSuccessRescue
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AM1Player*                        RescueTarget                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerSuccessRescue(const class AM1Player* RescueTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerSuccessRescue");

	Params::BP_AKComponent_C_BP_OnPlayerSuccessRescue Parms{};

	Parms.RescueTarget = RescueTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerUpdateCameraTransform
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnPlayerUpdateCameraTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerUpdateCameraTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnPlayerWireHooked
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FVector                          HookedLocation                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnPlayerWireHooked(const struct FVector& HookedLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnPlayerWireHooked");

	Params::BP_AKComponent_C_BP_OnPlayerWireHooked Parms{};

	Parms.HookedLocation = std::move(HookedLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnRemainingTimeAlertStarted
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnRemainingTimeAlertStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnRemainingTimeAlertStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnRoundStarted
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnRoundStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnRoundStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnTimingHit
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnTimingHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnTimingHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnTimingMiss
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnTimingMiss()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnTimingMiss");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnTrapEnd
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnTrapEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnTrapEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnTrapHit
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnTrapHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnTrapHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnTrapLoop
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnTrapLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnTrapLoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnTrapStart
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnTrapStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnTrapStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnUIHideLoadingScreen
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnUIHideLoadingScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnUIHideLoadingScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnUIInGameContentClosed
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnUIInGameContentClosed(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnUIInGameContentClosed");

	Params::BP_AKComponent_C_BP_OnUIInGameContentClosed Parms{};

	Parms.AkEvent = AkEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnUIInGameContentOpened
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnUIInGameContentOpened(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnUIInGameContentOpened");

	Params::BP_AKComponent_C_BP_OnUIInGameContentOpened Parms{};

	Parms.AkEvent = AkEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnUIPlayAkEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EUIEventType                            UIType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnUIPlayAkEvent(class UAkAudioEvent* AkEvent, EUIEventType UIType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnUIPlayAkEvent");

	Params::BP_AKComponent_C_BP_OnUIPlayAkEvent Parms{};

	Parms.AkEvent = AkEvent;
	Parms.UIType = UIType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnUIPlayAkEventByName
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FString                           InEventName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EUIEventType                            UIType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnUIPlayAkEventByName(const class FString& InEventName, EUIEventType UIType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnUIPlayAkEventByName");

	Params::BP_AKComponent_C_BP_OnUIPlayAkEventByName Parms{};

	Parms.InEventName = std::move(InEventName);
	Parms.UIType = UIType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnUIPlayDefaultHitMarkerSound
// (Event, Protected, BlueprintEvent)
// Parameters:
// EUIEventType                            UIType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnUIPlayDefaultHitMarkerSound(EUIEventType UIType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnUIPlayDefaultHitMarkerSound");

	Params::BP_AKComponent_C_BP_OnUIPlayDefaultHitMarkerSound Parms{};

	Parms.UIType = UIType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnUIPlayWeaknessKillHitMarkerSound
// (Event, Protected, BlueprintEvent)
// Parameters:
// EUIEventType                            UIType                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnUIPlayWeaknessKillHitMarkerSound(EUIEventType UIType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnUIPlayWeaknessKillHitMarkerSound");

	Params::BP_AKComponent_C_BP_OnUIPlayWeaknessKillHitMarkerSound Parms{};

	Parms.UIType = UIType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnUIShowLoadingScreen
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnUIShowLoadingScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnUIShowLoadingScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnWireHooked
// (Event, Protected, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        HitSurfaceType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHookSuccess                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::BP_OnWireHooked(EPhysicalSurface HitSurfaceType, bool bHookSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnWireHooked");

	Params::BP_AKComponent_C_BP_OnWireHooked Parms{};

	Parms.HitSurfaceType = HitSurfaceType;
	Parms.bHookSuccess = bHookSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_OnWireMiss
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_OnWireMiss()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_OnWireMiss");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_PauseAll
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_PauseAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_PauseAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_ResumeAll
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_ResumeAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_ResumeAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.BP_StopAllAkEventOfOwner
// (Event, Protected, BlueprintEvent)

void UBP_AKComponent_C::BP_StopAllAkEventOfOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "BP_StopAllAkEventOfOwner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AKComponent.BP_AKComponent_C.ExecuteUbergraph_BP_AKComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::ExecuteUbergraph_BP_AKComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "ExecuteUbergraph_BP_AKComponent");

	Params::BP_AKComponent_C_ExecuteUbergraph_BP_AKComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.GetDamagedArg
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EM1DynamicDialogueStimulus              Stimulus                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Event                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Array                                                  (ConstParm, Parm, OutParm)

void UBP_AKComponent_C::GetDamagedArg(EM1DynamicDialogueStimulus Stimulus, class FString* Event, const TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetDamagedArg");

	Params::BP_AKComponent_C_GetDamagedArg Parms{};

	Parms.Stimulus = Stimulus;

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = std::move(Parms.Event);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_AKComponent.BP_AKComponent_C.GetDamagedLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBP_AKComponent_C::GetDamagedLocation(double Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetDamagedLocation");

	Params::BP_AKComponent_C_GetDamagedLocation Parms{};

	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AKComponent.BP_AKComponent_C.GetDeboneArg
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Event                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Array                                                  (ConstParm, Parm, OutParm)

void UBP_AKComponent_C::GetDeboneArg(class FString* Event, const TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetDeboneArg");

	Params::BP_AKComponent_C_GetDeboneArg Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = std::move(Parms.Event);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_AKComponent.BP_AKComponent_C.GetDeboneSuccessArg
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Event                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Array                                                  (ConstParm, Parm, OutParm)

void UBP_AKComponent_C::GetDeboneSuccessArg(class FString* Event, const TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetDeboneSuccessArg");

	Params::BP_AKComponent_C_GetDeboneSuccessArg Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = std::move(Parms.Event);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_AKComponent.BP_AKComponent_C.GetEmptyRoundsArg
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EM1DynamicDialogueStimulus              Stimulus                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Event                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Array                                                  (ConstParm, Parm, OutParm)

void UBP_AKComponent_C::GetEmptyRoundsArg(EM1DynamicDialogueStimulus Stimulus, class FString* Event, const TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetEmptyRoundsArg");

	Params::BP_AKComponent_C_GetEmptyRoundsArg Parms{};

	Parms.Stimulus = Stimulus;

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = std::move(Parms.Event);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_AKComponent.BP_AKComponent_C.GetEpicbossKillArg
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           SourceString                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Event                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Array                                                  (ConstParm, Parm, OutParm)

void UBP_AKComponent_C::GetEpicbossKillArg(const class FString& SourceString, class FString* Event, const TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetEpicbossKillArg");

	Params::BP_AKComponent_C_GetEpicbossKillArg Parms{};

	Parms.SourceString = std::move(SourceString);

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = std::move(Parms.Event);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_AKComponent.BP_AKComponent_C.GetJoinMissionArg
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Event                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Array                                                  (ConstParm, Parm, OutParm)

void UBP_AKComponent_C::GetJoinMissionArg(class FString* Event, const TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetJoinMissionArg");

	Params::BP_AKComponent_C_GetJoinMissionArg Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = std::move(Parms.Event);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_AKComponent.BP_AKComponent_C.GetOrCreateAkComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  AttachToComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bComponentCreated                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAkComponent*                     OutAkComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::GetOrCreateAkComponent(class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Offset, bool* bComponentCreated, class UAkComponent** OutAkComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetOrCreateAkComponent");

	Params::BP_AKComponent_C_GetOrCreateAkComponent Parms{};

	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;
	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);

	if (bComponentCreated != nullptr)
		*bComponentCreated = Parms.bComponentCreated;

	if (OutAkComponent != nullptr)
		*OutAkComponent = Parms.OutAkComponent;
}


// Function BP_AKComponent.BP_AKComponent_C.GetRegCampArg
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Event                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Array                                                  (ConstParm, Parm, OutParm)

void UBP_AKComponent_C::GetRegCampArg(class FString* Event, const TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetRegCampArg");

	Params::BP_AKComponent_C_GetRegCampArg Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = std::move(Parms.Event);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_AKComponent.BP_AKComponent_C.GetRescueArg
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Event                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Array                                                  (ConstParm, Parm, OutParm)

void UBP_AKComponent_C::GetRescueArg(const class AActor* Object, class FString* Event, const TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetRescueArg");

	Params::BP_AKComponent_C_GetRescueArg Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = std::move(Parms.Event);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_AKComponent.BP_AKComponent_C.GetReviveByRescue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AM1Player*                        Helper                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Event                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Array                                                  (ConstParm, Parm, OutParm)

void UBP_AKComponent_C::GetReviveByRescue(class AM1Player* Helper, class FString* Event, const TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetReviveByRescue");

	Params::BP_AKComponent_C_GetReviveByRescue Parms{};

	Parms.Helper = Helper;

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = std::move(Parms.Event);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_AKComponent.BP_AKComponent_C.GetReviveByRevive
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AM1Player*                        Helper                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           Event                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Array                                                  (ConstParm, Parm, OutParm)

void UBP_AKComponent_C::GetReviveByRevive(class AM1Player* Helper, class FString* Event, const TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "GetReviveByRevive");

	Params::BP_AKComponent_C_GetReviveByRevive Parms{};

	Parms.Helper = Helper;

	UObject::ProcessEvent(Func, &Parms);

	if (Event != nullptr)
		*Event = std::move(Parms.Event);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_AKComponent.BP_AKComponent_C.NpcAkEventCallback
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAkCallbackType                         CallbackType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAkCallbackInfo*                  CallbackInfo                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::NpcAkEventCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "NpcAkEventCallback");

	Params::BP_AKComponent_C_NpcAkEventCallback Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.TryPlayUI AkEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAkAudioEvent*                    AkEvent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_AKComponent_C::TryPlayUI_AkEvent(class UAkAudioEvent* AkEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "TryPlayUI AkEvent");

	Params::BP_AKComponent_C_TryPlayUI_AkEvent Parms{};

	Parms.AkEvent = AkEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AKComponent.BP_AKComponent_C.TryPlayUI AkEventByName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           AkEventName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AKComponent_C::TryPlayUI_AkEventByName(const class FString& AkEventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AKComponent_C", "TryPlayUI AkEventByName");

	Params::BP_AKComponent_C_TryPlayUI_AkEventByName Parms{};

	Parms.AkEventName = std::move(AkEventName);

	UObject::ProcessEvent(Func, &Parms);
}

}

