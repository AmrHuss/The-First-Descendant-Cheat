#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AK_Env_SplineActor

#include "Basic.hpp"

#include "BP_AudioActorBase_classes.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C
// 0x0080 (0x02D0 - 0x0250)
class ABP_AK_Env_SplineActor_C final : public ABP_AudioActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           SplineAK;                                          // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hidden_In_Game;                                    // 0x0269(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnorePlayerElevation;                             // 0x026A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26B[0x5];                                      // 0x026B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Ak_Event_Emitter;                                  // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Occ_Refresh_Interval;                              // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxRangeFadeDistance;                              // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Inside_Spline;                                  // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dot_Value;                                         // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Ak_Emitter_Location;                               // 0x0298(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Timer_Lazy;                                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Lazy;                                           // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Initialized;                                    // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Spline_Curve_Location_Closest_To_Player;           // 0x02B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZoneHeight;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Attenuation;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AK_Env_SplineActor(int32 EntryPoint);
	void GetControlledPawnLocation(class APawn** ControlledPawnReference, struct FVector* ControlledPawnLocation);
	void GetDistanceToPlayerFromClosestSplinePoint(double* DistanceToPlayerFromClosestSplinePoint);
	void GetIsInsideSpline(bool* IsInsideSpline_, bool* IsInsideSplineChanged_, bool* IsDownside_);
	void GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Update_Emitter_Slowly();
	void UpdateEmitterLocationProxy();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AK_Env_SplineActor_C">();
	}
	static class ABP_AK_Env_SplineActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AK_Env_SplineActor_C>();
	}
};
static_assert(alignof(ABP_AK_Env_SplineActor_C) == 0x000008, "Wrong alignment on ABP_AK_Env_SplineActor_C");
static_assert(sizeof(ABP_AK_Env_SplineActor_C) == 0x0002D0, "Wrong size on ABP_AK_Env_SplineActor_C");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, UberGraphFrame) == 0x000250, "Member 'ABP_AK_Env_SplineActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, SplineAK) == 0x000258, "Member 'ABP_AK_Env_SplineActor_C::SplineAK' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Spline) == 0x000260, "Member 'ABP_AK_Env_SplineActor_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Debug) == 0x000268, "Member 'ABP_AK_Env_SplineActor_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Hidden_In_Game) == 0x000269, "Member 'ABP_AK_Env_SplineActor_C::Hidden_In_Game' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, IgnorePlayerElevation) == 0x00026A, "Member 'ABP_AK_Env_SplineActor_C::IgnorePlayerElevation' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Ak_Event_Emitter) == 0x000270, "Member 'ABP_AK_Env_SplineActor_C::Ak_Event_Emitter' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Occ_Refresh_Interval) == 0x000278, "Member 'ABP_AK_Env_SplineActor_C::Occ_Refresh_Interval' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, MaxRangeFadeDistance) == 0x000280, "Member 'ABP_AK_Env_SplineActor_C::MaxRangeFadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Is_Inside_Spline) == 0x000288, "Member 'ABP_AK_Env_SplineActor_C::Is_Inside_Spline' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Dot_Value) == 0x000290, "Member 'ABP_AK_Env_SplineActor_C::Dot_Value' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Ak_Emitter_Location) == 0x000298, "Member 'ABP_AK_Env_SplineActor_C::Ak_Emitter_Location' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Timer_Lazy) == 0x0002A8, "Member 'ABP_AK_Env_SplineActor_C::Timer_Lazy' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Is_Lazy) == 0x0002B0, "Member 'ABP_AK_Env_SplineActor_C::Is_Lazy' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Is_Initialized) == 0x0002B1, "Member 'ABP_AK_Env_SplineActor_C::Is_Initialized' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Spline_Curve_Location_Closest_To_Player) == 0x0002B4, "Member 'ABP_AK_Env_SplineActor_C::Spline_Curve_Location_Closest_To_Player' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, ZoneHeight) == 0x0002C0, "Member 'ABP_AK_Env_SplineActor_C::ZoneHeight' has a wrong offset!");
static_assert(offsetof(ABP_AK_Env_SplineActor_C, Attenuation) == 0x0002C8, "Member 'ABP_AK_Env_SplineActor_C::Attenuation' has a wrong offset!");

}

