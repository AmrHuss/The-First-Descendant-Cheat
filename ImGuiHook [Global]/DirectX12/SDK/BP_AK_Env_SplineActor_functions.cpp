#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AK_Env_SplineActor

#include "Basic.hpp"

#include "BP_AK_Env_SplineActor_classes.hpp"
#include "BP_AK_Env_SplineActor_parameters.hpp"


namespace SDK
{

// Function BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C.ExecuteUbergraph_BP_AK_Env_SplineActor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AK_Env_SplineActor_C::ExecuteUbergraph_BP_AK_Env_SplineActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AK_Env_SplineActor_C", "ExecuteUbergraph_BP_AK_Env_SplineActor");

	Params::BP_AK_Env_SplineActor_C_ExecuteUbergraph_BP_AK_Env_SplineActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C.GetControlledPawnLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            ControlledPawnReference                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ControlledPawnLocation                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AK_Env_SplineActor_C::GetControlledPawnLocation(class APawn** ControlledPawnReference, struct FVector* ControlledPawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AK_Env_SplineActor_C", "GetControlledPawnLocation");

	Params::BP_AK_Env_SplineActor_C_GetControlledPawnLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ControlledPawnReference != nullptr)
		*ControlledPawnReference = Parms.ControlledPawnReference;

	if (ControlledPawnLocation != nullptr)
		*ControlledPawnLocation = std::move(Parms.ControlledPawnLocation);
}


// Function BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C.GetDistanceToPlayerFromClosestSplinePoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  DistanceToPlayerFromClosestSplinePoint                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AK_Env_SplineActor_C::GetDistanceToPlayerFromClosestSplinePoint(double* DistanceToPlayerFromClosestSplinePoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AK_Env_SplineActor_C", "GetDistanceToPlayerFromClosestSplinePoint");

	Params::BP_AK_Env_SplineActor_C_GetDistanceToPlayerFromClosestSplinePoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DistanceToPlayerFromClosestSplinePoint != nullptr)
		*DistanceToPlayerFromClosestSplinePoint = Parms.DistanceToPlayerFromClosestSplinePoint;
}


// Function BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C.GetIsInsideSpline
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsInsideSpline_                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInsideSplineChanged_                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDownside_                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AK_Env_SplineActor_C::GetIsInsideSpline(bool* IsInsideSpline_, bool* IsInsideSplineChanged_, bool* IsDownside_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AK_Env_SplineActor_C", "GetIsInsideSpline");

	Params::BP_AK_Env_SplineActor_C_GetIsInsideSpline Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInsideSpline_ != nullptr)
		*IsInsideSpline_ = Parms.IsInsideSpline_;

	if (IsInsideSplineChanged_ != nullptr)
		*IsInsideSplineChanged_ = Parms.IsInsideSplineChanged_;

	if (IsDownside_ != nullptr)
		*IsDownside_ = Parms.IsDownside_;
}


// Function BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C.GetPlayerControllerCameraRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         PlayerControllerCameraRotation                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AK_Env_SplineActor_C::GetPlayerControllerCameraRotation(struct FRotator* PlayerControllerCameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AK_Env_SplineActor_C", "GetPlayerControllerCameraRotation");

	Params::BP_AK_Env_SplineActor_C_GetPlayerControllerCameraRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerControllerCameraRotation != nullptr)
		*PlayerControllerCameraRotation = std::move(Parms.PlayerControllerCameraRotation);
}


// Function BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AK_Env_SplineActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AK_Env_SplineActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AK_Env_SplineActor_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AK_Env_SplineActor_C", "ReceiveTick");

	Params::BP_AK_Env_SplineActor_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C.Update Emitter Slowly
// (BlueprintCallable, BlueprintEvent)

void ABP_AK_Env_SplineActor_C::Update_Emitter_Slowly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AK_Env_SplineActor_C", "Update Emitter Slowly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C.UpdateEmitterLocationProxy
// (BlueprintCallable, BlueprintEvent)

void ABP_AK_Env_SplineActor_C::UpdateEmitterLocationProxy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AK_Env_SplineActor_C", "UpdateEmitterLocationProxy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AK_Env_SplineActor.BP_AK_Env_SplineActor_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AK_Env_SplineActor_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AK_Env_SplineActor_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

