#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalEnvManager

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "Amb_Space_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlobalEnvManager.BP_GlobalEnvManager_C
// 0x01B8 (0x0400 - 0x0248)
class ABP_GlobalEnvManager_C final : public AM1AudioActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkLateReverbComponent*                 AkLateReverb;                                      // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           BGM;                                               // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkRoomComponent*                       AkRoom;                                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           Ak_Amb_Outdoor;                                    // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Zone;                                              // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EAmb_Space                                    AmbSpace;                                          // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AmbIntensity;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioBank*                           Akbank;                                            // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Initialized;                                       // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AudioZoneBox_C*>             EnvAudioVolumes;                                   // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TMap<class UAkAudioEvent*, double>            Omni_EnvEvent_OneShot;                             // 0x02A8(0x0050)(Edit, BlueprintVisible)
	TMap<class UAkAudioEvent*, double>            Directinal_EnvEvent;                               // 0x02F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           TwoDEnvEventTimer;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        EnvEventDelayTime;                                 // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAkAudioEvent*>                  AkPlaylist;                                        // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        InitSlapBackVolume;                                // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Slapback_FxStyle;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAuxBus*                              Aux_Bus;                                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           IndoorRoomtone;                                    // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           ExistingAkObject;                                  // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           PastAkObject;                                      // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CuPriority;                                        // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AudioZoneBox_C*                     ActivedZone;                                       // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         AmbInensityTransRate;                              // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AudioZoneBox_C*                     TemporaryZone;                                     // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SoundDebugMode_;                                   // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RLevel;                                            // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RStereoWidth;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RDecay;                                            // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RAbsorption;                                       // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RPreDelay;                                         // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Ak_BGM_Event;                                      // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 SetBGM_Mode;                                       // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)

public:
	void TwoDOneShot_Event();
	void BP_EnvZoneActiveByPlayer();
	void BP_EnvZoneDiscard();
	void Bp_EnvZoneEnter(class ABP_AudioZoneBox_C* OverlapedZone);
	void BP_EnvZoneInitActive();
	void BP_EnvZoneLeave(class ABP_AudioZoneBox_C* LeaveZone);
	void BPStartOmniEnvEvent();
	void CollectBPZone(const class ABP_AudioZoneBox_C*& NewVol);
	void Debug_String();
	void ExecuteUbergraph_BP_GlobalEnvManager(int32 EntryPoint);
	void FindInsideZone(bool* SuccessFindZone_);
	void GlobalEnvEventSpot();
	void Init();
	void ReceiveBeginPlay();
	void SetEnvInitParameter();
	void SetEnvOverride(class ABP_AudioZoneBox_C* RefreshOverlapedZone, bool Entering_);
	void SetReverbParam();
	void UserConstructionScript();
	void ZoneLeaveOldZoneOverride(class ABP_AudioZoneBox_C* OverlapedZone);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlobalEnvManager_C">();
	}
	static class ABP_GlobalEnvManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GlobalEnvManager_C>();
	}
};
static_assert(alignof(ABP_GlobalEnvManager_C) == 0x000008, "Wrong alignment on ABP_GlobalEnvManager_C");
static_assert(sizeof(ABP_GlobalEnvManager_C) == 0x000400, "Wrong size on ABP_GlobalEnvManager_C");
static_assert(offsetof(ABP_GlobalEnvManager_C, UberGraphFrame) == 0x000248, "Member 'ABP_GlobalEnvManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, AkLateReverb) == 0x000250, "Member 'ABP_GlobalEnvManager_C::AkLateReverb' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, BGM) == 0x000258, "Member 'ABP_GlobalEnvManager_C::BGM' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, AkRoom) == 0x000260, "Member 'ABP_GlobalEnvManager_C::AkRoom' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, Ak_Amb_Outdoor) == 0x000268, "Member 'ABP_GlobalEnvManager_C::Ak_Amb_Outdoor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, Zone) == 0x000270, "Member 'ABP_GlobalEnvManager_C::Zone' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, AmbSpace) == 0x000278, "Member 'ABP_GlobalEnvManager_C::AmbSpace' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, AmbIntensity) == 0x000280, "Member 'ABP_GlobalEnvManager_C::AmbIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, Akbank) == 0x000288, "Member 'ABP_GlobalEnvManager_C::Akbank' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, Initialized) == 0x000290, "Member 'ABP_GlobalEnvManager_C::Initialized' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, EnvAudioVolumes) == 0x000298, "Member 'ABP_GlobalEnvManager_C::EnvAudioVolumes' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, Omni_EnvEvent_OneShot) == 0x0002A8, "Member 'ABP_GlobalEnvManager_C::Omni_EnvEvent_OneShot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, Directinal_EnvEvent) == 0x0002F8, "Member 'ABP_GlobalEnvManager_C::Directinal_EnvEvent' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, TwoDEnvEventTimer) == 0x000348, "Member 'ABP_GlobalEnvManager_C::TwoDEnvEventTimer' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, EnvEventDelayTime) == 0x000350, "Member 'ABP_GlobalEnvManager_C::EnvEventDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, AkPlaylist) == 0x000358, "Member 'ABP_GlobalEnvManager_C::AkPlaylist' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, InitSlapBackVolume) == 0x000368, "Member 'ABP_GlobalEnvManager_C::InitSlapBackVolume' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, Slapback_FxStyle) == 0x000370, "Member 'ABP_GlobalEnvManager_C::Slapback_FxStyle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, Aux_Bus) == 0x000378, "Member 'ABP_GlobalEnvManager_C::Aux_Bus' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, IndoorRoomtone) == 0x000380, "Member 'ABP_GlobalEnvManager_C::IndoorRoomtone' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, ExistingAkObject) == 0x000388, "Member 'ABP_GlobalEnvManager_C::ExistingAkObject' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, PastAkObject) == 0x000390, "Member 'ABP_GlobalEnvManager_C::PastAkObject' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, CuPriority) == 0x000398, "Member 'ABP_GlobalEnvManager_C::CuPriority' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, ActivedZone) == 0x0003A0, "Member 'ABP_GlobalEnvManager_C::ActivedZone' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, AmbInensityTransRate) == 0x0003A8, "Member 'ABP_GlobalEnvManager_C::AmbInensityTransRate' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, TemporaryZone) == 0x0003B0, "Member 'ABP_GlobalEnvManager_C::TemporaryZone' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, SoundDebugMode_) == 0x0003B8, "Member 'ABP_GlobalEnvManager_C::SoundDebugMode_' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, RLevel) == 0x0003C0, "Member 'ABP_GlobalEnvManager_C::RLevel' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, RStereoWidth) == 0x0003C8, "Member 'ABP_GlobalEnvManager_C::RStereoWidth' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, RDecay) == 0x0003D0, "Member 'ABP_GlobalEnvManager_C::RDecay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, RAbsorption) == 0x0003D8, "Member 'ABP_GlobalEnvManager_C::RAbsorption' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, RPreDelay) == 0x0003E0, "Member 'ABP_GlobalEnvManager_C::RPreDelay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, Ak_BGM_Event) == 0x0003E8, "Member 'ABP_GlobalEnvManager_C::Ak_BGM_Event' has a wrong offset!");
static_assert(offsetof(ABP_GlobalEnvManager_C, SetBGM_Mode) == 0x0003F0, "Member 'ABP_GlobalEnvManager_C::SetBGM_Mode' has a wrong offset!");

}

