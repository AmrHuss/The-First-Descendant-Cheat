#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Sec_PC_003_A0101

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "M1AnimPhys_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass BP_Sec_PC_003_A0101.BP_Sec_PC_003_A0101_C
// 0x3E20 (0x4140 - 0x0320)
class UBP_Sec_PC_003_A0101_C final : public UAnimInstance
{
public:
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0328(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0330(0x0008)()
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_15;                       // 0x0340(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_14;                       // 0x0710(0x03D0)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x0AE0(0x00C8)()
	uint8                                         Pad_BA8[0x8];                                      // 0x0BA8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_13;                       // 0x0BB0(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_12;                       // 0x0F80(0x03D0)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1350(0x0020)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_11;                       // 0x1370(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_10;                       // 0x1740(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_9;                        // 0x1B10(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_8;                        // 0x1EE0(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_7;                        // 0x22B0(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_6;                        // 0x2680(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_5;                        // 0x2A50(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_4;                        // 0x2E20(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_3;                        // 0x31F0(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_2;                        // 0x35C0(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_1;                        // 0x3990(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys;                          // 0x3D60(0x03D0)()
	double                                        KawaiiAlpha;                                       // 0x4130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* AnimGraph_0);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void ExecuteUbergraph_BP_Sec_PC_003_A0101(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Sec_PC_003_A0101_C">();
	}
	static class UBP_Sec_PC_003_A0101_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Sec_PC_003_A0101_C>();
	}
};
static_assert(alignof(UBP_Sec_PC_003_A0101_C) == 0x000010, "Wrong alignment on UBP_Sec_PC_003_A0101_C");
static_assert(sizeof(UBP_Sec_PC_003_A0101_C) == 0x004140, "Wrong size on UBP_Sec_PC_003_A0101_C");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, UberGraphFrame) == 0x000320, "Member 'UBP_Sec_PC_003_A0101_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, AnimBlueprintExtension_PropertyAccess) == 0x000328, "Member 'UBP_Sec_PC_003_A0101_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, AnimBlueprintExtension_Base) == 0x000330, "Member 'UBP_Sec_PC_003_A0101_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_15) == 0x000340, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_15' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_14) == 0x000710, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_14' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, AnimGraphNode_LinkedInputPose) == 0x000AE0, "Member 'UBP_Sec_PC_003_A0101_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_13) == 0x000BB0, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_13' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_12) == 0x000F80, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_12' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, AnimGraphNode_Root) == 0x001350, "Member 'UBP_Sec_PC_003_A0101_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_11) == 0x001370, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_11' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_10) == 0x001740, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_10' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_9) == 0x001B10, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_9' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_8) == 0x001EE0, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_8' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_7) == 0x0022B0, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_7' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_6) == 0x002680, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_6' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_5) == 0x002A50, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_5' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_4) == 0x002E20, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_4' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_3) == 0x0031F0, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_3' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_2) == 0x0035C0, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_2' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys_1) == 0x003990, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys_1' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, M1AnimGraphNode_AnimPhys) == 0x003D60, "Member 'UBP_Sec_PC_003_A0101_C::M1AnimGraphNode_AnimPhys' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_003_A0101_C, KawaiiAlpha) == 0x004130, "Member 'UBP_Sec_PC_003_A0101_C::KawaiiAlpha' has a wrong offset!");

}

