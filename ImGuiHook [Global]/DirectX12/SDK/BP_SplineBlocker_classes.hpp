#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineBlocker

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineBlocker.BP_SplineBlocker_C
// 0x0058 (0x02B8 - 0x0260)
class ABP_SplineBlocker_C final : public AM1SplineBlocker
{
public:
	class USplineComponent*                       Spline;                                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          HasSlope;                                          // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Collision;                                         // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               MeshAlignmentAxis;                                 // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipMesh;                                          // 0x0282(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_283[0x5];                                      // 0x0283(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MeshLengthOverride;                                // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MeshRoll;                                          // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            MeshSlope;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BlockerScale;                                      // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SlopeScale;                                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddMesh;                                           // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

	const float GetBlockerSize() const;
	const float GetExtrudeSize() const;
	void GetMeshLength(double* MeshLength) const;
	const float GetSplitSize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineBlocker_C">();
	}
	static class ABP_SplineBlocker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineBlocker_C>();
	}
};
static_assert(alignof(ABP_SplineBlocker_C) == 0x000008, "Wrong alignment on ABP_SplineBlocker_C");
static_assert(sizeof(ABP_SplineBlocker_C) == 0x0002B8, "Wrong size on ABP_SplineBlocker_C");
static_assert(offsetof(ABP_SplineBlocker_C, Spline) == 0x000260, "Member 'ABP_SplineBlocker_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, DefaultSceneRoot) == 0x000268, "Member 'ABP_SplineBlocker_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, HasSlope) == 0x000270, "Member 'ABP_SplineBlocker_C::HasSlope' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, Mesh) == 0x000278, "Member 'ABP_SplineBlocker_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, Collision) == 0x000280, "Member 'ABP_SplineBlocker_C::Collision' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, MeshAlignmentAxis) == 0x000281, "Member 'ABP_SplineBlocker_C::MeshAlignmentAxis' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, FlipMesh) == 0x000282, "Member 'ABP_SplineBlocker_C::FlipMesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, MeshLengthOverride) == 0x000288, "Member 'ABP_SplineBlocker_C::MeshLengthOverride' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, MeshRoll) == 0x000290, "Member 'ABP_SplineBlocker_C::MeshRoll' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, MeshSlope) == 0x000298, "Member 'ABP_SplineBlocker_C::MeshSlope' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, BlockerScale) == 0x0002A0, "Member 'ABP_SplineBlocker_C::BlockerScale' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, SlopeScale) == 0x0002A8, "Member 'ABP_SplineBlocker_C::SlopeScale' has a wrong offset!");
static_assert(offsetof(ABP_SplineBlocker_C, AddMesh) == 0x0002B0, "Member 'ABP_SplineBlocker_C::AddMesh' has a wrong offset!");

}

