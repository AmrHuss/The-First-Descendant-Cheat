#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CL_SurroundTextures

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "WB_CrosshairLayerBase_Rectangles_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass CL_SurroundTextures.CL_SurroundTextures_C
// 0x0088 (0x08F0 - 0x0868)
class UCL_SurroundTextures_C final : public UWB_CrosshairLayerBase_Rectangles_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_CL_SurroundTextures_C;              // 0x0868(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTexture2D*                             Texture;                                           // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOriginalTextureSize;                            // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_879[0x3];                                      // 0x0879(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Size;                                              // 0x087C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NTextures;                                         // 0x0884(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CenterGap;                                         // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StepAngleForceEqualDivision;                       // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_891[0x7];                                      // 0x0891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StepAngle;                                         // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableRecoilResponse;                              // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A1[0x7];                                      // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RecoilToCenterGapPercentage;                       // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RecoilToSizePercentage;                            // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ElementAlignment;                                  // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ElementScale;                                      // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ElementRotationPivot;                              // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ElementAngle;                                      // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LayerAngle;                                        // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AutoRotationRPM__Element_;                         // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AutoRotationRPM__Layer_;                           // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CL_SurroundTextures(int32 EntryPoint);
	void InitializeEditableVariables();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CL_SurroundTextures_C">();
	}
	static class UCL_SurroundTextures_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCL_SurroundTextures_C>();
	}
};
static_assert(alignof(UCL_SurroundTextures_C) == 0x000008, "Wrong alignment on UCL_SurroundTextures_C");
static_assert(sizeof(UCL_SurroundTextures_C) == 0x0008F0, "Wrong size on UCL_SurroundTextures_C");
static_assert(offsetof(UCL_SurroundTextures_C, UberGraphFrame_CL_SurroundTextures_C) == 0x000868, "Member 'UCL_SurroundTextures_C::UberGraphFrame_CL_SurroundTextures_C' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, Texture) == 0x000870, "Member 'UCL_SurroundTextures_C::Texture' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, UseOriginalTextureSize) == 0x000878, "Member 'UCL_SurroundTextures_C::UseOriginalTextureSize' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, Size) == 0x00087C, "Member 'UCL_SurroundTextures_C::Size' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, NTextures) == 0x000884, "Member 'UCL_SurroundTextures_C::NTextures' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, CenterGap) == 0x000888, "Member 'UCL_SurroundTextures_C::CenterGap' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, StepAngleForceEqualDivision) == 0x000890, "Member 'UCL_SurroundTextures_C::StepAngleForceEqualDivision' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, StepAngle) == 0x000898, "Member 'UCL_SurroundTextures_C::StepAngle' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, EnableRecoilResponse) == 0x0008A0, "Member 'UCL_SurroundTextures_C::EnableRecoilResponse' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, RecoilToCenterGapPercentage) == 0x0008A8, "Member 'UCL_SurroundTextures_C::RecoilToCenterGapPercentage' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, RecoilToSizePercentage) == 0x0008B0, "Member 'UCL_SurroundTextures_C::RecoilToSizePercentage' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, ElementAlignment) == 0x0008B8, "Member 'UCL_SurroundTextures_C::ElementAlignment' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, ElementScale) == 0x0008C0, "Member 'UCL_SurroundTextures_C::ElementScale' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, ElementRotationPivot) == 0x0008C8, "Member 'UCL_SurroundTextures_C::ElementRotationPivot' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, ElementAngle) == 0x0008D0, "Member 'UCL_SurroundTextures_C::ElementAngle' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, LayerAngle) == 0x0008D8, "Member 'UCL_SurroundTextures_C::LayerAngle' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, AutoRotationRPM__Element_) == 0x0008E0, "Member 'UCL_SurroundTextures_C::AutoRotationRPM__Element_' has a wrong offset!");
static_assert(offsetof(UCL_SurroundTextures_C, AutoRotationRPM__Layer_) == 0x0008E8, "Member 'UCL_SurroundTextures_C::AutoRotationRPM__Layer_' has a wrong offset!");

}

