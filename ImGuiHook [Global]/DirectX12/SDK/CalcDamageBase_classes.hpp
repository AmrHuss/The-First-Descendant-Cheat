#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CalcDamageBase

#include "Basic.hpp"

#include "M1Data_structs.hpp"
#include "M1_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CalcDamageBase.CalcDamageBase_C
// 0x0028 (0x0130 - 0x0108)
class UCalcDamageBase_C : public UM1AbilityOpExecCalc_Damage
{
public:
	bool                                          bApplyDamageOnly;                                  // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Distance;                                          // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FM1ScaledInteger                       OneValue;                                          // 0x0118(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FM1ScaledInteger                       ZeroValue;                                         // 0x0120(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AddSpecificSkillPower;                             // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Apply_Skill_ATK(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, EM1ElementalDamageChannel ElementalChannel, EM1SkillArcheType ArcheType, const struct FM1ScaledInteger& AddPower, const struct FM1ScaledInteger& AddAttack) const;
	void ApplyATK(struct FM1AbilityOpCalcParam& Param, const struct FM1CalcDamageInfo& DamageInfo, class FName ATKType) const;
	void ApplyATKMultiplierByCharge(struct FM1AbilityOpCalcParam& Param, const struct FM1CalcDamageInfo& DanageInfo, float ATKMultiplierByCharge) const;
	void ApplyATKMultiplierByDistance(struct FM1AbilityOpCalcParam& Param, const struct FM1CalcDamageInfo& DamageInfo, const struct FM1ScaledInteger& ATKMultiplierByDistance) const;
	void ApplyATKMultiplierByExplosionRadius(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, double ExplosionRadius) const;
	void ApplyCritical(struct FM1AbilityOpCalcParam& Param, const struct FM1CalcDamageInfo& DamageInfo) const;
	void ApplyDamageCoefficient(struct FM1AbilityOpCalcParam& Param, const struct FM1CalcDamageInfo& DamageInfo) const;
	void ApplyDEFOnlyWeapon(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo) const;
	void ApplyDEFWithInflection(struct FM1AbilityOpCalcParam& Param, const struct FM1CalcDamageInfo& DamageInfo, const struct FM1ScaledInteger& AttackerLevelValue, const struct FM1ScaledInteger& DEFInflection_VarX1, const struct FM1ScaledInteger& DEFInflection_VarX2, const struct FM1ScaledInteger& DEFInflection_VarX3) const;
	void ApplyInvokeChanceElementalSE(struct FM1AbilityOpCalcParam& Param, const struct FM1CalcDamageInfo& DamageInfo) const;
	void ApplySkillCritical(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo) const;
	void Determine_Monster_SkillDEF(struct FM1AbilityOpCalcParam& Param, struct FM1ScaledInteger* SkillDEF) const;
	void Determine_Skill_Critical(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo) const;
	void DetermineATKMultiplierByDistance(const struct FM1AbilityOpCalcParam& Param, struct FM1ScaledInteger* RetATKMultiplierByDistance) const;
	void DetermineCritical(struct FM1AbilityOpCalcParam& Param, const struct FM1CalcDamageInfo& DanageInfo) const;
	void DetermineElemetalDEF(struct FM1AbilityOpCalcParam& Param, EM1ElementalDamageChannel ElementalChannel, struct FM1ScaledInteger* ElementalDEF) const;
	void DetermineGaugeStatMultiplier(struct FM1AbilityOpCalcParam& Param, EM1StatType WatchStat, EM1StatType MaxStat, class FName MinValue, class FName MaxValue, class FName AddPower, class FName AddAttack, struct FM1ScaledInteger* AddPowerValue, struct FM1ScaledInteger* AddAttackValue) const;
	void DetermineGaugeStatMultiplier_Bunny(struct FM1AbilityOpCalcParam& Param, EM1StatType WatchStat, EM1StatType MaxStat, class FName MinValue, class FName MaxValue, class FName AddPower, class FName AddAttack, struct FM1ScaledInteger* AddPowerValue, struct FM1ScaledInteger* AddAttackValue) const;
	void DoCalculation(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo) const;
	void Execute(const struct FM1AbilityOpCalcParam& Param, struct FM1AbilityOpExecCalcOutput& Output) const;
	void SetAdditionalDamageInfo(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CalcDamageBase_C">();
	}
	static class UCalcDamageBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCalcDamageBase_C>();
	}
};
static_assert(alignof(UCalcDamageBase_C) == 0x000008, "Wrong alignment on UCalcDamageBase_C");
static_assert(sizeof(UCalcDamageBase_C) == 0x000130, "Wrong size on UCalcDamageBase_C");
static_assert(offsetof(UCalcDamageBase_C, bApplyDamageOnly) == 0x000108, "Member 'UCalcDamageBase_C::bApplyDamageOnly' has a wrong offset!");
static_assert(offsetof(UCalcDamageBase_C, Distance) == 0x000110, "Member 'UCalcDamageBase_C::Distance' has a wrong offset!");
static_assert(offsetof(UCalcDamageBase_C, OneValue) == 0x000118, "Member 'UCalcDamageBase_C::OneValue' has a wrong offset!");
static_assert(offsetof(UCalcDamageBase_C, ZeroValue) == 0x000120, "Member 'UCalcDamageBase_C::ZeroValue' has a wrong offset!");
static_assert(offsetof(UCalcDamageBase_C, AddSpecificSkillPower) == 0x000128, "Member 'UCalcDamageBase_C::AddSpecificSkillPower' has a wrong offset!");

}

