#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CalcDamageFieldObject

#include "Basic.hpp"

#include "CalcDamageBase_classes.hpp"
#include "M1Data_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CalcDamageFieldObject.CalcDamageFieldObject_C
// 0x0030 (0x0160 - 0x0130)
class UCalcDamageFieldObject_C final : public UCalcDamageBase_C
{
public:
	double                                        PercentageValue;                                   // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PercentageValueNormal;                             // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PercentageValueChampion;                           // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PercentageValueMissionTarget;                      // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PercentageValueNamed;                              // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PercentageValueBoss;                               // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DoCalculation(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CalcDamageFieldObject_C">();
	}
	static class UCalcDamageFieldObject_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCalcDamageFieldObject_C>();
	}
};
static_assert(alignof(UCalcDamageFieldObject_C) == 0x000008, "Wrong alignment on UCalcDamageFieldObject_C");
static_assert(sizeof(UCalcDamageFieldObject_C) == 0x000160, "Wrong size on UCalcDamageFieldObject_C");
static_assert(offsetof(UCalcDamageFieldObject_C, PercentageValue) == 0x000130, "Member 'UCalcDamageFieldObject_C::PercentageValue' has a wrong offset!");
static_assert(offsetof(UCalcDamageFieldObject_C, PercentageValueNormal) == 0x000138, "Member 'UCalcDamageFieldObject_C::PercentageValueNormal' has a wrong offset!");
static_assert(offsetof(UCalcDamageFieldObject_C, PercentageValueChampion) == 0x000140, "Member 'UCalcDamageFieldObject_C::PercentageValueChampion' has a wrong offset!");
static_assert(offsetof(UCalcDamageFieldObject_C, PercentageValueMissionTarget) == 0x000148, "Member 'UCalcDamageFieldObject_C::PercentageValueMissionTarget' has a wrong offset!");
static_assert(offsetof(UCalcDamageFieldObject_C, PercentageValueNamed) == 0x000150, "Member 'UCalcDamageFieldObject_C::PercentageValueNamed' has a wrong offset!");
static_assert(offsetof(UCalcDamageFieldObject_C, PercentageValueBoss) == 0x000158, "Member 'UCalcDamageFieldObject_C::PercentageValueBoss' has a wrong offset!");

}

