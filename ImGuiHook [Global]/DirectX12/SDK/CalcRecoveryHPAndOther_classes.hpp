#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CalcRecoveryHPAndOther

#include "Basic.hpp"

#include "M1Data_structs.hpp"
#include "M1_structs.hpp"
#include "M1_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CalcRecoveryHPAndOther.CalcRecoveryHPAndOther_C
// 0x0010 (0x0110 - 0x0100)
class UCalcRecoveryHPAndOther_C final : public UM1AbilityOpExecCalc_HpRecovery
{
public:
	EM1StatType                                   TransRecoveryStatType;                             // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransRecoveryAmount;                               // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyCommonRecovery(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, double RecoveryAmount_0, EM1RecoveryType RecoveryType_0, EM1StatType RecoveryStat) const;
	void ApplyMaxStatBaseRecovery(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& Damage_info, EM1StatType BaseStatType, double RecoveryAmount_0, EM1StatType RecoveryStatType) const;
	void ApplyRecoveryCoefficient(bool UseRecoveryCoefficient, struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, EM1StatType GiveRecoveryCoefficientStatType, EM1StatType TakeRecoveryCoefficientStatType) const;
	void ApplySkillATK(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, EM1ElementalDamageChannel ElementalChannel, EM1SkillArcheType ArcheType, const struct FM1ScaledInteger& AddPower, const struct FM1ScaledInteger& AddAttack, bool IsHittingPC) const;
	void DetermineRecoveryCoefficient(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, EM1StatType StatType_0, bool* UseRecoveryCoefficient, EM1StatType* TakeRecoveryCoefficient, EM1StatType* GiveRecoveryCoefficient) const;
	void DoCalculation(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo) const;
	void Execute(const struct FM1AbilityOpCalcParam& Param, struct FM1AbilityOpExecCalcOutput& Output) const;
	void SetRecoveryOutModifier(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, struct FM1AbilityOpExecCalcOutput& Output) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CalcRecoveryHPAndOther_C">();
	}
	static class UCalcRecoveryHPAndOther_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCalcRecoveryHPAndOther_C>();
	}
};
static_assert(alignof(UCalcRecoveryHPAndOther_C) == 0x000008, "Wrong alignment on UCalcRecoveryHPAndOther_C");
static_assert(sizeof(UCalcRecoveryHPAndOther_C) == 0x000110, "Wrong size on UCalcRecoveryHPAndOther_C");
static_assert(offsetof(UCalcRecoveryHPAndOther_C, TransRecoveryStatType) == 0x000100, "Member 'UCalcRecoveryHPAndOther_C::TransRecoveryStatType' has a wrong offset!");
static_assert(offsetof(UCalcRecoveryHPAndOther_C, TransRecoveryAmount) == 0x000108, "Member 'UCalcRecoveryHPAndOther_C::TransRecoveryAmount' has a wrong offset!");

}

