#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CalcRecoveryHPAndOther

#include "Basic.hpp"

#include "CalcRecoveryHPAndOther_classes.hpp"
#include "CalcRecoveryHPAndOther_parameters.hpp"


namespace SDK
{

// Function CalcRecoveryHPAndOther.CalcRecoveryHPAndOther_C.ApplyCommonRecovery
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FM1AbilityOpCalcParam            Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FM1CalcDamageInfo                DamageInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// double                                  RecoveryAmount_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EM1RecoveryType                         RecoveryType_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EM1StatType                             RecoveryStat                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCalcRecoveryHPAndOther_C::ApplyCommonRecovery(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, double RecoveryAmount_0, EM1RecoveryType RecoveryType_0, EM1StatType RecoveryStat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalcRecoveryHPAndOther_C", "ApplyCommonRecovery");

	Params::CalcRecoveryHPAndOther_C_ApplyCommonRecovery Parms{};

	Parms.Param = std::move(Param);
	Parms.DamageInfo = std::move(DamageInfo);
	Parms.RecoveryAmount_0 = RecoveryAmount_0;
	Parms.RecoveryType_0 = RecoveryType_0;
	Parms.RecoveryStat = RecoveryStat;

	UObject::ProcessEvent(Func, &Parms);

	Param = std::move(Parms.Param);
	DamageInfo = std::move(Parms.DamageInfo);
}


// Function CalcRecoveryHPAndOther.CalcRecoveryHPAndOther_C.ApplyMaxStatBaseRecovery
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FM1AbilityOpCalcParam            Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FM1CalcDamageInfo                Damage_info                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// EM1StatType                             BaseStatType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RecoveryAmount_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EM1StatType                             RecoveryStatType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCalcRecoveryHPAndOther_C::ApplyMaxStatBaseRecovery(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& Damage_info, EM1StatType BaseStatType, double RecoveryAmount_0, EM1StatType RecoveryStatType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalcRecoveryHPAndOther_C", "ApplyMaxStatBaseRecovery");

	Params::CalcRecoveryHPAndOther_C_ApplyMaxStatBaseRecovery Parms{};

	Parms.Param = std::move(Param);
	Parms.Damage_info = std::move(Damage_info);
	Parms.BaseStatType = BaseStatType;
	Parms.RecoveryAmount_0 = RecoveryAmount_0;
	Parms.RecoveryStatType = RecoveryStatType;

	UObject::ProcessEvent(Func, &Parms);

	Param = std::move(Parms.Param);
	Damage_info = std::move(Parms.Damage_info);
}


// Function CalcRecoveryHPAndOther.CalcRecoveryHPAndOther_C.ApplyRecoveryCoefficient
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    UseRecoveryCoefficient                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FM1AbilityOpCalcParam            Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FM1CalcDamageInfo                DamageInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// EM1StatType                             GiveRecoveryCoefficientStatType                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EM1StatType                             TakeRecoveryCoefficientStatType                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCalcRecoveryHPAndOther_C::ApplyRecoveryCoefficient(bool UseRecoveryCoefficient, struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, EM1StatType GiveRecoveryCoefficientStatType, EM1StatType TakeRecoveryCoefficientStatType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalcRecoveryHPAndOther_C", "ApplyRecoveryCoefficient");

	Params::CalcRecoveryHPAndOther_C_ApplyRecoveryCoefficient Parms{};

	Parms.UseRecoveryCoefficient = UseRecoveryCoefficient;
	Parms.Param = std::move(Param);
	Parms.DamageInfo = std::move(DamageInfo);
	Parms.GiveRecoveryCoefficientStatType = GiveRecoveryCoefficientStatType;
	Parms.TakeRecoveryCoefficientStatType = TakeRecoveryCoefficientStatType;

	UObject::ProcessEvent(Func, &Parms);

	Param = std::move(Parms.Param);
	DamageInfo = std::move(Parms.DamageInfo);
}


// Function CalcRecoveryHPAndOther.CalcRecoveryHPAndOther_C.ApplySkillATK
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FM1AbilityOpCalcParam            Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FM1CalcDamageInfo                DamageInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// EM1ElementalDamageChannel               ElementalChannel                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EM1SkillArcheType                       ArcheType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FM1ScaledInteger                 AddPower                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FM1ScaledInteger                 AddAttack                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHittingPC                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCalcRecoveryHPAndOther_C::ApplySkillATK(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, EM1ElementalDamageChannel ElementalChannel, EM1SkillArcheType ArcheType, const struct FM1ScaledInteger& AddPower, const struct FM1ScaledInteger& AddAttack, bool IsHittingPC) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalcRecoveryHPAndOther_C", "ApplySkillATK");

	Params::CalcRecoveryHPAndOther_C_ApplySkillATK Parms{};

	Parms.Param = std::move(Param);
	Parms.DamageInfo = std::move(DamageInfo);
	Parms.ElementalChannel = ElementalChannel;
	Parms.ArcheType = ArcheType;
	Parms.AddPower = std::move(AddPower);
	Parms.AddAttack = std::move(AddAttack);
	Parms.IsHittingPC = IsHittingPC;

	UObject::ProcessEvent(Func, &Parms);

	Param = std::move(Parms.Param);
	DamageInfo = std::move(Parms.DamageInfo);
}


// Function CalcRecoveryHPAndOther.CalcRecoveryHPAndOther_C.DetermineRecoveryCoefficient
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FM1AbilityOpCalcParam            Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FM1CalcDamageInfo                DamageInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// EM1StatType                             StatType_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseRecoveryCoefficient                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EM1StatType                             TakeRecoveryCoefficient                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EM1StatType                             GiveRecoveryCoefficient                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCalcRecoveryHPAndOther_C::DetermineRecoveryCoefficient(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, EM1StatType StatType_0, bool* UseRecoveryCoefficient, EM1StatType* TakeRecoveryCoefficient, EM1StatType* GiveRecoveryCoefficient) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalcRecoveryHPAndOther_C", "DetermineRecoveryCoefficient");

	Params::CalcRecoveryHPAndOther_C_DetermineRecoveryCoefficient Parms{};

	Parms.Param = std::move(Param);
	Parms.DamageInfo = std::move(DamageInfo);
	Parms.StatType_0 = StatType_0;

	UObject::ProcessEvent(Func, &Parms);

	Param = std::move(Parms.Param);
	DamageInfo = std::move(Parms.DamageInfo);

	if (UseRecoveryCoefficient != nullptr)
		*UseRecoveryCoefficient = Parms.UseRecoveryCoefficient;

	if (TakeRecoveryCoefficient != nullptr)
		*TakeRecoveryCoefficient = Parms.TakeRecoveryCoefficient;

	if (GiveRecoveryCoefficient != nullptr)
		*GiveRecoveryCoefficient = Parms.GiveRecoveryCoefficient;
}


// Function CalcRecoveryHPAndOther.CalcRecoveryHPAndOther_C.DoCalculation
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FM1AbilityOpCalcParam            Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FM1CalcDamageInfo                DamageInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UCalcRecoveryHPAndOther_C::DoCalculation(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalcRecoveryHPAndOther_C", "DoCalculation");

	Params::CalcRecoveryHPAndOther_C_DoCalculation Parms{};

	Parms.Param = std::move(Param);
	Parms.DamageInfo = std::move(DamageInfo);

	UObject::ProcessEvent(Func, &Parms);

	Param = std::move(Parms.Param);
	DamageInfo = std::move(Parms.DamageInfo);
}


// Function CalcRecoveryHPAndOther.CalcRecoveryHPAndOther_C.Execute
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FM1AbilityOpCalcParam            Param                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FM1AbilityOpExecCalcOutput       Output                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UCalcRecoveryHPAndOther_C::Execute(const struct FM1AbilityOpCalcParam& Param, struct FM1AbilityOpExecCalcOutput& Output) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalcRecoveryHPAndOther_C", "Execute");

	Params::CalcRecoveryHPAndOther_C_Execute Parms{};

	Parms.Param = std::move(Param);
	Parms.Output = std::move(Output);

	UObject::ProcessEvent(Func, &Parms);

	Output = std::move(Parms.Output);
}


// Function CalcRecoveryHPAndOther.CalcRecoveryHPAndOther_C.SetRecoveryOutModifier
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FM1AbilityOpCalcParam            Param                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// struct FM1CalcDamageInfo                DamageInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FM1AbilityOpExecCalcOutput       Output                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UCalcRecoveryHPAndOther_C::SetRecoveryOutModifier(struct FM1AbilityOpCalcParam& Param, struct FM1CalcDamageInfo& DamageInfo, struct FM1AbilityOpExecCalcOutput& Output) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CalcRecoveryHPAndOther_C", "SetRecoveryOutModifier");

	Params::CalcRecoveryHPAndOther_C_SetRecoveryOutModifier Parms{};

	Parms.Param = std::move(Param);
	Parms.DamageInfo = std::move(DamageInfo);
	Parms.Output = std::move(Output);

	UObject::ProcessEvent(Func, &Parms);

	Param = std::move(Parms.Param);
	DamageInfo = std::move(Parms.DamageInfo);
	Output = std::move(Parms.Output);
}

}

