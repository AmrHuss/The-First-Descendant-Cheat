#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CraneProjectileBase

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_CraneTarget_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CraneProjectileBase.CraneProjectileBase_C
// 0x01C0 (0x0DD8 - 0x0C18)
class ACraneProjectileBase_C : public AM1AbilityProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0C18(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      NS_ProjectileTrail;                                // 0x0C20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AOE_PullingSphere;                                 // 0x0C28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Projectile;                                     // 0x0C30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        SphereMoveDistance;                                // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SphereMoveDuration;                                // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PullingVelocity;                                   // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dur_PullingDuration;                               // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ArrivedTargets;                                    // 0x0C58(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        PullingRadius;                                     // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         PendingTargets;                                    // 0x0C70(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class AActor*, struct FStruct_CraneTarget> PullingTargetInfos;                                // 0x0C80(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bSphereMoving;                                     // 0x0CD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD1[0x3];                                      // 0x0CD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SphereMoveStartLocation;                           // 0x0CD4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SphereMoveDestLocation;                            // 0x0CE0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CEC[0x4];                                      // 0x0CEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SphereMoveElapsed;                                 // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRuntimeFloatCurve                     SphereMoveLerpCurve;                               // 0x0CF8(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        RandomMaxOffset;                                   // 0x0D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  PullingTargetSETag;                                // 0x0D88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UNiagaraComponent*>              PullingLoopFX;                                     // 0x0DA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UNiagaraComponent*>              PullingFX;                                         // 0x0DB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        ProjectileRadius;                                  // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHit;                                              // 0x0DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TryPullingPendingTargets();
	void SphereMoveStart(const struct FVector& InHitNormal);
	void SphereMoveLoop(double InDeltaSeconds);
	void SphereMoveEnd();
	void ReceiveTick(float DeltaSeconds);
	void PullingStartFromTarget(class AActor* InActor, bool* Result);
	void PullingStart();
	void PullingLoop();
	void PullingEnd();
	void ProcessExplosion(class AActor* OtherActor, const struct FHitResult& HitResult);
	void OnEndOverlap_3F1382224CAA1F4F3A11649E0D58911C(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnBeginOverlap_3F1382224CAA1F4F3A11649E0D58911C(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void NetMulticastProcessHit(const struct FHitResult& Hit);
	struct FVector Get_Target_Direction_Vector(class AActor* InTarget, const struct FVector& RandomOffset);
	void ExecuteUbergraph_CraneProjectileBase(int32 EntryPoint);
	void Event_Sphere_Move_Finished();
	bool CanPullingTarget(class AActor* Target);
	void BP_OnPostSpawnAbilityActor();
	void BP_OnPostProcessHit(class AActor* OtherActor, const struct FHitResult& HitResult, const bool bPenetrated);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CraneProjectileBase_C">();
	}
	static class ACraneProjectileBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACraneProjectileBase_C>();
	}
};
static_assert(alignof(ACraneProjectileBase_C) == 0x000008, "Wrong alignment on ACraneProjectileBase_C");
static_assert(sizeof(ACraneProjectileBase_C) == 0x000DD8, "Wrong size on ACraneProjectileBase_C");
static_assert(offsetof(ACraneProjectileBase_C, UberGraphFrame) == 0x000C18, "Member 'ACraneProjectileBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, NS_ProjectileTrail) == 0x000C20, "Member 'ACraneProjectileBase_C::NS_ProjectileTrail' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, AOE_PullingSphere) == 0x000C28, "Member 'ACraneProjectileBase_C::AOE_PullingSphere' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, NS_Projectile) == 0x000C30, "Member 'ACraneProjectileBase_C::NS_Projectile' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, SphereMoveDistance) == 0x000C38, "Member 'ACraneProjectileBase_C::SphereMoveDistance' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, SphereMoveDuration) == 0x000C40, "Member 'ACraneProjectileBase_C::SphereMoveDuration' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, PullingVelocity) == 0x000C48, "Member 'ACraneProjectileBase_C::PullingVelocity' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, Dur_PullingDuration) == 0x000C50, "Member 'ACraneProjectileBase_C::Dur_PullingDuration' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, ArrivedTargets) == 0x000C58, "Member 'ACraneProjectileBase_C::ArrivedTargets' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, PullingRadius) == 0x000C68, "Member 'ACraneProjectileBase_C::PullingRadius' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, PendingTargets) == 0x000C70, "Member 'ACraneProjectileBase_C::PendingTargets' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, PullingTargetInfos) == 0x000C80, "Member 'ACraneProjectileBase_C::PullingTargetInfos' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, bSphereMoving) == 0x000CD0, "Member 'ACraneProjectileBase_C::bSphereMoving' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, SphereMoveStartLocation) == 0x000CD4, "Member 'ACraneProjectileBase_C::SphereMoveStartLocation' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, SphereMoveDestLocation) == 0x000CE0, "Member 'ACraneProjectileBase_C::SphereMoveDestLocation' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, SphereMoveElapsed) == 0x000CF0, "Member 'ACraneProjectileBase_C::SphereMoveElapsed' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, SphereMoveLerpCurve) == 0x000CF8, "Member 'ACraneProjectileBase_C::SphereMoveLerpCurve' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, RandomMaxOffset) == 0x000D80, "Member 'ACraneProjectileBase_C::RandomMaxOffset' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, PullingTargetSETag) == 0x000D88, "Member 'ACraneProjectileBase_C::PullingTargetSETag' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, PullingLoopFX) == 0x000DA8, "Member 'ACraneProjectileBase_C::PullingLoopFX' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, PullingFX) == 0x000DB8, "Member 'ACraneProjectileBase_C::PullingFX' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, ProjectileRadius) == 0x000DC8, "Member 'ACraneProjectileBase_C::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(ACraneProjectileBase_C, bHit) == 0x000DD0, "Member 'ACraneProjectileBase_C::bHit' has a wrong offset!");

}

