#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FFXFSR3Settings

#include "Basic.hpp"

#include "FFXFSR3Settings_structs.hpp"
#include "Engine_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class FFXFSR3Settings.FFXFSR3Settings
// 0x0070 (0x00A8 - 0x0038)
class UFFXFSR3Settings final : public UDeveloperSettings
{
public:
	bool                                          bEnabled;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoExposure;                                     // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledInEditorViewport;                          // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSSRExperimentalDenoiser;                       // 0x003B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRHIBackend;                                       // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bD3D12Backend;                                     // 0x003D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFrameGenEnabled;                                  // 0x003E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureDebugUI;                                   // 0x003F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateGlobalFrameTime;                            // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifySlateDeltaTime;                             // 0x0041(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EFFXFSR3FrameGenUIMode                        UIMode;                                            // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bD3D12AsyncInterpolation;                          // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bD3D12AsyncPresent;                                // 0x0049(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EFFXFSR3PaceRHIFrameMode                      PaceMode;                                          // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFFXFSR3QualityMode                           QualityMode;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFFXFSR3HistoryFormat                         HistoryFormat;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFFXFSR3DeDitherMode                          DeDither;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sharpness;                                         // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdjustMipBias;                                    // 0x0060(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceVertexDeformationOutputsVelocity;            // 0x0061(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EFFXFSR3LandscapeHISMMode                     ForceLandscapeHISMMobility;                        // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReactiveMask;                                     // 0x0068(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReflectionScale;                                   // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionLuminanceBias;                           // 0x0070(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessScale;                                    // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessBias;                                     // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoughnessMaxDistance;                              // 0x007C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReactiveMaskRoughnessForceMaxDistance;            // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TranslucencyBias;                                  // 0x0084(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucencyLuminanceBias;                         // 0x0088(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslucencyMaxDistance;                           // 0x008C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialShadingModel                         ReactiveShadingModelID;                            // 0x0090(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForceReactiveMaterialValue;                        // 0x0094(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactiveHistoryTranslucencyBias;                   // 0x0098(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReactiveHistoryTranslucencyLumaBias;               // 0x009C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreDOFTranslucencyScale;                           // 0x00A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreDOFTranslucencyMax;                            // 0x00A4(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FFXFSR3Settings">();
	}
	static class UFFXFSR3Settings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFFXFSR3Settings>();
	}
};
static_assert(alignof(UFFXFSR3Settings) == 0x000008, "Wrong alignment on UFFXFSR3Settings");
static_assert(sizeof(UFFXFSR3Settings) == 0x0000A8, "Wrong size on UFFXFSR3Settings");
static_assert(offsetof(UFFXFSR3Settings, bEnabled) == 0x000038, "Member 'UFFXFSR3Settings::bEnabled' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bAutoExposure) == 0x000039, "Member 'UFFXFSR3Settings::bAutoExposure' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bEnabledInEditorViewport) == 0x00003A, "Member 'UFFXFSR3Settings::bEnabledInEditorViewport' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bUseSSRExperimentalDenoiser) == 0x00003B, "Member 'UFFXFSR3Settings::bUseSSRExperimentalDenoiser' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bRHIBackend) == 0x00003C, "Member 'UFFXFSR3Settings::bRHIBackend' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bD3D12Backend) == 0x00003D, "Member 'UFFXFSR3Settings::bD3D12Backend' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bFrameGenEnabled) == 0x00003E, "Member 'UFFXFSR3Settings::bFrameGenEnabled' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bCaptureDebugUI) == 0x00003F, "Member 'UFFXFSR3Settings::bCaptureDebugUI' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bUpdateGlobalFrameTime) == 0x000040, "Member 'UFFXFSR3Settings::bUpdateGlobalFrameTime' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bModifySlateDeltaTime) == 0x000041, "Member 'UFFXFSR3Settings::bModifySlateDeltaTime' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, UIMode) == 0x000044, "Member 'UFFXFSR3Settings::UIMode' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bD3D12AsyncInterpolation) == 0x000048, "Member 'UFFXFSR3Settings::bD3D12AsyncInterpolation' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bD3D12AsyncPresent) == 0x000049, "Member 'UFFXFSR3Settings::bD3D12AsyncPresent' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, PaceMode) == 0x00004C, "Member 'UFFXFSR3Settings::PaceMode' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, QualityMode) == 0x000050, "Member 'UFFXFSR3Settings::QualityMode' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, HistoryFormat) == 0x000054, "Member 'UFFXFSR3Settings::HistoryFormat' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, DeDither) == 0x000058, "Member 'UFFXFSR3Settings::DeDither' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, Sharpness) == 0x00005C, "Member 'UFFXFSR3Settings::Sharpness' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bAdjustMipBias) == 0x000060, "Member 'UFFXFSR3Settings::bAdjustMipBias' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bForceVertexDeformationOutputsVelocity) == 0x000061, "Member 'UFFXFSR3Settings::bForceVertexDeformationOutputsVelocity' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, ForceLandscapeHISMMobility) == 0x000064, "Member 'UFFXFSR3Settings::ForceLandscapeHISMMobility' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bReactiveMask) == 0x000068, "Member 'UFFXFSR3Settings::bReactiveMask' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, ReflectionScale) == 0x00006C, "Member 'UFFXFSR3Settings::ReflectionScale' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, ReflectionLuminanceBias) == 0x000070, "Member 'UFFXFSR3Settings::ReflectionLuminanceBias' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, RoughnessScale) == 0x000074, "Member 'UFFXFSR3Settings::RoughnessScale' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, RoughnessBias) == 0x000078, "Member 'UFFXFSR3Settings::RoughnessBias' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, RoughnessMaxDistance) == 0x00007C, "Member 'UFFXFSR3Settings::RoughnessMaxDistance' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bReactiveMaskRoughnessForceMaxDistance) == 0x000080, "Member 'UFFXFSR3Settings::bReactiveMaskRoughnessForceMaxDistance' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, TranslucencyBias) == 0x000084, "Member 'UFFXFSR3Settings::TranslucencyBias' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, TranslucencyLuminanceBias) == 0x000088, "Member 'UFFXFSR3Settings::TranslucencyLuminanceBias' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, TranslucencyMaxDistance) == 0x00008C, "Member 'UFFXFSR3Settings::TranslucencyMaxDistance' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, ReactiveShadingModelID) == 0x000090, "Member 'UFFXFSR3Settings::ReactiveShadingModelID' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, ForceReactiveMaterialValue) == 0x000094, "Member 'UFFXFSR3Settings::ForceReactiveMaterialValue' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, ReactiveHistoryTranslucencyBias) == 0x000098, "Member 'UFFXFSR3Settings::ReactiveHistoryTranslucencyBias' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, ReactiveHistoryTranslucencyLumaBias) == 0x00009C, "Member 'UFFXFSR3Settings::ReactiveHistoryTranslucencyLumaBias' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, PreDOFTranslucencyScale) == 0x0000A0, "Member 'UFFXFSR3Settings::PreDOFTranslucencyScale' has a wrong offset!");
static_assert(offsetof(UFFXFSR3Settings, bPreDOFTranslucencyMax) == 0x0000A4, "Member 'UFFXFSR3Settings::bPreDOFTranslucencyMax' has a wrong offset!");

}

