#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: M1Actor

#include "Basic.hpp"

#include "NavigationSystem_classes.hpp"
#include "Engine_classes.hpp"
#include "M1Actor_structs.hpp"
#include "AnimationBudgetAllocator_classes.hpp"


namespace SDK
{

// Class M1Actor.M1NavModifierSmallerMaxZComponent
// 0x0000 (0x0150 - 0x0150)
class UM1NavModifierSmallerMaxZComponent final : public UNavModifierComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"M1NavModifierSmallerMaxZComponent">();
	}
	static class UM1NavModifierSmallerMaxZComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UM1NavModifierSmallerMaxZComponent>();
	}
};
//(alignof(UM1NavModifierSmallerMaxZComponent) == 0x000010, "Wrong alignment on UM1NavModifierSmallerMaxZComponent");
//(sizeof(UM1NavModifierSmallerMaxZComponent) == 0x000150, "Wrong size on UM1NavModifierSmallerMaxZComponent");

// Class M1Actor.M1SkeletalMeshActor
// 0x0000 (0x02C8 - 0x02C8)
class AM1SkeletalMeshActor : public ASkeletalMeshActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"M1SkeletalMeshActor">();
	}
	static class AM1SkeletalMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AM1SkeletalMeshActor>();
	}
};
//(alignof(AM1SkeletalMeshActor) == 0x000008, "Wrong alignment on AM1SkeletalMeshActor");
//(sizeof(AM1SkeletalMeshActor) == 0x0002C8, "Wrong size on AM1SkeletalMeshActor");

// Class M1Actor.M1WorldSettings
// 0x0008 (0x0428 - 0x0420)
class AM1WorldSettings final : public AWorldSettings
{
public:
	float                                         GravityScale;                                      // 0x0420(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"M1WorldSettings">();
	}
	static class AM1WorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<AM1WorldSettings>();
	}
};
//(alignof(AM1WorldSettings) == 0x000008, "Wrong alignment on AM1WorldSettings");
//(sizeof(AM1WorldSettings) == 0x000428, "Wrong size on AM1WorldSettings");
//(offsetof(AM1WorldSettings, GravityScale) == 0x000420, "Member 'AM1WorldSettings::GravityScale' has a wrong offset!");

// Class M1Actor.M1SkeletalMeshComponentBudgeted
// 0x0010 (0x0E60 - 0x0E50)
class UM1SkeletalMeshComponentBudgeted : public USkeletalMeshComponentBudgeted
{
public:
	bool                                          bDisableAnimPhys;                                  // 0x0E48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkeletalMeshSignificanceLevel                Significance;                                      // 0x0E49(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4A[0x16];                                     // 0x0E4A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"M1SkeletalMeshComponentBudgeted">();
	}
	static class UM1SkeletalMeshComponentBudgeted* GetDefaultObj()
	{
		return GetDefaultObjImpl<UM1SkeletalMeshComponentBudgeted>();
	}
};
//(alignof(UM1SkeletalMeshComponentBudgeted) == 0x000010, "Wrong alignment on UM1SkeletalMeshComponentBudgeted");
//(sizeof(UM1SkeletalMeshComponentBudgeted) == 0x000E60, "Wrong size on UM1SkeletalMeshComponentBudgeted");
//(offsetof(UM1SkeletalMeshComponentBudgeted, bDisableAnimPhys) == 0x000E48, "Member 'UM1SkeletalMeshComponentBudgeted::bDisableAnimPhys' has a wrong offset!");
//(offsetof(UM1SkeletalMeshComponentBudgeted, Significance) == 0x000E49, "Member 'UM1SkeletalMeshComponentBudgeted::Significance' has a wrong offset!");

// Class M1Actor.M1StaticMeshComponent
// 0x0000 (0x0530 - 0x0530)
class UM1StaticMeshComponent final : public UStaticMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"M1StaticMeshComponent">();
	}
	static class UM1StaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UM1StaticMeshComponent>();
	}
};
//(alignof(UM1StaticMeshComponent) == 0x000010, "Wrong alignment on UM1StaticMeshComponent");
//(sizeof(UM1StaticMeshComponent) == 0x000530, "Wrong size on UM1StaticMeshComponent");

// Class M1Actor.M1StaticMeshActor
// 0x0010 (0x0268 - 0x0258)
class AM1StaticMeshActor : public AStaticMeshActor
{
public:
	bool                                          bMag_FillCollisionInsideForNavmesh;                // 0x0258(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavModifierComponent*                  NavModifierComp;                                   // 0x0260(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"M1StaticMeshActor">();
	}
	static class AM1StaticMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AM1StaticMeshActor>();
	}
};
//(alignof(AM1StaticMeshActor) == 0x000008, "Wrong alignment on AM1StaticMeshActor");
//(sizeof(AM1StaticMeshActor) == 0x000268, "Wrong size on AM1StaticMeshActor");
//(offsetof(AM1StaticMeshActor, bMag_FillCollisionInsideForNavmesh) == 0x000258, "Member 'AM1StaticMeshActor::bMag_FillCollisionInsideForNavmesh' has a wrong offset!");
//(offsetof(AM1StaticMeshActor, NavModifierComp) == 0x000260, "Member 'AM1StaticMeshActor::NavModifierComp' has a wrong offset!");

// Class M1Actor.M1WindDirectionalSourceComponent
// 0x0050 (0x0260 - 0x0210)
class UM1WindDirectionalSourceComponent final : public UWindDirectionalSourceComponent
{
public:
	struct FM1WindGustParameter                   GustParameter;                                     // 0x0210(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FM1WindChannels                        WindChannels;                                      // 0x022C(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnabled : 1;                                      // 0x0230(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_231[0x2F];                                     // 0x0231(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetWindStrengthCombinedGust(const struct FVector& Position, struct FVector* OutDirection, float* OutSpeed);
	void GustForce(const float GustStrength, const float GustPreDuration, const float GustApexDuration, const float GustPostDuration);
	void SetEnabled(bool InEnabled);
	void SetWindChannels(const struct FM1WindChannels& InWindChannels);

	bool IsWindChannelsValid(const struct FM1WindChannels& InWindChannels) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"M1WindDirectionalSourceComponent">();
	}
	static class UM1WindDirectionalSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UM1WindDirectionalSourceComponent>();
	}
};
//(alignof(UM1WindDirectionalSourceComponent) == 0x000010, "Wrong alignment on UM1WindDirectionalSourceComponent");
//(sizeof(UM1WindDirectionalSourceComponent) == 0x000260, "Wrong size on UM1WindDirectionalSourceComponent");
//(offsetof(UM1WindDirectionalSourceComponent, GustParameter) == 0x000210, "Member 'UM1WindDirectionalSourceComponent::GustParameter' has a wrong offset!");
//(offsetof(UM1WindDirectionalSourceComponent, WindChannels) == 0x00022C, "Member 'UM1WindDirectionalSourceComponent::WindChannels' has a wrong offset!");

}

