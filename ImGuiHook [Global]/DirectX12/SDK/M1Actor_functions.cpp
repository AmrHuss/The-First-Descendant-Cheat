#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: M1Actor

#include "Basic.hpp"

#include "M1Actor_classes.hpp"
#include "M1Actor_parameters.hpp"


namespace SDK
{

// Function M1Actor.M1WindDirectionalSourceComponent.GetWindStrengthCombinedGust
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutSpeed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UM1WindDirectionalSourceComponent::GetWindStrengthCombinedGust(const struct FVector& Position, struct FVector* OutDirection, float* OutSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("M1WindDirectionalSourceComponent", "GetWindStrengthCombinedGust");

	Params::M1WindDirectionalSourceComponent_GetWindStrengthCombinedGust Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDirection != nullptr)
		*OutDirection = std::move(Parms.OutDirection);

	if (OutSpeed != nullptr)
		*OutSpeed = Parms.OutSpeed;
}


// Function M1Actor.M1WindDirectionalSourceComponent.GustForce
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   GustStrength                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GustPreDuration                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GustApexDuration                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GustPostDuration                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UM1WindDirectionalSourceComponent::GustForce(const float GustStrength, const float GustPreDuration, const float GustApexDuration, const float GustPostDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("M1WindDirectionalSourceComponent", "GustForce");

	Params::M1WindDirectionalSourceComponent_GustForce Parms{};

	Parms.GustStrength = GustStrength;
	Parms.GustPreDuration = GustPreDuration;
	Parms.GustApexDuration = GustApexDuration;
	Parms.GustPostDuration = GustPostDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function M1Actor.M1WindDirectionalSourceComponent.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UM1WindDirectionalSourceComponent::SetEnabled(bool InEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("M1WindDirectionalSourceComponent", "SetEnabled");

	Params::M1WindDirectionalSourceComponent_SetEnabled Parms{};

	Parms.InEnabled = InEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function M1Actor.M1WindDirectionalSourceComponent.SetWindChannels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FM1WindChannels                  InWindChannels                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UM1WindDirectionalSourceComponent::SetWindChannels(const struct FM1WindChannels& InWindChannels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("M1WindDirectionalSourceComponent", "SetWindChannels");

	Params::M1WindDirectionalSourceComponent_SetWindChannels Parms{};

	Parms.InWindChannels = std::move(InWindChannels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function M1Actor.M1WindDirectionalSourceComponent.IsWindChannelsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FM1WindChannels                  InWindChannels                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UM1WindDirectionalSourceComponent::IsWindChannelsValid(const struct FM1WindChannels& InWindChannels) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("M1WindDirectionalSourceComponent", "IsWindChannelsValid");

	Params::M1WindDirectionalSourceComponent_IsWindChannelsValid Parms{};

	Parms.InWindChannels = std::move(InWindChannels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

