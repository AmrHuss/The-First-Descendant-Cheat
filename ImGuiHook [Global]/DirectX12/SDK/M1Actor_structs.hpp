#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: M1Actor

#include "Basic.hpp"


namespace SDK
{

// Enum M1Actor.ESkeletalMeshSignificanceLevel
// NumValues: 0x0005
enum class ESkeletalMeshSignificanceLevel : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Num                                      = 3,
	ESkeletalMeshSignificanceLevel_MAX       = 4,
};

// Enum M1Actor.EM1AnimPhysDisabledState
// NumValues: 0x0006
enum class EM1AnimPhysDisabledState : uint8
{
	None                                     = 0,
	DisableWind                              = 1,
	DisableGravity                           = 2,
	DisableSimulation                        = 4,
	DisableAll                               = 7,
	EM1AnimPhysDisabledState_MAX             = 8,
};

// ScriptStruct M1Actor.M1WindChannels
// 0x0001 (0x0001 - 0x0000)
struct FM1WindChannels final
{
public:
	uint8                                         bWorld : 1;                                        // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bChannel1 : 1;                                     // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bChannel2 : 1;                                     // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FM1WindChannels) == 0x000001, "Wrong alignment on FM1WindChannels");
static_assert(sizeof(FM1WindChannels) == 0x000001, "Wrong size on FM1WindChannels");

// ScriptStruct M1Actor.M1WindGustParameter
// 0x001C (0x001C - 0x0000)
struct FM1WindGustParameter final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GustFrequency;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GustDurationMin;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GustDurationMax;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GustDelay;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnabledGust : 1;                                  // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FM1WindGustParameter) == 0x000004, "Wrong alignment on FM1WindGustParameter");
static_assert(sizeof(FM1WindGustParameter) == 0x00001C, "Wrong size on FM1WindGustParameter");
static_assert(offsetof(FM1WindGustParameter, GustFrequency) == 0x000008, "Member 'FM1WindGustParameter::GustFrequency' has a wrong offset!");
static_assert(offsetof(FM1WindGustParameter, GustDurationMin) == 0x00000C, "Member 'FM1WindGustParameter::GustDurationMin' has a wrong offset!");
static_assert(offsetof(FM1WindGustParameter, GustDurationMax) == 0x000010, "Member 'FM1WindGustParameter::GustDurationMax' has a wrong offset!");
static_assert(offsetof(FM1WindGustParameter, GustDelay) == 0x000014, "Member 'FM1WindGustParameter::GustDelay' has a wrong offset!");

}

