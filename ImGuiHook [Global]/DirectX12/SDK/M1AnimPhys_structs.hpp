#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: M1AnimPhys

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "M1Actor_structs.hpp"


namespace SDK
{

// Enum M1AnimPhys.FM1AnimPhysRule
// NumValues: 0x0003
enum class EFM1AnimPhysRule : uint8
{
	AlwaysEnabled                            = 0,
	EnabledWhenPhysBodyWasSimulated          = 1,
	FM1AnimPhysRule_MAX                      = 2,
};

// ScriptStruct M1AnimPhys.M1AnimPhysSetupSettings
// 0x0038 (0x0038 - 0x0000)
struct FM1AnimPhysSetupSettings final
{
public:
	float                                         WorldDampingLocation;                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldDampingRotation;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndBoneLength;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitAngle;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LimitAngleX;                                       // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LimitAngleY;                                       // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LimitAngleZ;                                       // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFM1AnimPhysRule                              Rule;                                              // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FM1AnimPhysSetupSettings) == 0x000004, "Wrong alignment on FM1AnimPhysSetupSettings");
static_assert(sizeof(FM1AnimPhysSetupSettings) == 0x000038, "Wrong size on FM1AnimPhysSetupSettings");
static_assert(offsetof(FM1AnimPhysSetupSettings, WorldDampingLocation) == 0x000000, "Member 'FM1AnimPhysSetupSettings::WorldDampingLocation' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSetupSettings, WorldDampingRotation) == 0x000004, "Member 'FM1AnimPhysSetupSettings::WorldDampingRotation' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSetupSettings, Damping) == 0x000008, "Member 'FM1AnimPhysSetupSettings::Damping' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSetupSettings, Stiffness) == 0x00000C, "Member 'FM1AnimPhysSetupSettings::Stiffness' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSetupSettings, Radius) == 0x000010, "Member 'FM1AnimPhysSetupSettings::Radius' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSetupSettings, EndBoneLength) == 0x000014, "Member 'FM1AnimPhysSetupSettings::EndBoneLength' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSetupSettings, LimitAngle) == 0x000018, "Member 'FM1AnimPhysSetupSettings::LimitAngle' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSetupSettings, LimitAngleX) == 0x00001C, "Member 'FM1AnimPhysSetupSettings::LimitAngleX' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSetupSettings, LimitAngleY) == 0x000024, "Member 'FM1AnimPhysSetupSettings::LimitAngleY' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSetupSettings, LimitAngleZ) == 0x00002C, "Member 'FM1AnimPhysSetupSettings::LimitAngleZ' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSetupSettings, Rule) == 0x000034, "Member 'FM1AnimPhysSetupSettings::Rule' has a wrong offset!");

// ScriptStruct M1AnimPhys.M1AnimPhysColliderBase
// 0x0028 (0x0028 - 0x0000)
struct FM1AnimPhysColliderBase
{
public:
	struct FBoneReference                         DrivingBone;                                       // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLocation;                                    // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FM1AnimPhysColliderBase) == 0x000004, "Wrong alignment on FM1AnimPhysColliderBase");
static_assert(sizeof(FM1AnimPhysColliderBase) == 0x000028, "Wrong size on FM1AnimPhysColliderBase");
static_assert(offsetof(FM1AnimPhysColliderBase, DrivingBone) == 0x000000, "Member 'FM1AnimPhysColliderBase::DrivingBone' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysColliderBase, OffsetLocation) == 0x000010, "Member 'FM1AnimPhysColliderBase::OffsetLocation' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysColliderBase, OffsetRotation) == 0x00001C, "Member 'FM1AnimPhysColliderBase::OffsetRotation' has a wrong offset!");

// ScriptStruct M1AnimPhys.M1AnimPhysSphereCollider
// 0x0004 (0x002C - 0x0028)
struct FM1AnimPhysSphereCollider final : public FM1AnimPhysColliderBase
{
public:
	float                                         Radius;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FM1AnimPhysSphereCollider) == 0x000004, "Wrong alignment on FM1AnimPhysSphereCollider");
static_assert(sizeof(FM1AnimPhysSphereCollider) == 0x00002C, "Wrong size on FM1AnimPhysSphereCollider");
static_assert(offsetof(FM1AnimPhysSphereCollider, Radius) == 0x000028, "Member 'FM1AnimPhysSphereCollider::Radius' has a wrong offset!");

// ScriptStruct M1AnimPhys.M1AnimPhysCapsuleCollider
// 0x0008 (0x0030 - 0x0028)
struct FM1AnimPhysCapsuleCollider final : public FM1AnimPhysColliderBase
{
public:
	float                                         Radius;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FM1AnimPhysCapsuleCollider) == 0x000004, "Wrong alignment on FM1AnimPhysCapsuleCollider");
static_assert(sizeof(FM1AnimPhysCapsuleCollider) == 0x000030, "Wrong size on FM1AnimPhysCapsuleCollider");
static_assert(offsetof(FM1AnimPhysCapsuleCollider, Radius) == 0x000028, "Member 'FM1AnimPhysCapsuleCollider::Radius' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysCapsuleCollider, Length) == 0x00002C, "Member 'FM1AnimPhysCapsuleCollider::Length' has a wrong offset!");

// ScriptStruct M1AnimPhys.M1AnimPhysPlanarCollider
// 0x0000 (0x0028 - 0x0028)
struct FM1AnimPhysPlanarCollider final : public FM1AnimPhysColliderBase
{
};
static_assert(alignof(FM1AnimPhysPlanarCollider) == 0x000004, "Wrong alignment on FM1AnimPhysPlanarCollider");
static_assert(sizeof(FM1AnimPhysPlanarCollider) == 0x000028, "Wrong size on FM1AnimPhysPlanarCollider");

// ScriptStruct M1AnimPhys.M1AnimPhysCollisionSettings
// 0x0038 (0x0038 - 0x0000)
struct FM1AnimPhysCollisionSettings final
{
public:
	float                                         PhysBodyScale;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollidedWithAttachedMesh;                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollidedWithSimulatedPhysBody;                    // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollidedWithFloor;                                // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FM1AnimPhysSphereCollider>      SphereColliders;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FM1AnimPhysCapsuleCollider>     CapsuleColliders;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FM1AnimPhysPlanarCollider>      PlanarColliders;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FM1AnimPhysCollisionSettings) == 0x000008, "Wrong alignment on FM1AnimPhysCollisionSettings");
static_assert(sizeof(FM1AnimPhysCollisionSettings) == 0x000038, "Wrong size on FM1AnimPhysCollisionSettings");
static_assert(offsetof(FM1AnimPhysCollisionSettings, PhysBodyScale) == 0x000000, "Member 'FM1AnimPhysCollisionSettings::PhysBodyScale' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysCollisionSettings, bCollidedWithAttachedMesh) == 0x000004, "Member 'FM1AnimPhysCollisionSettings::bCollidedWithAttachedMesh' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysCollisionSettings, bCollidedWithSimulatedPhysBody) == 0x000005, "Member 'FM1AnimPhysCollisionSettings::bCollidedWithSimulatedPhysBody' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysCollisionSettings, bCollidedWithFloor) == 0x000006, "Member 'FM1AnimPhysCollisionSettings::bCollidedWithFloor' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysCollisionSettings, SphereColliders) == 0x000008, "Member 'FM1AnimPhysCollisionSettings::SphereColliders' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysCollisionSettings, CapsuleColliders) == 0x000018, "Member 'FM1AnimPhysCollisionSettings::CapsuleColliders' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysCollisionSettings, PlanarColliders) == 0x000028, "Member 'FM1AnimPhysCollisionSettings::PlanarColliders' has a wrong offset!");

// ScriptStruct M1AnimPhys.M1AnimPhysExternalForceSettings
// 0x0034 (0x0034 - 0x0000)
struct FM1AnimPhysExternalForceSettings final
{
public:
	float                                         WorldMaxSpeed;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Gravity;                                           // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FM1WindChannels                        WindChannels;                                      // 0x0011(0x0001)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindScale;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLiftAndDrag;                                // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LiftAndDragScale;                                  // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lift;                                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Drag;                                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpSpeed;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FM1AnimPhysExternalForceSettings) == 0x000004, "Wrong alignment on FM1AnimPhysExternalForceSettings");
static_assert(sizeof(FM1AnimPhysExternalForceSettings) == 0x000034, "Wrong size on FM1AnimPhysExternalForceSettings");
static_assert(offsetof(FM1AnimPhysExternalForceSettings, WorldMaxSpeed) == 0x000000, "Member 'FM1AnimPhysExternalForceSettings::WorldMaxSpeed' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysExternalForceSettings, Gravity) == 0x000004, "Member 'FM1AnimPhysExternalForceSettings::Gravity' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysExternalForceSettings, bEnableWind) == 0x000010, "Member 'FM1AnimPhysExternalForceSettings::bEnableWind' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysExternalForceSettings, WindChannels) == 0x000011, "Member 'FM1AnimPhysExternalForceSettings::WindChannels' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysExternalForceSettings, WindScale) == 0x000014, "Member 'FM1AnimPhysExternalForceSettings::WindScale' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysExternalForceSettings, bEnableLiftAndDrag) == 0x000018, "Member 'FM1AnimPhysExternalForceSettings::bEnableLiftAndDrag' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysExternalForceSettings, LiftAndDragScale) == 0x00001C, "Member 'FM1AnimPhysExternalForceSettings::LiftAndDragScale' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysExternalForceSettings, Lift) == 0x000028, "Member 'FM1AnimPhysExternalForceSettings::Lift' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysExternalForceSettings, Drag) == 0x00002C, "Member 'FM1AnimPhysExternalForceSettings::Drag' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysExternalForceSettings, LerpSpeed) == 0x000030, "Member 'FM1AnimPhysExternalForceSettings::LerpSpeed' has a wrong offset!");

// ScriptStruct M1AnimPhys.M1AnimPhysSmoothingSettings
// 0x0020 (0x0020 - 0x0000)
struct FM1AnimPhysSmoothingSettings final
{
public:
	float                                         EvaluationResetTime;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvaluationSuspendSimTimeAfterReset;                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvaluationWarmUpTime;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleDampingWithExternalSpeed;                    // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleDampingLerpSpeed;                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleDampingMultiplier;                            // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FM1AnimPhysSmoothingSettings) == 0x000004, "Wrong alignment on FM1AnimPhysSmoothingSettings");
static_assert(sizeof(FM1AnimPhysSmoothingSettings) == 0x000020, "Wrong size on FM1AnimPhysSmoothingSettings");
static_assert(offsetof(FM1AnimPhysSmoothingSettings, EvaluationResetTime) == 0x000000, "Member 'FM1AnimPhysSmoothingSettings::EvaluationResetTime' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSmoothingSettings, EvaluationSuspendSimTimeAfterReset) == 0x000004, "Member 'FM1AnimPhysSmoothingSettings::EvaluationSuspendSimTimeAfterReset' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSmoothingSettings, EvaluationWarmUpTime) == 0x000008, "Member 'FM1AnimPhysSmoothingSettings::EvaluationWarmUpTime' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSmoothingSettings, bScaleDampingWithExternalSpeed) == 0x00000C, "Member 'FM1AnimPhysSmoothingSettings::bScaleDampingWithExternalSpeed' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSmoothingSettings, ScaleDampingLerpSpeed) == 0x000010, "Member 'FM1AnimPhysSmoothingSettings::ScaleDampingLerpSpeed' has a wrong offset!");
static_assert(offsetof(FM1AnimPhysSmoothingSettings, ScaleDampingMultiplier) == 0x000014, "Member 'FM1AnimPhysSmoothingSettings::ScaleDampingMultiplier' has a wrong offset!");

// ScriptStruct M1AnimPhys.M1AnimNode_AnimPhys
// 0x03C0 (0x03D0 - 0x0010)
struct alignas(0x10) FM1AnimNode_AnimPhys final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Base;                                              // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 BonesToSimulate;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 BonesToExculude;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FM1AnimPhysSetupSettings               SetupSettings;                                     // 0x0048(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FM1AnimPhysCollisionSettings           CollisionSettings;                                 // 0x0080(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FM1AnimPhysExternalForceSettings       ExternalForceSettings;                             // 0x00B8(0x0034)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FM1AnimPhysSmoothingSettings           SmoothingSettings;                                 // 0x00EC(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x2C4];                                    // 0x010C(0x02C4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FM1AnimNode_AnimPhys) == 0x000010, "Wrong alignment on FM1AnimNode_AnimPhys");
static_assert(sizeof(FM1AnimNode_AnimPhys) == 0x0003D0, "Wrong size on FM1AnimNode_AnimPhys");
static_assert(offsetof(FM1AnimNode_AnimPhys, Base) == 0x000010, "Member 'FM1AnimNode_AnimPhys::Base' has a wrong offset!");
static_assert(offsetof(FM1AnimNode_AnimPhys, Alpha) == 0x000020, "Member 'FM1AnimNode_AnimPhys::Alpha' has a wrong offset!");
static_assert(offsetof(FM1AnimNode_AnimPhys, BonesToSimulate) == 0x000028, "Member 'FM1AnimNode_AnimPhys::BonesToSimulate' has a wrong offset!");
static_assert(offsetof(FM1AnimNode_AnimPhys, BonesToExculude) == 0x000038, "Member 'FM1AnimNode_AnimPhys::BonesToExculude' has a wrong offset!");
static_assert(offsetof(FM1AnimNode_AnimPhys, SetupSettings) == 0x000048, "Member 'FM1AnimNode_AnimPhys::SetupSettings' has a wrong offset!");
static_assert(offsetof(FM1AnimNode_AnimPhys, CollisionSettings) == 0x000080, "Member 'FM1AnimNode_AnimPhys::CollisionSettings' has a wrong offset!");
static_assert(offsetof(FM1AnimNode_AnimPhys, ExternalForceSettings) == 0x0000B8, "Member 'FM1AnimNode_AnimPhys::ExternalForceSettings' has a wrong offset!");
static_assert(offsetof(FM1AnimNode_AnimPhys, SmoothingSettings) == 0x0000EC, "Member 'FM1AnimNode_AnimPhys::SmoothingSettings' has a wrong offset!");

}

