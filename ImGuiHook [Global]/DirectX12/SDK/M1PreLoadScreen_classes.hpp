#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: M1PreLoadScreen

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class M1PreLoadScreen.M1LoadingScreenManager
// 0x0090 (0x00C0 - 0x0030)
class UM1LoadingScreenManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x90];                                      // 0x0030(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"M1LoadingScreenManager">();
	}
	static class UM1LoadingScreenManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UM1LoadingScreenManager>();
	}
};
static_assert(alignof(UM1LoadingScreenManager) == 0x000008, "Wrong alignment on UM1LoadingScreenManager");
static_assert(sizeof(UM1LoadingScreenManager) == 0x0000C0, "Wrong size on UM1LoadingScreenManager");

// Class M1PreLoadScreen.M1PreLoadScreenSetting
// 0x0060 (0x0098 - 0x0038)
class UM1PreLoadScreenSetting final : public UDeveloperSettings
{
public:
	struct FSoftClassPath                         StartupLoadingScreenClassName;                     // 0x0038(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         EngineLoadingScreenClassName;                      // 0x0058(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         GameLoadingScreenClassName;                        // 0x0078(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"M1PreLoadScreenSetting">();
	}
	static class UM1PreLoadScreenSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UM1PreLoadScreenSetting>();
	}
};
static_assert(alignof(UM1PreLoadScreenSetting) == 0x000008, "Wrong alignment on UM1PreLoadScreenSetting");
static_assert(sizeof(UM1PreLoadScreenSetting) == 0x000098, "Wrong size on UM1PreLoadScreenSetting");
static_assert(offsetof(UM1PreLoadScreenSetting, StartupLoadingScreenClassName) == 0x000038, "Member 'UM1PreLoadScreenSetting::StartupLoadingScreenClassName' has a wrong offset!");
static_assert(offsetof(UM1PreLoadScreenSetting, EngineLoadingScreenClassName) == 0x000058, "Member 'UM1PreLoadScreenSetting::EngineLoadingScreenClassName' has a wrong offset!");
static_assert(offsetof(UM1PreLoadScreenSetting, GameLoadingScreenClassName) == 0x000078, "Member 'UM1PreLoadScreenSetting::GameLoadingScreenClassName' has a wrong offset!");

}

