#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: M_001_Specification_BP

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass M_001_Specification_BP.M_001_Specification_BP_C
// 0x05A0 (0x0910 - 0x0370)
class UM_001_Specification_BP_C final : public UM1BaseAnimInstance
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x0388(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x03A8(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0470(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x04F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0518(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0540(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0568(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0590(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x05B8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x05D8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0620(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0640(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0688(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x06A8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x06F0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0710(0x00C8)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x07D8(0x00C8)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x08A0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x08C0(0x0048)()
	bool                                          bLepicArmLauncher;                                 // 0x0908(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void ExecuteUbergraph_M_001_Specification_BP(int32 EntryPoint);
	void SpecificationLayer(const struct FPoseLink& InPose, struct FPoseLink* SpecificationLayer_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"M_001_Specification_BP_C">();
	}
	static class UM_001_Specification_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UM_001_Specification_BP_C>();
	}
};
static_assert(alignof(UM_001_Specification_BP_C) == 0x000010, "Wrong alignment on UM_001_Specification_BP_C");
static_assert(sizeof(UM_001_Specification_BP_C) == 0x000910, "Wrong size on UM_001_Specification_BP_C");
static_assert(offsetof(UM_001_Specification_BP_C, UberGraphFrame) == 0x000370, "Member 'UM_001_Specification_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UM_001_Specification_BP_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UM_001_Specification_BP_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_Root_1) == 0x000388, "Member 'UM_001_Specification_BP_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_LinkedInputPose) == 0x0003A8, "Member 'UM_001_Specification_BP_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_SaveCachedPose) == 0x000470, "Member 'UM_001_Specification_BP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_UseCachedPose) == 0x0004F0, "Member 'UM_001_Specification_BP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_TransitionResult_3) == 0x000518, "Member 'UM_001_Specification_BP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_TransitionResult_2) == 0x000540, "Member 'UM_001_Specification_BP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_TransitionResult_1) == 0x000568, "Member 'UM_001_Specification_BP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_TransitionResult) == 0x000590, "Member 'UM_001_Specification_BP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_StateResult_3) == 0x0005B8, "Member 'UM_001_Specification_BP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_SequencePlayer_3) == 0x0005D8, "Member 'UM_001_Specification_BP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_StateResult_2) == 0x000620, "Member 'UM_001_Specification_BP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_SequencePlayer_2) == 0x000640, "Member 'UM_001_Specification_BP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_StateResult_1) == 0x000688, "Member 'UM_001_Specification_BP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_SequencePlayer_1) == 0x0006A8, "Member 'UM_001_Specification_BP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_StateResult) == 0x0006F0, "Member 'UM_001_Specification_BP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_StateMachine) == 0x000710, "Member 'UM_001_Specification_BP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_ApplyAdditive) == 0x0007D8, "Member 'UM_001_Specification_BP_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_Root) == 0x0008A0, "Member 'UM_001_Specification_BP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, AnimGraphNode_SequencePlayer) == 0x0008C0, "Member 'UM_001_Specification_BP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UM_001_Specification_BP_C, bLepicArmLauncher) == 0x000908, "Member 'UM_001_Specification_BP_C::bLepicArmLauncher' has a wrong offset!");

}

