#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Main

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Main.Main_C.AbilityLayer
// 0x0020 (0x0020 - 0x0000)
struct Main_C_AbilityLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AbilityLayer_0;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_AbilityLayer) == 0x000008, "Wrong alignment on Main_C_AbilityLayer");
static_assert(sizeof(Main_C_AbilityLayer) == 0x000020, "Wrong size on Main_C_AbilityLayer");
static_assert(offsetof(Main_C_AbilityLayer, InPose) == 0x000000, "Member 'Main_C_AbilityLayer::InPose' has a wrong offset!");
static_assert(offsetof(Main_C_AbilityLayer, AbilityLayer_0) == 0x000010, "Member 'Main_C_AbilityLayer::AbilityLayer_0' has a wrong offset!");

// Function Main.Main_C.AimOffsetLayer
// 0x0020 (0x0020 - 0x0000)
struct Main_C_AimOffsetLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AimOffsetLayer_0;                                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_AimOffsetLayer) == 0x000008, "Wrong alignment on Main_C_AimOffsetLayer");
static_assert(sizeof(Main_C_AimOffsetLayer) == 0x000020, "Wrong size on Main_C_AimOffsetLayer");
static_assert(offsetof(Main_C_AimOffsetLayer, InPose) == 0x000000, "Member 'Main_C_AimOffsetLayer::InPose' has a wrong offset!");
static_assert(offsetof(Main_C_AimOffsetLayer, AimOffsetLayer_0) == 0x000010, "Member 'Main_C_AimOffsetLayer::AimOffsetLayer_0' has a wrong offset!");

// Function Main.Main_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct Main_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_AnimGraph) == 0x000008, "Wrong alignment on Main_C_AnimGraph");
static_assert(sizeof(Main_C_AnimGraph) == 0x000010, "Wrong size on Main_C_AnimGraph");
static_assert(offsetof(Main_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'Main_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function Main.Main_C.ExecuteUbergraph_Main
// 0x0070 (0x0070 - 0x0000)
struct Main_C_ExecuteUbergraph_Main final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMontageSlotWeight_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetLocomotionAnimLayer_Ret;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetAbilityAnimLayer_Ret;                  // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetWireAnimLayer_Ret;                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UAnimInstance>              CallFunc_GetCurrentAnimLayer_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast;              // 0x0058(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast_1;            // 0x005C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet_Alpha_ImplicitCast;         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Main_C_ExecuteUbergraph_Main) == 0x000008, "Wrong alignment on Main_C_ExecuteUbergraph_Main");
static_assert(sizeof(Main_C_ExecuteUbergraph_Main) == 0x000070, "Wrong size on Main_C_ExecuteUbergraph_Main");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, EntryPoint) == 0x000000, "Member 'Main_C_ExecuteUbergraph_Main::EntryPoint' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_GetMontageSlotWeight_ReturnValue) == 0x000004, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_GetMontageSlotWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000008, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_SelectFloat_ReturnValue_1) == 0x000018, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_GetLocomotionAnimLayer_Ret) == 0x000020, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_GetLocomotionAnimLayer_Ret' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_GetAbilityAnimLayer_Ret) == 0x000028, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_GetAbilityAnimLayer_Ret' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_GetCurveValue_ReturnValue) == 0x000030, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_IsValidClass_ReturnValue) == 0x000034, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_GetWireAnimLayer_Ret) == 0x000038, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_GetWireAnimLayer_Ret' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_GetCurrentAnimLayer_ReturnValue) == 0x000040, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_GetCurrentAnimLayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_SelectFloat_ReturnValue_2) == 0x000048, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000050, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_Array_Set_Item_ImplicitCast) == 0x000058, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_Array_Set_Item_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_Array_Set_Item_ImplicitCast_1) == 0x00005C, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_Array_Set_Item_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, CallFunc_SelectFloat_A_ImplicitCast) == 0x000060, "Member 'Main_C_ExecuteUbergraph_Main::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Main_C_ExecuteUbergraph_Main, K2Node_StructMemberSet_Alpha_ImplicitCast) == 0x000068, "Member 'Main_C_ExecuteUbergraph_Main::K2Node_StructMemberSet_Alpha_ImplicitCast' has a wrong offset!");

// Function Main.Main_C.FullBody
// 0x0020 (0x0020 - 0x0000)
struct Main_C_FullBody final
{
public:
	struct FPoseLink                              InPose_FullBody;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FullBody_0;                                        // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_FullBody) == 0x000008, "Wrong alignment on Main_C_FullBody");
static_assert(sizeof(Main_C_FullBody) == 0x000020, "Wrong size on Main_C_FullBody");
static_assert(offsetof(Main_C_FullBody, InPose_FullBody) == 0x000000, "Member 'Main_C_FullBody::InPose_FullBody' has a wrong offset!");
static_assert(offsetof(Main_C_FullBody, FullBody_0) == 0x000010, "Member 'Main_C_FullBody::FullBody_0' has a wrong offset!");

// Function Main.Main_C.GetAbilityAnimLayer
// 0x0010 (0x0010 - 0x0000)
struct Main_C_GetAbilityAnimLayer final
{
public:
	class UClass*                                 Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UAnimInstance>              CallFunc_GetCurrentAnimLayer_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(Main_C_GetAbilityAnimLayer) == 0x000008, "Wrong alignment on Main_C_GetAbilityAnimLayer");
static_assert(sizeof(Main_C_GetAbilityAnimLayer) == 0x000010, "Wrong size on Main_C_GetAbilityAnimLayer");
static_assert(offsetof(Main_C_GetAbilityAnimLayer, Ret) == 0x000000, "Member 'Main_C_GetAbilityAnimLayer::Ret' has a wrong offset!");
static_assert(offsetof(Main_C_GetAbilityAnimLayer, CallFunc_GetCurrentAnimLayer_ReturnValue) == 0x000008, "Member 'Main_C_GetAbilityAnimLayer::CallFunc_GetCurrentAnimLayer_ReturnValue' has a wrong offset!");

// Function Main.Main_C.GetLocomotionAnimLayer
// 0x0018 (0x0018 - 0x0000)
struct Main_C_GetLocomotionAnimLayer final
{
public:
	class UClass*                                 Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UAnimInstance>              CallFunc_GetCurrentAnimLayer_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Main_C_GetLocomotionAnimLayer) == 0x000008, "Wrong alignment on Main_C_GetLocomotionAnimLayer");
static_assert(sizeof(Main_C_GetLocomotionAnimLayer) == 0x000018, "Wrong size on Main_C_GetLocomotionAnimLayer");
static_assert(offsetof(Main_C_GetLocomotionAnimLayer, Ret) == 0x000000, "Member 'Main_C_GetLocomotionAnimLayer::Ret' has a wrong offset!");
static_assert(offsetof(Main_C_GetLocomotionAnimLayer, CallFunc_GetCurrentAnimLayer_ReturnValue) == 0x000008, "Member 'Main_C_GetLocomotionAnimLayer::CallFunc_GetCurrentAnimLayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Main_C_GetLocomotionAnimLayer, CallFunc_IsValidClass_ReturnValue) == 0x000010, "Member 'Main_C_GetLocomotionAnimLayer::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");

// Function Main.Main_C.GetWireAnimLayer
// 0x0010 (0x0010 - 0x0000)
struct Main_C_GetWireAnimLayer final
{
public:
	class UClass*                                 Ret;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UAnimInstance>              CallFunc_GetCurrentAnimLayer_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(Main_C_GetWireAnimLayer) == 0x000008, "Wrong alignment on Main_C_GetWireAnimLayer");
static_assert(sizeof(Main_C_GetWireAnimLayer) == 0x000010, "Wrong size on Main_C_GetWireAnimLayer");
static_assert(offsetof(Main_C_GetWireAnimLayer, Ret) == 0x000000, "Member 'Main_C_GetWireAnimLayer::Ret' has a wrong offset!");
static_assert(offsetof(Main_C_GetWireAnimLayer, CallFunc_GetCurrentAnimLayer_ReturnValue) == 0x000008, "Member 'Main_C_GetWireAnimLayer::CallFunc_GetCurrentAnimLayer_ReturnValue' has a wrong offset!");

// Function Main.Main_C.LocomotionLayer
// 0x0010 (0x0010 - 0x0000)
struct Main_C_LocomotionLayer final
{
public:
	struct FPoseLink                              LocomotionLayer_0;                                 // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_LocomotionLayer) == 0x000008, "Wrong alignment on Main_C_LocomotionLayer");
static_assert(sizeof(Main_C_LocomotionLayer) == 0x000010, "Wrong size on Main_C_LocomotionLayer");
static_assert(offsetof(Main_C_LocomotionLayer, LocomotionLayer_0) == 0x000000, "Member 'Main_C_LocomotionLayer::LocomotionLayer_0' has a wrong offset!");

// Function Main.Main_C.Motion_M
// 0x0020 (0x0020 - 0x0000)
struct Main_C_Motion_M final
{
public:
	struct FPoseLink                              InPose_Motion_M;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Motion_M_0;                                        // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_Motion_M) == 0x000008, "Wrong alignment on Main_C_Motion_M");
static_assert(sizeof(Main_C_Motion_M) == 0x000020, "Wrong size on Main_C_Motion_M");
static_assert(offsetof(Main_C_Motion_M, InPose_Motion_M) == 0x000000, "Member 'Main_C_Motion_M::InPose_Motion_M' has a wrong offset!");
static_assert(offsetof(Main_C_Motion_M, Motion_M_0) == 0x000010, "Member 'Main_C_Motion_M::Motion_M_0' has a wrong offset!");

// Function Main.Main_C.SpecificationLayer
// 0x0020 (0x0020 - 0x0000)
struct Main_C_SpecificationLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              SpecificationLayer_0;                              // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_SpecificationLayer) == 0x000008, "Wrong alignment on Main_C_SpecificationLayer");
static_assert(sizeof(Main_C_SpecificationLayer) == 0x000020, "Wrong size on Main_C_SpecificationLayer");
static_assert(offsetof(Main_C_SpecificationLayer, InPose) == 0x000000, "Member 'Main_C_SpecificationLayer::InPose' has a wrong offset!");
static_assert(offsetof(Main_C_SpecificationLayer, SpecificationLayer_0) == 0x000010, "Member 'Main_C_SpecificationLayer::SpecificationLayer_0' has a wrong offset!");

// Function Main.Main_C.UpperBody_L
// 0x0020 (0x0020 - 0x0000)
struct Main_C_UpperBody_L final
{
public:
	struct FPoseLink                              InPose_UpperBody_L;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              UpperBody_L_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_UpperBody_L) == 0x000008, "Wrong alignment on Main_C_UpperBody_L");
static_assert(sizeof(Main_C_UpperBody_L) == 0x000020, "Wrong size on Main_C_UpperBody_L");
static_assert(offsetof(Main_C_UpperBody_L, InPose_UpperBody_L) == 0x000000, "Member 'Main_C_UpperBody_L::InPose_UpperBody_L' has a wrong offset!");
static_assert(offsetof(Main_C_UpperBody_L, UpperBody_L_0) == 0x000010, "Member 'Main_C_UpperBody_L::UpperBody_L_0' has a wrong offset!");

// Function Main.Main_C.UpperBody_L_Additive
// 0x0020 (0x0020 - 0x0000)
struct Main_C_UpperBody_L_Additive final
{
public:
	struct FPoseLink                              InPose_UpperBody_L_Additive;                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              UpperBody_L_Additive_0;                            // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_UpperBody_L_Additive) == 0x000008, "Wrong alignment on Main_C_UpperBody_L_Additive");
static_assert(sizeof(Main_C_UpperBody_L_Additive) == 0x000020, "Wrong size on Main_C_UpperBody_L_Additive");
static_assert(offsetof(Main_C_UpperBody_L_Additive, InPose_UpperBody_L_Additive) == 0x000000, "Member 'Main_C_UpperBody_L_Additive::InPose_UpperBody_L_Additive' has a wrong offset!");
static_assert(offsetof(Main_C_UpperBody_L_Additive, UpperBody_L_Additive_0) == 0x000010, "Member 'Main_C_UpperBody_L_Additive::UpperBody_L_Additive_0' has a wrong offset!");

// Function Main.Main_C.UpperBody_U
// 0x0020 (0x0020 - 0x0000)
struct Main_C_UpperBody_U final
{
public:
	struct FPoseLink                              InPose_UpperBody_U;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              UpperBody_U_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_UpperBody_U) == 0x000008, "Wrong alignment on Main_C_UpperBody_U");
static_assert(sizeof(Main_C_UpperBody_U) == 0x000020, "Wrong size on Main_C_UpperBody_U");
static_assert(offsetof(Main_C_UpperBody_U, InPose_UpperBody_U) == 0x000000, "Member 'Main_C_UpperBody_U::InPose_UpperBody_U' has a wrong offset!");
static_assert(offsetof(Main_C_UpperBody_U, UpperBody_U_0) == 0x000010, "Member 'Main_C_UpperBody_U::UpperBody_U_0' has a wrong offset!");

// Function Main.Main_C.UpperBody_U_R
// 0x0020 (0x0020 - 0x0000)
struct Main_C_UpperBody_U_R final
{
public:
	struct FPoseLink                              InPose_UpperBody_U_R;                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              UpperBody_U_R_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_UpperBody_U_R) == 0x000008, "Wrong alignment on Main_C_UpperBody_U_R");
static_assert(sizeof(Main_C_UpperBody_U_R) == 0x000020, "Wrong size on Main_C_UpperBody_U_R");
static_assert(offsetof(Main_C_UpperBody_U_R, InPose_UpperBody_U_R) == 0x000000, "Member 'Main_C_UpperBody_U_R::InPose_UpperBody_U_R' has a wrong offset!");
static_assert(offsetof(Main_C_UpperBody_U_R, UpperBody_U_R_0) == 0x000010, "Member 'Main_C_UpperBody_U_R::UpperBody_U_R_0' has a wrong offset!");

// Function Main.Main_C.UpperBodyLayer
// 0x0020 (0x0020 - 0x0000)
struct Main_C_UpperBodyLayer final
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              UpperBodyLayer_0;                                  // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_UpperBodyLayer) == 0x000008, "Wrong alignment on Main_C_UpperBodyLayer");
static_assert(sizeof(Main_C_UpperBodyLayer) == 0x000020, "Wrong size on Main_C_UpperBodyLayer");
static_assert(offsetof(Main_C_UpperBodyLayer, InputPose) == 0x000000, "Member 'Main_C_UpperBodyLayer::InputPose' has a wrong offset!");
static_assert(offsetof(Main_C_UpperBodyLayer, UpperBodyLayer_0) == 0x000010, "Member 'Main_C_UpperBodyLayer::UpperBodyLayer_0' has a wrong offset!");

// Function Main.Main_C.WireLayer
// 0x0020 (0x0020 - 0x0000)
struct Main_C_WireLayer final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              WireLayer_0;                                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Main_C_WireLayer) == 0x000008, "Wrong alignment on Main_C_WireLayer");
static_assert(sizeof(Main_C_WireLayer) == 0x000020, "Wrong size on Main_C_WireLayer");
static_assert(offsetof(Main_C_WireLayer, InPose) == 0x000000, "Member 'Main_C_WireLayer::InPose' has a wrong offset!");
static_assert(offsetof(Main_C_WireLayer, WireLayer_0) == 0x000010, "Member 'Main_C_WireLayer::WireLayer_0' has a wrong offset!");

}

