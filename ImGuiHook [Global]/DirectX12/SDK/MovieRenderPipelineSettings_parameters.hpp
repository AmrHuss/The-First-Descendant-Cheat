#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieRenderPipelineSettings

#include "Basic.hpp"

#include "MovieRenderPipelineSettings_structs.hpp"


namespace SDK::Params
{

// Function MovieRenderPipelineSettings.MoviePipelineBurnInWidget.OnOutputFrameStarted
// 0x0008 (0x0008 - 0x0000)
struct MoviePipelineBurnInWidget_OnOutputFrameStarted final
{
public:
	class UMoviePipeline*                         ForPipeline;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineBurnInWidget_OnOutputFrameStarted) == 0x000008, "Wrong alignment on MoviePipelineBurnInWidget_OnOutputFrameStarted");
static_assert(sizeof(MoviePipelineBurnInWidget_OnOutputFrameStarted) == 0x000008, "Wrong size on MoviePipelineBurnInWidget_OnOutputFrameStarted");
static_assert(offsetof(MoviePipelineBurnInWidget_OnOutputFrameStarted, ForPipeline) == 0x000000, "Member 'MoviePipelineBurnInWidget_OnOutputFrameStarted::ForPipeline' has a wrong offset!");

// Function MovieRenderPipelineSettings.MoviePipelineConsoleVariableSetting.AddConsoleVariable
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineConsoleVariableSetting_AddConsoleVariable final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineConsoleVariableSetting_AddConsoleVariable) == 0x000008, "Wrong alignment on MoviePipelineConsoleVariableSetting_AddConsoleVariable");
static_assert(sizeof(MoviePipelineConsoleVariableSetting_AddConsoleVariable) == 0x000018, "Wrong size on MoviePipelineConsoleVariableSetting_AddConsoleVariable");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_AddConsoleVariable, Name_0) == 0x000000, "Member 'MoviePipelineConsoleVariableSetting_AddConsoleVariable::Name_0' has a wrong offset!");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_AddConsoleVariable, Value) == 0x000010, "Member 'MoviePipelineConsoleVariableSetting_AddConsoleVariable::Value' has a wrong offset!");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_AddConsoleVariable, ReturnValue) == 0x000014, "Member 'MoviePipelineConsoleVariableSetting_AddConsoleVariable::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineSettings.MoviePipelineConsoleVariableSetting.AddOrUpdateConsoleVariable
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable) == 0x000008, "Wrong alignment on MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable");
static_assert(sizeof(MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable) == 0x000018, "Wrong size on MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable, Name_0) == 0x000000, "Member 'MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable::Name_0' has a wrong offset!");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable, Value) == 0x000010, "Member 'MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable::Value' has a wrong offset!");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable, ReturnValue) == 0x000014, "Member 'MoviePipelineConsoleVariableSetting_AddOrUpdateConsoleVariable::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineSettings.MoviePipelineConsoleVariableSetting.RemoveConsoleVariable
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineConsoleVariableSetting_RemoveConsoleVariable final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveAllInstances;                               // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineConsoleVariableSetting_RemoveConsoleVariable) == 0x000008, "Wrong alignment on MoviePipelineConsoleVariableSetting_RemoveConsoleVariable");
static_assert(sizeof(MoviePipelineConsoleVariableSetting_RemoveConsoleVariable) == 0x000018, "Wrong size on MoviePipelineConsoleVariableSetting_RemoveConsoleVariable");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_RemoveConsoleVariable, Name_0) == 0x000000, "Member 'MoviePipelineConsoleVariableSetting_RemoveConsoleVariable::Name_0' has a wrong offset!");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_RemoveConsoleVariable, bRemoveAllInstances) == 0x000010, "Member 'MoviePipelineConsoleVariableSetting_RemoveConsoleVariable::bRemoveAllInstances' has a wrong offset!");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_RemoveConsoleVariable, ReturnValue) == 0x000011, "Member 'MoviePipelineConsoleVariableSetting_RemoveConsoleVariable::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineSettings.MoviePipelineConsoleVariableSetting.UpdateConsoleVariableEnableState
// 0x0018 (0x0018 - 0x0000)
struct MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState) == 0x000008, "Wrong alignment on MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState");
static_assert(sizeof(MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState) == 0x000018, "Wrong size on MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState, Name_0) == 0x000000, "Member 'MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState::Name_0' has a wrong offset!");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState, bIsEnabled) == 0x000010, "Member 'MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState::bIsEnabled' has a wrong offset!");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState, ReturnValue) == 0x000011, "Member 'MoviePipelineConsoleVariableSetting_UpdateConsoleVariableEnableState::ReturnValue' has a wrong offset!");

// Function MovieRenderPipelineSettings.MoviePipelineConsoleVariableSetting.GetConsoleVariables
// 0x0010 (0x0010 - 0x0000)
struct MoviePipelineConsoleVariableSetting_GetConsoleVariables final
{
public:
	TArray<struct FMoviePipelineConsoleVariableEntry> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePipelineConsoleVariableSetting_GetConsoleVariables) == 0x000008, "Wrong alignment on MoviePipelineConsoleVariableSetting_GetConsoleVariables");
static_assert(sizeof(MoviePipelineConsoleVariableSetting_GetConsoleVariables) == 0x000010, "Wrong size on MoviePipelineConsoleVariableSetting_GetConsoleVariables");
static_assert(offsetof(MoviePipelineConsoleVariableSetting_GetConsoleVariables, ReturnValue) == 0x000000, "Member 'MoviePipelineConsoleVariableSetting_GetConsoleVariables::ReturnValue' has a wrong offset!");

}

