#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NexonPlatform

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class NexonPlatform.NXPToyCSInterface
// 0x0000 (0x0028 - 0x0028)
class UNXPToyCSInterface final : public UObject
{
public:
	void OpenNCSForNonMember() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NXPToyCSInterface">();
	}
	static class UNXPToyCSInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNXPToyCSInterface>();
	}
};
static_assert(alignof(UNXPToyCSInterface) == 0x000008, "Wrong alignment on UNXPToyCSInterface");
static_assert(sizeof(UNXPToyCSInterface) == 0x000028, "Wrong size on UNXPToyCSInterface");

// Class NexonPlatform.NXPToyPreferences
// 0x0210 (0x0238 - 0x0028)
class UNXPToyPreferences final : public UObject
{
public:
	TMap<class FString, class FString>            BannerDoNotShowToday;                              // 0x0028(0x0050)(Config, NativeAccessSpecifierPrivate)
	TArray<class FString>                         ConditionalBannerDoNotShowAnymore;                 // 0x0078(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TMap<class FString, class FString>            ConditionalBannerDoNotShowToday;                   // 0x0088(0x0050)(Config, NativeAccessSpecifierPrivate)
	TMap<class FString, int32>                    ConditionalBannerTotalDisplayCount;                // 0x00D8(0x0050)(Config, NativeAccessSpecifierPrivate)
	TMap<class FString, class FString>            ConditionalBannerLastDisplayDateTime;              // 0x0128(0x0050)(Config, NativeAccessSpecifierPrivate)
	TMap<class FString, class FString>            TodayDoNotShowToday;                               // 0x0178(0x0050)(Config, NativeAccessSpecifierPrivate)
	TMap<class FString, class FString>            EveTodayDoNotShowToday;                            // 0x01C8(0x0050)(Config, NativeAccessSpecifierPrivate)
	class FString                                 NXID;                                              // 0x0218(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NXPW;                                              // 0x0228(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NXPToyPreferences">();
	}
	static class UNXPToyPreferences* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNXPToyPreferences>();
	}
};
static_assert(alignof(UNXPToyPreferences) == 0x000008, "Wrong alignment on UNXPToyPreferences");
static_assert(sizeof(UNXPToyPreferences) == 0x000238, "Wrong size on UNXPToyPreferences");
static_assert(offsetof(UNXPToyPreferences, BannerDoNotShowToday) == 0x000028, "Member 'UNXPToyPreferences::BannerDoNotShowToday' has a wrong offset!");
static_assert(offsetof(UNXPToyPreferences, ConditionalBannerDoNotShowAnymore) == 0x000078, "Member 'UNXPToyPreferences::ConditionalBannerDoNotShowAnymore' has a wrong offset!");
static_assert(offsetof(UNXPToyPreferences, ConditionalBannerDoNotShowToday) == 0x000088, "Member 'UNXPToyPreferences::ConditionalBannerDoNotShowToday' has a wrong offset!");
static_assert(offsetof(UNXPToyPreferences, ConditionalBannerTotalDisplayCount) == 0x0000D8, "Member 'UNXPToyPreferences::ConditionalBannerTotalDisplayCount' has a wrong offset!");
static_assert(offsetof(UNXPToyPreferences, ConditionalBannerLastDisplayDateTime) == 0x000128, "Member 'UNXPToyPreferences::ConditionalBannerLastDisplayDateTime' has a wrong offset!");
static_assert(offsetof(UNXPToyPreferences, TodayDoNotShowToday) == 0x000178, "Member 'UNXPToyPreferences::TodayDoNotShowToday' has a wrong offset!");
static_assert(offsetof(UNXPToyPreferences, EveTodayDoNotShowToday) == 0x0001C8, "Member 'UNXPToyPreferences::EveTodayDoNotShowToday' has a wrong offset!");
static_assert(offsetof(UNXPToyPreferences, NXID) == 0x000218, "Member 'UNXPToyPreferences::NXID' has a wrong offset!");
static_assert(offsetof(UNXPToyPreferences, NXPW) == 0x000228, "Member 'UNXPToyPreferences::NXPW' has a wrong offset!");

// Class NexonPlatform.NXPEveInterface
// 0x0008 (0x0030 - 0x0028)
class UNXPEveInterface final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void billingPayment(const class FString& ProductId, const class FString& Callback_0) const;
	void billingRequestProducts(const TArray<class FString>& ProductIds, const class FString& Callback_0) const;
	void Callback(const class FString& ErrorCode, const class FString& Message) const;
	void DismissWebView(const class FString& Callback) const;
	void DoNotShowToday(const class FString& PlacementId, const class FString& State) const;
	void GetCountry(const class FString& Callback) const;
	void GetDisplayCutout(const class FString& Callback) const;
	void GetLocale(const class FString& Callback) const;
	void GetUserInfo(const class FString& Callback) const;
	void OpenLink(const class FString& EveLinkJsonString, const class FString& Callback) const;
	void SaveEveUserInfo(const class FString& UserInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NXPEveInterface">();
	}
	static class UNXPEveInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNXPEveInterface>();
	}
};
static_assert(alignof(UNXPEveInterface) == 0x000008, "Wrong alignment on UNXPEveInterface");
static_assert(sizeof(UNXPEveInterface) == 0x000030, "Wrong size on UNXPEveInterface");

}

