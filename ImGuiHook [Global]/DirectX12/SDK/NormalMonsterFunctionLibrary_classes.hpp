#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NormalMonsterFunctionLibrary

#include "Basic.hpp"

#include "M1_structs.hpp"
#include "Engine_classes.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NormalMonsterFunctionLibrary.NormalMonsterFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UNormalMonsterFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void SpawnMeleeHitFXBySurfaceType(class AActor* AttackingActor, class AActor* HitActor, class UM1DataHitEffects* HitEffectsData, class UM1DataSoundEffects* OptionalHitSoundData, class UObject* __WorldContext);
	static void SamplePivotLocationsOfSector(double MinRadius, double MaxRadius, int32 SampleCount, const struct FVector& Origin, class UObject* __WorldContext, TArray<struct FVector>* SampleResult);
	static void PlayAkSound_OnMonsterStartMeleeAttack(class AActor* OwnerActor, class UObject* __WorldContext);
	static void GetBeamTargetBoneLocation(class UM1Ability* Ability, class FName AttackBoneName, class UM1BeamComponent* BeamComponent, class UObject* __WorldContext, bool* bValid, struct FVector* Location);
	static void CalcRandomSpawnPointFromOrigin(class UObject* WorldContext, const struct FVector& OriginLocation, double Radius, double HeightLimit, class UObject* __WorldContext, struct FVector* RandomLocation, bool* bSuccess);
	static void ApplySeigeMeleeAttackHitOperations(class UM1Ability* Ability, TArray<class AActor*>& InDetectedActors, class UM1DataHitEffects* HitFXs, class UM1DataSoundEffects* SoundFXs, class UObject* __WorldContext);
	static void Apply_Melee_Attack_Hit_Operations(class UM1Ability* Ability, TArray<class AActor*>& HitActors, class UM1DataHitEffects* HitFXs, class UM1DataSoundEffects* OptionalSoundFXs, const struct FGameplayTagContainer& InTags, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NormalMonsterFunctionLibrary_C">();
	}
	static class UNormalMonsterFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNormalMonsterFunctionLibrary_C>();
	}
};
static_assert(alignof(UNormalMonsterFunctionLibrary_C) == 0x000008, "Wrong alignment on UNormalMonsterFunctionLibrary_C");
static_assert(sizeof(UNormalMonsterFunctionLibrary_C) == 0x000028, "Wrong size on UNormalMonsterFunctionLibrary_C");

}

