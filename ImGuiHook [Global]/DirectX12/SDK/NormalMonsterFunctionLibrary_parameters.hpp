#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NormalMonsterFunctionLibrary

#include "Basic.hpp"

#include "M1_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "M1Data_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function NormalMonsterFunctionLibrary.NormalMonsterFunctionLibrary_C.SpawnMeleeHitFXBySurfaceType
// 0x0098 (0x0098 - 0x0000)
struct NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType final
{
public:
	class AActor*                                 AttackingActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UM1DataHitEffects*                      HitEffectsData;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UM1DataSoundEffects*                    OptionalHitSoundData;                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              HitActorSurfaceType;                               // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EValidOutputPin                               CallFunc_FindAkComponentWithValid_OutputPins;      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UM1AkComponent*                         CallFunc_FindAkComponentWithValid_ReturnValue;     // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_GetSurfaceType_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         CallFunc_GetHitEffect_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType) == 0x000008, "Wrong alignment on NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType");
static_assert(sizeof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType) == 0x000098, "Wrong size on NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, AttackingActor) == 0x000000, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::AttackingActor' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, HitActor) == 0x000008, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::HitActor' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, HitEffectsData) == 0x000010, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::HitEffectsData' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, OptionalHitSoundData) == 0x000018, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::OptionalHitSoundData' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, __WorldContext) == 0x000020, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::__WorldContext' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, HitActorSurfaceType) == 0x000028, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::HitActorSurfaceType' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_IsDedicatedServer_ReturnValue) == 0x000029, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_FindAkComponentWithValid_OutputPins) == 0x00002A, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_FindAkComponentWithValid_OutputPins' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_FindAkComponentWithValid_ReturnValue) == 0x000030, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_FindAkComponentWithValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, K2Node_SwitchEnum_CmpSuccess) == 0x000039, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00003C, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_GetSurfaceType_ReturnValue) == 0x000048, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_GetSurfaceType_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_GetHitEffect_ReturnValue) == 0x000050, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_GetHitEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00005C, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000068, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000074, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000080, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x000090, "Member 'NormalMonsterFunctionLibrary_C_SpawnMeleeHitFXBySurfaceType::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");

// Function NormalMonsterFunctionLibrary.NormalMonsterFunctionLibrary_C.SamplePivotLocationsOfSector
// 0x00F8 (0x00F8 - 0x0000)
struct NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector final
{
public:
	double                                        MinRadius;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxRadius;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SampleCount;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Origin;                                            // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        SampleResult;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<struct FVector>                        Result;                                            // 0x0038(0x0010)(Edit, BlueprintVisible)
	double                                        RotateOffset;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCount;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Forward_ReturnValue;               // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateDirectionHorizontal_ReturnValue;    // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RotateDirectionHorizontal_InRotationAngle_ImplicitCast; // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector) == 0x000008, "Wrong alignment on NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector");
static_assert(sizeof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector) == 0x0000F8, "Wrong size on NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, MinRadius) == 0x000000, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::MinRadius' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, MaxRadius) == 0x000008, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::MaxRadius' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, SampleCount) == 0x000010, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::SampleCount' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, Origin) == 0x000014, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::Origin' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, __WorldContext) == 0x000020, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::__WorldContext' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, SampleResult) == 0x000028, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::SampleResult' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, Result) == 0x000038, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::Result' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, RotateOffset) == 0x000048, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::RotateOffset' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CurrentCount) == 0x000050, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CurrentCount' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000054, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000060, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, Temp_int_Variable) == 0x000068, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000070, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000078, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000080, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000088, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Vector_Forward_ReturnValue) == 0x000090, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Vector_Forward_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x00009C, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000A8, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Divide_VectorVector_ReturnValue) == 0x0000B4, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_RotateDirectionHorizontal_ReturnValue) == 0x0000C0, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_RotateDirectionHorizontal_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000CC, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D8, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Add_IntInt_ReturnValue) == 0x0000E4, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Array_Add_ReturnValue) == 0x0000E8, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_Less_IntInt_ReturnValue) == 0x0000EC, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector, CallFunc_RotateDirectionHorizontal_InRotationAngle_ImplicitCast) == 0x0000F0, "Member 'NormalMonsterFunctionLibrary_C_SamplePivotLocationsOfSector::CallFunc_RotateDirectionHorizontal_InRotationAngle_ImplicitCast' has a wrong offset!");

// Function NormalMonsterFunctionLibrary.NormalMonsterFunctionLibrary_C.PlayAkSound_OnMonsterStartMeleeAttack
// 0x0028 (0x0028 - 0x0000)
struct NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EValidOutputPin                               CallFunc_FindAkComponentWithValid_OutputPins;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UM1AkComponent*                         CallFunc_FindAkComponentWithValid_ReturnValue;     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack) == 0x000008, "Wrong alignment on NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack");
static_assert(sizeof(NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack) == 0x000028, "Wrong size on NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack, OwnerActor) == 0x000000, "Member 'NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack::OwnerActor' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack, __WorldContext) == 0x000008, "Member 'NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack::__WorldContext' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack, CallFunc_FindAkComponentWithValid_OutputPins) == 0x000010, "Member 'NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack::CallFunc_FindAkComponentWithValid_OutputPins' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack, CallFunc_FindAkComponentWithValid_ReturnValue) == 0x000018, "Member 'NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack::CallFunc_FindAkComponentWithValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'NormalMonsterFunctionLibrary_C_PlayAkSound_OnMonsterStartMeleeAttack::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function NormalMonsterFunctionLibrary.NormalMonsterFunctionLibrary_C.GetBeamTargetBoneLocation
// 0x0040 (0x0040 - 0x0000)
struct NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation final
{
public:
	class UM1Ability*                             Ability;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttackBoneName;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UM1BeamComponent*                       BeamComponent;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bValid;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAttackBoneLocation_ReturnValue;        // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsZero_ReturnValue;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation) == 0x000008, "Wrong alignment on NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation");
static_assert(sizeof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation) == 0x000040, "Wrong size on NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation, Ability) == 0x000000, "Member 'NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation::Ability' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation, AttackBoneName) == 0x000008, "Member 'NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation::AttackBoneName' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation, BeamComponent) == 0x000010, "Member 'NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation::BeamComponent' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation, __WorldContext) == 0x000018, "Member 'NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation, bValid) == 0x000020, "Member 'NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation::bValid' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation, Location) == 0x000024, "Member 'NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation::Location' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation, CallFunc_GetAttackBoneLocation_ReturnValue) == 0x000030, "Member 'NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation::CallFunc_GetAttackBoneLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation, CallFunc_Vector_IsZero_ReturnValue) == 0x00003C, "Member 'NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation::CallFunc_Vector_IsZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation, CallFunc_Not_PreBool_ReturnValue) == 0x00003D, "Member 'NormalMonsterFunctionLibrary_C_GetBeamTargetBoneLocation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function NormalMonsterFunctionLibrary.NormalMonsterFunctionLibrary_C.CalcRandomSpawnPointFromOrigin
// 0x00E0 (0x00E0 - 0x0000)
struct NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginLocation;                                    // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Radius;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HeightLimit;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RandomLocation;                                    // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxHeightLimit;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinHeightLimit;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLoopCount;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxLoopCount;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseHeightLimit;                                   // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomLocationInNavigableRadius_RandomLocation; // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomLocationInNavigableRadius_ReturnValue; // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_1;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetRandomLocationInNavigableRadius_RandomLocation_1; // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomLocationInNavigableRadius_ReturnValue_1; // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetRandomLocationInNavigableRadius_Radius_ImplicitCast; // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetRandomLocationInNavigableRadius_Radius_ImplicitCast_1; // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin) == 0x000008, "Wrong alignment on NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin");
static_assert(sizeof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin) == 0x0000E0, "Wrong size on NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, WorldContext) == 0x000000, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::WorldContext' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, OriginLocation) == 0x000008, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::OriginLocation' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, Radius) == 0x000018, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::Radius' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, HeightLimit) == 0x000020, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::HeightLimit' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, __WorldContext) == 0x000028, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::__WorldContext' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, RandomLocation) == 0x000030, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::RandomLocation' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, bSuccess) == 0x00003C, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::bSuccess' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, MaxHeightLimit) == 0x000040, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::MaxHeightLimit' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, MinHeightLimit) == 0x000048, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::MinHeightLimit' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CurrentLoopCount) == 0x000050, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CurrentLoopCount' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, MaxLoopCount) == 0x000054, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::MaxLoopCount' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, bUseHeightLimit) == 0x000058, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::bUseHeightLimit' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, Temp_int_Variable) == 0x00005C, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000060, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_BreakVector_X) == 0x000070, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_BreakVector_Y) == 0x000078, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_BreakVector_Z) == 0x000080, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000088, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000090, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_K2_GetRandomLocationInNavigableRadius_RandomLocation) == 0x000098, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_K2_GetRandomLocationInNavigableRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_K2_GetRandomLocationInNavigableRadius_ReturnValue) == 0x0000A4, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_K2_GetRandomLocationInNavigableRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_BreakVector_X_1) == 0x0000A8, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_BreakVector_Y_1) == 0x0000B0, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_BreakVector_Z_1) == 0x0000B8, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_InRange_FloatFloat_ReturnValue) == 0x0000C0, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_K2_GetRandomLocationInNavigableRadius_RandomLocation_1) == 0x0000C4, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_K2_GetRandomLocationInNavigableRadius_RandomLocation_1' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_K2_GetRandomLocationInNavigableRadius_ReturnValue_1) == 0x0000D0, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_K2_GetRandomLocationInNavigableRadius_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_K2_GetRandomLocationInNavigableRadius_Radius_ImplicitCast) == 0x0000D4, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_K2_GetRandomLocationInNavigableRadius_Radius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin, CallFunc_K2_GetRandomLocationInNavigableRadius_Radius_ImplicitCast_1) == 0x0000D8, "Member 'NormalMonsterFunctionLibrary_C_CalcRandomSpawnPointFromOrigin::CallFunc_K2_GetRandomLocationInNavigableRadius_Radius_ImplicitCast_1' has a wrong offset!");

// Function NormalMonsterFunctionLibrary.NormalMonsterFunctionLibrary_C.ApplySeigeMeleeAttackHitOperations
// 0x0080 (0x0080 - 0x0000)
struct NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations final
{
public:
	class UM1Ability*                             Ability;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         InDetectedActors;                                  // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UM1DataHitEffects*                      HitFXs;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UM1DataSoundEffects*                    SoundFXs;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         NonMissionActor;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AActor*>                         MissionActor;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0050(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMatchedActorByFindTargetQueryTag_ReturnValue; // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations) == 0x000008, "Wrong alignment on NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations");
static_assert(sizeof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations) == 0x000080, "Wrong size on NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, Ability) == 0x000000, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::Ability' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, InDetectedActors) == 0x000008, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::InDetectedActors' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, HitFXs) == 0x000018, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::HitFXs' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, SoundFXs) == 0x000020, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::SoundFXs' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, __WorldContext) == 0x000028, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::__WorldContext' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, NonMissionActor) == 0x000030, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::NonMissionActor' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, MissionActor) == 0x000040, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::MissionActor' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, Temp_struct_Variable) == 0x000050, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, CallFunc_Array_Get_Item) == 0x000060, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, CallFunc_IsMatchedActorByFindTargetQueryTag_ReturnValue) == 0x000068, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::CallFunc_IsMatchedActorByFindTargetQueryTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, CallFunc_Array_Add_ReturnValue) == 0x000078, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations, CallFunc_Array_Add_ReturnValue_1) == 0x00007C, "Member 'NormalMonsterFunctionLibrary_C_ApplySeigeMeleeAttackHitOperations::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function NormalMonsterFunctionLibrary.NormalMonsterFunctionLibrary_C.Apply Melee Attack Hit Operations
// 0x00E8 (0x00E8 - 0x0000)
struct NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations final
{
public:
	class UM1Ability*                             Ability;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HitActors;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UM1DataHitEffects*                      HitFXs;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UM1DataSoundEffects*                    OptionalSoundFXs;                                  // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  InTags;                                            // 0x0028(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UObject*                                __WorldContext;                                    // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwnerActor_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IM1AbilityBase>        CallFunc_BP_ExecuteOperationsToTargetByTag_self_CastInput; // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FM1TaggedAbilityParamData>      Temp_struct_Variable;                              // 0x0088(0x0010)(ConstParm, ReferenceParm)
	TArray<class FName>                           Temp_name_Variable;                                // 0x0098(0x0010)(ConstParm, ReferenceParm)
	TScriptInterface<class IM1AbilityBase>        CallFunc_BP_MakeForwardingContext_self_CastInput;  // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FM1AbilityContextHandle                CallFunc_BP_MakeForwardingContext_ReturnValue;     // 0x00B8(0x0010)()
	TScriptInterface<class IM1AbilityBase>        CallFunc_InvokeFirstStatusEffectToTargetByTag_self_CastInput; // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FM1AbilityId                           CallFunc_InvokeFirstStatusEffectToTargetByTag_ReturnValue; // 0x00D8(0x0010)(HasGetValueTypeHash)
};
static_assert(alignof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations) == 0x000008, "Wrong alignment on NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations");
static_assert(sizeof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations) == 0x0000E8, "Wrong size on NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, Ability) == 0x000000, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::Ability' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, HitActors) == 0x000008, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::HitActors' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, HitFXs) == 0x000018, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::HitFXs' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, OptionalSoundFXs) == 0x000020, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::OptionalSoundFXs' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, InTags) == 0x000028, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::InTags' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, __WorldContext) == 0x000048, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::__WorldContext' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_GetOwnerActor_ReturnValue) == 0x000058, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_GetOwnerActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, Temp_int_Array_Index_Variable) == 0x000060, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_Array_Get_Item) == 0x000068, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_BP_ExecuteOperationsToTargetByTag_self_CastInput) == 0x000070, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_BP_ExecuteOperationsToTargetByTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, Temp_struct_Variable) == 0x000088, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, Temp_name_Variable) == 0x000098, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_BP_MakeForwardingContext_self_CastInput) == 0x0000A8, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_BP_MakeForwardingContext_self_CastInput' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_BP_MakeForwardingContext_ReturnValue) == 0x0000B8, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_BP_MakeForwardingContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_InvokeFirstStatusEffectToTargetByTag_self_CastInput) == 0x0000C8, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_InvokeFirstStatusEffectToTargetByTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations, CallFunc_InvokeFirstStatusEffectToTargetByTag_ReturnValue) == 0x0000D8, "Member 'NormalMonsterFunctionLibrary_C_Apply_Melee_Attack_Hit_Operations::CallFunc_InvokeFirstStatusEffectToTargetByTag_ReturnValue' has a wrong offset!");

}

