#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NormalMonster_AOE_Base

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NormalMonster_AOE_Base.NormalMonster_AOE_Base_C
// 0x00A8 (0x07F0 - 0x0748)
class ANormalMonster_AOE_Base_C : public AM1AbilityActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0748(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        ExplosionDecalDuration;                            // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExplosionDecalSize;                                // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExplosionDecalHeight;                              // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExplosionAOE;                                      // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_771[0x7];                                      // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ActivateDelay;                                     // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PersistantAOEDecalHeight;                          // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PersistantAOEDecalSize;                            // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PersistantAOEDuration;                             // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitInterval;                                       // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreActivateDecalSize;                              // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreActivateDecalHeight;                            // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ExplosionFXName;                                   // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ExplosionDecalName;                                // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PreActivateFXName;                                 // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PreActivateDecalName;                              // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PersistantAOEFXName;                               // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PersistantAOEDecalName;                            // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Collision;                                         // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   HitFXName;                                         // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SpawnPreActivateFX();
	void SpawnPersistantAOEFx();
	void SpawnHitFX(TArray<class AActor*>& Actor_Transform);
	void SpawnExplosionFX();
	void SpawnDecalFX(class FName FName, double Duration, double Size, double Height);
	void OnExplosion();
	void NetMultiSpawnHitFX(const TArray<class AActor*>& Overalpping_Actors);
	void InitalizeCollision();
	void FindExplosionOverlapTargets(TArray<class AActor*>* NewParam);
	void ExecuteUbergraph_NormalMonster_AOE_Base(int32 EntryPoint);
	void ExecuteIntervalHit(class AActor* OverlappingActor);
	void DeactivateAOE();
	void BP_OnPostSpawnAbilityActor();
	void ApplyIntervalHit();
	void ApplyExplosion();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NormalMonster_AOE_Base_C">();
	}
	static class ANormalMonster_AOE_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANormalMonster_AOE_Base_C>();
	}
};
static_assert(alignof(ANormalMonster_AOE_Base_C) == 0x000008, "Wrong alignment on ANormalMonster_AOE_Base_C");
static_assert(sizeof(ANormalMonster_AOE_Base_C) == 0x0007F0, "Wrong size on ANormalMonster_AOE_Base_C");
static_assert(offsetof(ANormalMonster_AOE_Base_C, UberGraphFrame) == 0x000748, "Member 'ANormalMonster_AOE_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, DefaultSceneRoot) == 0x000750, "Member 'ANormalMonster_AOE_Base_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, ExplosionDecalDuration) == 0x000758, "Member 'ANormalMonster_AOE_Base_C::ExplosionDecalDuration' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, ExplosionDecalSize) == 0x000760, "Member 'ANormalMonster_AOE_Base_C::ExplosionDecalSize' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, ExplosionDecalHeight) == 0x000768, "Member 'ANormalMonster_AOE_Base_C::ExplosionDecalHeight' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, ExplosionAOE) == 0x000770, "Member 'ANormalMonster_AOE_Base_C::ExplosionAOE' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, ActivateDelay) == 0x000778, "Member 'ANormalMonster_AOE_Base_C::ActivateDelay' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, PersistantAOEDecalHeight) == 0x000780, "Member 'ANormalMonster_AOE_Base_C::PersistantAOEDecalHeight' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, PersistantAOEDecalSize) == 0x000788, "Member 'ANormalMonster_AOE_Base_C::PersistantAOEDecalSize' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, PersistantAOEDuration) == 0x000790, "Member 'ANormalMonster_AOE_Base_C::PersistantAOEDuration' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, HitInterval) == 0x000798, "Member 'ANormalMonster_AOE_Base_C::HitInterval' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, PreActivateDecalSize) == 0x0007A0, "Member 'ANormalMonster_AOE_Base_C::PreActivateDecalSize' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, PreActivateDecalHeight) == 0x0007A8, "Member 'ANormalMonster_AOE_Base_C::PreActivateDecalHeight' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, ExplosionFXName) == 0x0007B0, "Member 'ANormalMonster_AOE_Base_C::ExplosionFXName' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, ExplosionDecalName) == 0x0007B8, "Member 'ANormalMonster_AOE_Base_C::ExplosionDecalName' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, PreActivateFXName) == 0x0007C0, "Member 'ANormalMonster_AOE_Base_C::PreActivateFXName' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, PreActivateDecalName) == 0x0007C8, "Member 'ANormalMonster_AOE_Base_C::PreActivateDecalName' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, PersistantAOEFXName) == 0x0007D0, "Member 'ANormalMonster_AOE_Base_C::PersistantAOEFXName' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, PersistantAOEDecalName) == 0x0007D8, "Member 'ANormalMonster_AOE_Base_C::PersistantAOEDecalName' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, Collision) == 0x0007E0, "Member 'ANormalMonster_AOE_Base_C::Collision' has a wrong offset!");
static_assert(offsetof(ANormalMonster_AOE_Base_C, HitFXName) == 0x0007E8, "Member 'ANormalMonster_AOE_Base_C::HitFXName' has a wrong offset!");

}

