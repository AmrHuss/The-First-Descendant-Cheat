#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NormalMonster_GunFire

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "M1Data_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NormalMonster_GunFire.NormalMonster_GunFire_C
// 0x00D8 (0x0410 - 0x0338)
class UNormalMonster_GunFire_C : public UM1SkillAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   FireSocketName;                                    // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AxisSocketName;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttackBoneName;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpreadSize;                                        // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinCount;                                          // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCount;                                          // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LoopSectionName;                                   // 0x0364(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLoop;                                             // 0x036C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D[0x3];                                      // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Fireinterval;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FireIntervalMontage;                               // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  MontageEventTags;                                  // 0x0380(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  AbilityActorForwardingTags;                        // 0x03A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentCount;                                      // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExecutionCount;                                    // 0x03C4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProjectileDataRowName;                             // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHighAngle;                                        // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnCount;                                        // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EM1ProjectileAlignmentType                    SprayType;                                         // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SprayDegree;                                       // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NullAbleSpawnedLaser;                              // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        MaxHPRatio;                                        // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHomingTarget;                                     // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SprayRadiusRatio;                                  // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MontageStartSectionName;                           // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateLaserAimingEndPoint();
	void StartFireMontageIfNeed();
	void StartFireByLoopMontage();
	void StartFire();
	void RangeAttack(const struct FVector& InAimDir, const struct FVector& InFireLoc, const struct FGameplayTag& EventTag, const TArray<struct FM1AbilityParamData>& SpawnParams);
	void ProcessMontageEvent(const struct FGameplayTag& EventTag);
	void OnUpdate_D050542F42990794198EF99E03A0540C(float DeltaTime);
	void OnRep_ExecutionCount();
	void OnFinish_63F8616440DA4F24399FEBB1ED659067();
	void OnEventReceived_0B33F25B428CB272FA2BEAAC519AF468(const struct FM1AbilityEvent& Event);
	void OnEventReceived_087384A34D937E37C5A1C2860402BA8A(const struct FM1AbilityEvent& Event);
	void OnCompletedFireMontage();
	void OnCompleted_0B33F25B428CB272FA2BEAAC519AF468(const struct FM1AbilityEvent& Event);
	void OnCompleted_087384A34D937E37C5A1C2860402BA8A(const struct FM1AbilityEvent& Event);
	void OnBlendOutFireMontage();
	void OnBlendOut_0B33F25B428CB272FA2BEAAC519AF468(const struct FM1AbilityEvent& Event);
	void OnBlendOut_087384A34D937E37C5A1C2860402BA8A(const struct FM1AbilityEvent& Event);
	void OnAbilityActorSpawned(class AM1AbilityActor* SpawnedAbilityActor);
	void MakeTargetInfo(struct FM1AbilityTargetInfoHandle* TargetInfo);
	void LaserAimingDeactivate();
	void LaserAimingActivate();
	void IsNonLoop(bool* bNonLoop);
	void GunFireByType(const struct FGameplayTag& EventTag);
	void ExecuteUbergraph_NormalMonster_GunFire(int32 EntryPoint);
	void BP_OnActivated();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NormalMonster_GunFire_C">();
	}
	static class UNormalMonster_GunFire_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNormalMonster_GunFire_C>();
	}
};
static_assert(alignof(UNormalMonster_GunFire_C) == 0x000008, "Wrong alignment on UNormalMonster_GunFire_C");
static_assert(sizeof(UNormalMonster_GunFire_C) == 0x000410, "Wrong size on UNormalMonster_GunFire_C");
static_assert(offsetof(UNormalMonster_GunFire_C, UberGraphFrame) == 0x000338, "Member 'UNormalMonster_GunFire_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, FireSocketName) == 0x000340, "Member 'UNormalMonster_GunFire_C::FireSocketName' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, AxisSocketName) == 0x000348, "Member 'UNormalMonster_GunFire_C::AxisSocketName' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, AttackBoneName) == 0x000350, "Member 'UNormalMonster_GunFire_C::AttackBoneName' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, SpreadSize) == 0x000358, "Member 'UNormalMonster_GunFire_C::SpreadSize' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, MinCount) == 0x00035C, "Member 'UNormalMonster_GunFire_C::MinCount' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, MaxCount) == 0x000360, "Member 'UNormalMonster_GunFire_C::MaxCount' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, LoopSectionName) == 0x000364, "Member 'UNormalMonster_GunFire_C::LoopSectionName' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, bLoop) == 0x00036C, "Member 'UNormalMonster_GunFire_C::bLoop' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, Fireinterval) == 0x000370, "Member 'UNormalMonster_GunFire_C::Fireinterval' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, FireIntervalMontage) == 0x000378, "Member 'UNormalMonster_GunFire_C::FireIntervalMontage' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, MontageEventTags) == 0x000380, "Member 'UNormalMonster_GunFire_C::MontageEventTags' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, AbilityActorForwardingTags) == 0x0003A0, "Member 'UNormalMonster_GunFire_C::AbilityActorForwardingTags' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, CurrentCount) == 0x0003C0, "Member 'UNormalMonster_GunFire_C::CurrentCount' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, ExecutionCount) == 0x0003C4, "Member 'UNormalMonster_GunFire_C::ExecutionCount' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, ProjectileDataRowName) == 0x0003C8, "Member 'UNormalMonster_GunFire_C::ProjectileDataRowName' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, bHighAngle) == 0x0003D0, "Member 'UNormalMonster_GunFire_C::bHighAngle' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, SpawnCount) == 0x0003D4, "Member 'UNormalMonster_GunFire_C::SpawnCount' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, SprayType) == 0x0003D8, "Member 'UNormalMonster_GunFire_C::SprayType' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, SprayDegree) == 0x0003E0, "Member 'UNormalMonster_GunFire_C::SprayDegree' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, NullAbleSpawnedLaser) == 0x0003E8, "Member 'UNormalMonster_GunFire_C::NullAbleSpawnedLaser' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, MaxHPRatio) == 0x0003F0, "Member 'UNormalMonster_GunFire_C::MaxHPRatio' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, bHomingTarget) == 0x0003F8, "Member 'UNormalMonster_GunFire_C::bHomingTarget' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, SprayRadiusRatio) == 0x000400, "Member 'UNormalMonster_GunFire_C::SprayRadiusRatio' has a wrong offset!");
static_assert(offsetof(UNormalMonster_GunFire_C, MontageStartSectionName) == 0x000408, "Member 'UNormalMonster_GunFire_C::MontageStartSectionName' has a wrong offset!");

}

