#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NormalMonster_GunFire

#include "Basic.hpp"

#include "M1Data_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "M1_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.UpdateLaserAimingEndPoint
// 0x0150 (0x0150 - 0x0000)
struct NormalMonster_GunFire_C_UpdateLaserAimingEndPoint final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetAttackBoneLocation_ReturnValue;        // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceTerrain_OutHit;                  // 0x001C(0x009C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceTerrain_ReturnValue;             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB[0x1];                                       // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0108(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_UpdateLaserAimingEndPoint");
static_assert(sizeof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint) == 0x000150, "Wrong size on NormalMonster_GunFire_C_UpdateLaserAimingEndPoint");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_GetAttackBoneLocation_ReturnValue) == 0x000010, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_GetAttackBoneLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_LineTraceTerrain_OutHit) == 0x00001C, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_LineTraceTerrain_OutHit' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_LineTraceTerrain_ReturnValue) == 0x0000B8, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_LineTraceTerrain_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B9, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000BA, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_Time) == 0x0000BC, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_Distance) == 0x0000C0, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_Location) == 0x0000C4, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_ImpactPoint) == 0x0000D0, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_Normal) == 0x0000DC, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E8, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_PhysMat) == 0x0000F8, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_HitActor) == 0x000100, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_HitComponent) == 0x000108, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_HitBoneName) == 0x000110, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_BoneName) == 0x000118, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_HitItem) == 0x000120, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_ElementIndex) == 0x000124, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_FaceIndex) == 0x000128, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_TraceStart) == 0x00012C, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_BreakHitResult_TraceEnd) == 0x000138, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_UpdateLaserAimingEndPoint, CallFunc_SelectVector_ReturnValue) == 0x000144, "Member 'NormalMonster_GunFire_C_UpdateLaserAimingEndPoint::CallFunc_SelectVector_ReturnValue' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.RangeAttack
// 0x0110 (0x0110 - 0x0000)
struct NormalMonster_GunFire_C_RangeAttack final
{
public:
	struct FVector                                InAimDir;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InFireLoc;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EventTag;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	TArray<struct FM1AbilityParamData>            SpawnParams;                                       // 0x0020(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FM1AbilityTargetInfoHandle             TargetInfoHandle;                                  // 0x0030(0x0020)(Edit, BlueprintVisible)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0060(0x0030)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetFirstActorFromTargetInfo_ReturnValue;  // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AbilityTargetInfoHandle             CallFunc_MakeTargetInfo_TargetInfo;                // 0x00A0(0x0020)()
	TArray<class FName>                           Temp_name_Variable;                                // 0x00C0(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FM1TaggedAbilityParamData>      Temp_struct_Variable;                              // 0x00D0(0x0010)(ConstParm, ReferenceParm)
	struct FM1AbilityContextHandle                CallFunc_BP_MakeForwardingContext_ReturnValue;     // 0x00E0(0x0010)()
	struct FM1AbilityContextHandle                CallFunc_AbilityContextSetTargetInfo_ReturnValue;  // 0x00F0(0x0010)()
	class AM1AbilityActor*                        CallFunc_SpawnAbilityActorDataRowName_ReturnValue; // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonster_GunFire_C_RangeAttack) == 0x000010, "Wrong alignment on NormalMonster_GunFire_C_RangeAttack");
static_assert(sizeof(NormalMonster_GunFire_C_RangeAttack) == 0x000110, "Wrong size on NormalMonster_GunFire_C_RangeAttack");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, InAimDir) == 0x000000, "Member 'NormalMonster_GunFire_C_RangeAttack::InAimDir' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, InFireLoc) == 0x00000C, "Member 'NormalMonster_GunFire_C_RangeAttack::InFireLoc' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, EventTag) == 0x000018, "Member 'NormalMonster_GunFire_C_RangeAttack::EventTag' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, SpawnParams) == 0x000020, "Member 'NormalMonster_GunFire_C_RangeAttack::SpawnParams' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, TargetInfoHandle) == 0x000030, "Member 'NormalMonster_GunFire_C_RangeAttack::TargetInfoHandle' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000050, "Member 'NormalMonster_GunFire_C_RangeAttack::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, CallFunc_MakeTransform_ReturnValue) == 0x000060, "Member 'NormalMonster_GunFire_C_RangeAttack::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, CallFunc_GetFirstActorFromTargetInfo_ReturnValue) == 0x000090, "Member 'NormalMonster_GunFire_C_RangeAttack::CallFunc_GetFirstActorFromTargetInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'NormalMonster_GunFire_C_RangeAttack::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, CallFunc_MakeTargetInfo_TargetInfo) == 0x0000A0, "Member 'NormalMonster_GunFire_C_RangeAttack::CallFunc_MakeTargetInfo_TargetInfo' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, Temp_name_Variable) == 0x0000C0, "Member 'NormalMonster_GunFire_C_RangeAttack::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, Temp_struct_Variable) == 0x0000D0, "Member 'NormalMonster_GunFire_C_RangeAttack::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, CallFunc_BP_MakeForwardingContext_ReturnValue) == 0x0000E0, "Member 'NormalMonster_GunFire_C_RangeAttack::CallFunc_BP_MakeForwardingContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, CallFunc_AbilityContextSetTargetInfo_ReturnValue) == 0x0000F0, "Member 'NormalMonster_GunFire_C_RangeAttack::CallFunc_AbilityContextSetTargetInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, CallFunc_SpawnAbilityActorDataRowName_ReturnValue) == 0x000100, "Member 'NormalMonster_GunFire_C_RangeAttack::CallFunc_SpawnAbilityActorDataRowName_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_RangeAttack, CallFunc_IsValid_ReturnValue_1) == 0x000108, "Member 'NormalMonster_GunFire_C_RangeAttack::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.ProcessMontageEvent
// 0x0030 (0x0030 - 0x0000)
struct NormalMonster_GunFire_C_ProcessMontageEvent final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FireLocation;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimWithSpread;                                     // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimVector;                                         // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonster_GunFire_C_ProcessMontageEvent) == 0x000004, "Wrong alignment on NormalMonster_GunFire_C_ProcessMontageEvent");
static_assert(sizeof(NormalMonster_GunFire_C_ProcessMontageEvent) == 0x000030, "Wrong size on NormalMonster_GunFire_C_ProcessMontageEvent");
static_assert(offsetof(NormalMonster_GunFire_C_ProcessMontageEvent, EventTag) == 0x000000, "Member 'NormalMonster_GunFire_C_ProcessMontageEvent::EventTag' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ProcessMontageEvent, FireLocation) == 0x000008, "Member 'NormalMonster_GunFire_C_ProcessMontageEvent::FireLocation' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ProcessMontageEvent, AimWithSpread) == 0x000014, "Member 'NormalMonster_GunFire_C_ProcessMontageEvent::AimWithSpread' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ProcessMontageEvent, AimVector) == 0x000020, "Member 'NormalMonster_GunFire_C_ProcessMontageEvent::AimVector' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ProcessMontageEvent, CallFunc_IsDedicatedServer_ReturnValue) == 0x00002C, "Member 'NormalMonster_GunFire_C_ProcessMontageEvent::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ProcessMontageEvent, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x00002D, "Member 'NormalMonster_GunFire_C_ProcessMontageEvent::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ProcessMontageEvent, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x00002E, "Member 'NormalMonster_GunFire_C_ProcessMontageEvent::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.OnUpdate_D050542F42990794198EF99E03A0540C
// 0x0004 (0x0004 - 0x0000)
struct NormalMonster_GunFire_C_OnUpdate_D050542F42990794198EF99E03A0540C final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonster_GunFire_C_OnUpdate_D050542F42990794198EF99E03A0540C) == 0x000004, "Wrong alignment on NormalMonster_GunFire_C_OnUpdate_D050542F42990794198EF99E03A0540C");
static_assert(sizeof(NormalMonster_GunFire_C_OnUpdate_D050542F42990794198EF99E03A0540C) == 0x000004, "Wrong size on NormalMonster_GunFire_C_OnUpdate_D050542F42990794198EF99E03A0540C");
static_assert(offsetof(NormalMonster_GunFire_C_OnUpdate_D050542F42990794198EF99E03A0540C, DeltaTime) == 0x000000, "Member 'NormalMonster_GunFire_C_OnUpdate_D050542F42990794198EF99E03A0540C::DeltaTime' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.OnEventReceived_0B33F25B428CB272FA2BEAAC519AF468
// 0x0040 (0x0040 - 0x0000)
struct NormalMonster_GunFire_C_OnEventReceived_0B33F25B428CB272FA2BEAAC519AF468 final
{
public:
	struct FM1AbilityEvent                        Event;                                             // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(NormalMonster_GunFire_C_OnEventReceived_0B33F25B428CB272FA2BEAAC519AF468) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_OnEventReceived_0B33F25B428CB272FA2BEAAC519AF468");
static_assert(sizeof(NormalMonster_GunFire_C_OnEventReceived_0B33F25B428CB272FA2BEAAC519AF468) == 0x000040, "Wrong size on NormalMonster_GunFire_C_OnEventReceived_0B33F25B428CB272FA2BEAAC519AF468");
static_assert(offsetof(NormalMonster_GunFire_C_OnEventReceived_0B33F25B428CB272FA2BEAAC519AF468, Event) == 0x000000, "Member 'NormalMonster_GunFire_C_OnEventReceived_0B33F25B428CB272FA2BEAAC519AF468::Event' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.OnEventReceived_087384A34D937E37C5A1C2860402BA8A
// 0x0040 (0x0040 - 0x0000)
struct NormalMonster_GunFire_C_OnEventReceived_087384A34D937E37C5A1C2860402BA8A final
{
public:
	struct FM1AbilityEvent                        Event;                                             // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(NormalMonster_GunFire_C_OnEventReceived_087384A34D937E37C5A1C2860402BA8A) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_OnEventReceived_087384A34D937E37C5A1C2860402BA8A");
static_assert(sizeof(NormalMonster_GunFire_C_OnEventReceived_087384A34D937E37C5A1C2860402BA8A) == 0x000040, "Wrong size on NormalMonster_GunFire_C_OnEventReceived_087384A34D937E37C5A1C2860402BA8A");
static_assert(offsetof(NormalMonster_GunFire_C_OnEventReceived_087384A34D937E37C5A1C2860402BA8A, Event) == 0x000000, "Member 'NormalMonster_GunFire_C_OnEventReceived_087384A34D937E37C5A1C2860402BA8A::Event' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.OnCompleted_0B33F25B428CB272FA2BEAAC519AF468
// 0x0040 (0x0040 - 0x0000)
struct NormalMonster_GunFire_C_OnCompleted_0B33F25B428CB272FA2BEAAC519AF468 final
{
public:
	struct FM1AbilityEvent                        Event;                                             // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(NormalMonster_GunFire_C_OnCompleted_0B33F25B428CB272FA2BEAAC519AF468) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_OnCompleted_0B33F25B428CB272FA2BEAAC519AF468");
static_assert(sizeof(NormalMonster_GunFire_C_OnCompleted_0B33F25B428CB272FA2BEAAC519AF468) == 0x000040, "Wrong size on NormalMonster_GunFire_C_OnCompleted_0B33F25B428CB272FA2BEAAC519AF468");
static_assert(offsetof(NormalMonster_GunFire_C_OnCompleted_0B33F25B428CB272FA2BEAAC519AF468, Event) == 0x000000, "Member 'NormalMonster_GunFire_C_OnCompleted_0B33F25B428CB272FA2BEAAC519AF468::Event' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.OnCompleted_087384A34D937E37C5A1C2860402BA8A
// 0x0040 (0x0040 - 0x0000)
struct NormalMonster_GunFire_C_OnCompleted_087384A34D937E37C5A1C2860402BA8A final
{
public:
	struct FM1AbilityEvent                        Event;                                             // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(NormalMonster_GunFire_C_OnCompleted_087384A34D937E37C5A1C2860402BA8A) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_OnCompleted_087384A34D937E37C5A1C2860402BA8A");
static_assert(sizeof(NormalMonster_GunFire_C_OnCompleted_087384A34D937E37C5A1C2860402BA8A) == 0x000040, "Wrong size on NormalMonster_GunFire_C_OnCompleted_087384A34D937E37C5A1C2860402BA8A");
static_assert(offsetof(NormalMonster_GunFire_C_OnCompleted_087384A34D937E37C5A1C2860402BA8A, Event) == 0x000000, "Member 'NormalMonster_GunFire_C_OnCompleted_087384A34D937E37C5A1C2860402BA8A::Event' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.OnBlendOut_0B33F25B428CB272FA2BEAAC519AF468
// 0x0040 (0x0040 - 0x0000)
struct NormalMonster_GunFire_C_OnBlendOut_0B33F25B428CB272FA2BEAAC519AF468 final
{
public:
	struct FM1AbilityEvent                        Event;                                             // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(NormalMonster_GunFire_C_OnBlendOut_0B33F25B428CB272FA2BEAAC519AF468) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_OnBlendOut_0B33F25B428CB272FA2BEAAC519AF468");
static_assert(sizeof(NormalMonster_GunFire_C_OnBlendOut_0B33F25B428CB272FA2BEAAC519AF468) == 0x000040, "Wrong size on NormalMonster_GunFire_C_OnBlendOut_0B33F25B428CB272FA2BEAAC519AF468");
static_assert(offsetof(NormalMonster_GunFire_C_OnBlendOut_0B33F25B428CB272FA2BEAAC519AF468, Event) == 0x000000, "Member 'NormalMonster_GunFire_C_OnBlendOut_0B33F25B428CB272FA2BEAAC519AF468::Event' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.OnBlendOut_087384A34D937E37C5A1C2860402BA8A
// 0x0040 (0x0040 - 0x0000)
struct NormalMonster_GunFire_C_OnBlendOut_087384A34D937E37C5A1C2860402BA8A final
{
public:
	struct FM1AbilityEvent                        Event;                                             // 0x0000(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(NormalMonster_GunFire_C_OnBlendOut_087384A34D937E37C5A1C2860402BA8A) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_OnBlendOut_087384A34D937E37C5A1C2860402BA8A");
static_assert(sizeof(NormalMonster_GunFire_C_OnBlendOut_087384A34D937E37C5A1C2860402BA8A) == 0x000040, "Wrong size on NormalMonster_GunFire_C_OnBlendOut_087384A34D937E37C5A1C2860402BA8A");
static_assert(offsetof(NormalMonster_GunFire_C_OnBlendOut_087384A34D937E37C5A1C2860402BA8A, Event) == 0x000000, "Member 'NormalMonster_GunFire_C_OnBlendOut_087384A34D937E37C5A1C2860402BA8A::Event' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.OnAbilityActorSpawned
// 0x0128 (0x0128 - 0x0000)
struct NormalMonster_GunFire_C_OnAbilityActorSpawned final
{
public:
	class AM1AbilityActor*                        SpawnedAbilityActor;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AM1AbilityProjectile*                   K2Node_DynamicCast_AsM1Ability_Projectile;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UM1StatComponent*                       CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AbilityContextHandle                CallFunc_GetAbilityContextHandle_ReturnValue;      // 0x0028(0x0010)(ConstParm)
	struct FM1AbilityOperationParam               CallFunc_MakeMaxHpOperationParam_Result;           // 0x0038(0x00B0)(ContainsInstancedReference)
	struct FM1AbilityTargetInfoHandle             CallFunc_AbilityContextGetTargetInfo_ReturnValue;  // 0x00E8(0x0020)()
	class AActor*                                 CallFunc_GetFirstActorFromTargetInfo_ReturnValue;  // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwnerActor_ReturnValue;                // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonster_GunFire_C_OnAbilityActorSpawned) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_OnAbilityActorSpawned");
static_assert(sizeof(NormalMonster_GunFire_C_OnAbilityActorSpawned) == 0x000128, "Wrong size on NormalMonster_GunFire_C_OnAbilityActorSpawned");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, SpawnedAbilityActor) == 0x000000, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::SpawnedAbilityActor' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, K2Node_DynamicCast_AsM1Ability_Projectile) == 0x000008, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::K2Node_DynamicCast_AsM1Ability_Projectile' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000011, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_GetAbilityContextHandle_ReturnValue) == 0x000028, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_GetAbilityContextHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_MakeMaxHpOperationParam_Result) == 0x000038, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_MakeMaxHpOperationParam_Result' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_AbilityContextGetTargetInfo_ReturnValue) == 0x0000E8, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_AbilityContextGetTargetInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_GetFirstActorFromTargetInfo_ReturnValue) == 0x000108, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_GetFirstActorFromTargetInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_GetOwnerActor_ReturnValue) == 0x000110, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_GetOwnerActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000118, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_IsValid_ReturnValue_1) == 0x000120, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_OnAbilityActorSpawned, CallFunc_HasAuthority_ReturnValue) == 0x000121, "Member 'NormalMonster_GunFire_C_OnAbilityActorSpawned::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.MakeTargetInfo
// 0x0050 (0x0050 - 0x0000)
struct NormalMonster_GunFire_C_MakeTargetInfo final
{
public:
	struct FM1AbilityTargetInfoHandle             TargetInfo;                                        // 0x0000(0x0020)(Parm, OutParm)
	struct FM1AbilityContextHandle                CallFunc_GetAbilityContextHandle_ReturnValue;      // 0x0020(0x0010)(ConstParm)
	struct FM1AbilityTargetInfoHandle             CallFunc_AbilityContextGetTargetInfo_ReturnValue;  // 0x0030(0x0020)()
};
static_assert(alignof(NormalMonster_GunFire_C_MakeTargetInfo) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_MakeTargetInfo");
static_assert(sizeof(NormalMonster_GunFire_C_MakeTargetInfo) == 0x000050, "Wrong size on NormalMonster_GunFire_C_MakeTargetInfo");
static_assert(offsetof(NormalMonster_GunFire_C_MakeTargetInfo, TargetInfo) == 0x000000, "Member 'NormalMonster_GunFire_C_MakeTargetInfo::TargetInfo' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_MakeTargetInfo, CallFunc_GetAbilityContextHandle_ReturnValue) == 0x000020, "Member 'NormalMonster_GunFire_C_MakeTargetInfo::CallFunc_GetAbilityContextHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_MakeTargetInfo, CallFunc_AbilityContextGetTargetInfo_ReturnValue) == 0x000030, "Member 'NormalMonster_GunFire_C_MakeTargetInfo::CallFunc_AbilityContextGetTargetInfo_ReturnValue' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.LaserAimingDeactivate
// 0x0001 (0x0001 - 0x0000)
struct NormalMonster_GunFire_C_LaserAimingDeactivate final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonster_GunFire_C_LaserAimingDeactivate) == 0x000001, "Wrong alignment on NormalMonster_GunFire_C_LaserAimingDeactivate");
static_assert(sizeof(NormalMonster_GunFire_C_LaserAimingDeactivate) == 0x000001, "Wrong size on NormalMonster_GunFire_C_LaserAimingDeactivate");
static_assert(offsetof(NormalMonster_GunFire_C_LaserAimingDeactivate, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'NormalMonster_GunFire_C_LaserAimingDeactivate::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.LaserAimingActivate
// 0x0030 (0x0030 - 0x0000)
struct NormalMonster_GunFire_C_LaserAimingActivate final
{
public:
	class FName                                   Temp_name_Variable;                                // 0x0000(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              CallFunc_SpawnFXsForAbility_ReturnValue;           // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonster_GunFire_C_LaserAimingActivate) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_LaserAimingActivate");
static_assert(sizeof(NormalMonster_GunFire_C_LaserAimingActivate) == 0x000030, "Wrong size on NormalMonster_GunFire_C_LaserAimingActivate");
static_assert(offsetof(NormalMonster_GunFire_C_LaserAimingActivate, Temp_name_Variable) == 0x000000, "Member 'NormalMonster_GunFire_C_LaserAimingActivate::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_LaserAimingActivate, CallFunc_Map_Contains_ReturnValue) == 0x000008, "Member 'NormalMonster_GunFire_C_LaserAimingActivate::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_LaserAimingActivate, CallFunc_SpawnFXsForAbility_ReturnValue) == 0x000010, "Member 'NormalMonster_GunFire_C_LaserAimingActivate::CallFunc_SpawnFXsForAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_LaserAimingActivate, CallFunc_Array_Get_Item) == 0x000020, "Member 'NormalMonster_GunFire_C_LaserAimingActivate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_LaserAimingActivate, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000028, "Member 'NormalMonster_GunFire_C_LaserAimingActivate::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.IsNonLoop
// 0x0004 (0x0004 - 0x0000)
struct NormalMonster_GunFire_C_IsNonLoop final
{
public:
	bool                                          bNonLoop;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonster_GunFire_C_IsNonLoop) == 0x000001, "Wrong alignment on NormalMonster_GunFire_C_IsNonLoop");
static_assert(sizeof(NormalMonster_GunFire_C_IsNonLoop) == 0x000004, "Wrong size on NormalMonster_GunFire_C_IsNonLoop");
static_assert(offsetof(NormalMonster_GunFire_C_IsNonLoop, bNonLoop) == 0x000000, "Member 'NormalMonster_GunFire_C_IsNonLoop::bNonLoop' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_IsNonLoop, CallFunc_Greater_IntInt_ReturnValue) == 0x000001, "Member 'NormalMonster_GunFire_C_IsNonLoop::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_IsNonLoop, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000002, "Member 'NormalMonster_GunFire_C_IsNonLoop::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_IsNonLoop, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'NormalMonster_GunFire_C_IsNonLoop::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.GunFireByType
// 0x01C8 (0x01C8 - 0x0000)
struct NormalMonster_GunFire_C_GunFireByType final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        SprayDirections;                                   // 0x0008(0x0010)(Edit, BlueprintVisible)
	struct FVector                                AimWithSpread;                                     // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimVector;                                         // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FireLocation;                                      // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetFirstTargetActor_ReturnValue;          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAbilityInstigator_ReturnValue;         // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetFirstTargetActor_ReturnValue_1;        // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance2D_ReturnValue;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwnerActor_ReturnValue;                // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcRandomPointInCircle_ReturnValue;      // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalculateVelocityCustomArc_ReturnValue;   // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FM1AbilityParamData                    CallFunc_AbilityContextMakeVectorParam_ReturnValue; // 0x00E0(0x0020)()
	TArray<struct FM1AbilityParamData>            K2Node_MakeArray_Array;                            // 0x0100(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FM1AbilityParamData>            K2Node_MakeArray_Array_1;                          // 0x0130(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector>                        CallFunc_CalculateSprayDirections_ReturnValue;     // 0x0140(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AbilityParamData                    CallFunc_AbilityContextMakeVectorParam_ReturnValue_1; // 0x0170(0x0020)()
	TArray<struct FM1AbilityParamData>            K2Node_MakeArray_Array_2;                          // 0x0190(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 CallFunc_GetOwnerActor_ReturnValue_1;              // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalculateVelocityCustomArc_ReturnValue_1; // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ApplyRandomSpread_ReturnValue;            // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcRandomPointInCircle_CircleRadius_ImplicitCast; // 0x01C0(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateSprayDirections_SprayDegree_ImplicitCast; // 0x01C4(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonster_GunFire_C_GunFireByType) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_GunFireByType");
static_assert(sizeof(NormalMonster_GunFire_C_GunFireByType) == 0x0001C8, "Wrong size on NormalMonster_GunFire_C_GunFireByType");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, EventTag) == 0x000000, "Member 'NormalMonster_GunFire_C_GunFireByType::EventTag' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, SprayDirections) == 0x000008, "Member 'NormalMonster_GunFire_C_GunFireByType::SprayDirections' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, AimWithSpread) == 0x000018, "Member 'NormalMonster_GunFire_C_GunFireByType::AimWithSpread' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, AimVector) == 0x000024, "Member 'NormalMonster_GunFire_C_GunFireByType::AimVector' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, FireLocation) == 0x000030, "Member 'NormalMonster_GunFire_C_GunFireByType::FireLocation' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00003C, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00003D, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_VSize_ReturnValue) == 0x000040, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x00004C, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000058, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000059, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_BooleanAND_ReturnValue) == 0x00005A, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'NormalMonster_GunFire_C_GunFireByType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000060, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_BooleanOR_ReturnValue) == 0x000061, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_GetFirstTargetActor_ReturnValue) == 0x000068, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_GetFirstTargetActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_BooleanAND_ReturnValue_1) == 0x000070, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000074, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_GetAbilityInstigator_ReturnValue) == 0x000080, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_GetAbilityInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000088, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_GetFirstTargetActor_ReturnValue_1) == 0x000098, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_GetFirstTargetActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0000A0, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Vector_Distance2D_ReturnValue) == 0x0000B0, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Vector_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_GetOwnerActor_ReturnValue) == 0x0000B8, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_GetOwnerActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_CalcRandomPointInCircle_ReturnValue) == 0x0000C8, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_CalcRandomPointInCircle_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_CalculateVelocityCustomArc_ReturnValue) == 0x0000D4, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_CalculateVelocityCustomArc_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_AbilityContextMakeVectorParam_ReturnValue) == 0x0000E0, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_AbilityContextMakeVectorParam_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, K2Node_MakeArray_Array) == 0x000100, "Member 'NormalMonster_GunFire_C_GunFireByType::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, Temp_int_Loop_Counter_Variable) == 0x000110, "Member 'NormalMonster_GunFire_C_GunFireByType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, Temp_int_Variable) == 0x000114, "Member 'NormalMonster_GunFire_C_GunFireByType::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000118, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Add_IntInt_ReturnValue) == 0x00011C, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Add_IntInt_ReturnValue_1) == 0x000120, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000124, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, K2Node_MakeArray_Array_1) == 0x000130, "Member 'NormalMonster_GunFire_C_GunFireByType::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_CalculateSprayDirections_ReturnValue) == 0x000140, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_CalculateSprayDirections_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Array_Get_Item) == 0x000150, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Array_Length_ReturnValue) == 0x00015C, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000160, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_Less_IntInt_ReturnValue) == 0x00016C, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_AbilityContextMakeVectorParam_ReturnValue_1) == 0x000170, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_AbilityContextMakeVectorParam_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, K2Node_MakeArray_Array_2) == 0x000190, "Member 'NormalMonster_GunFire_C_GunFireByType::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_GetOwnerActor_ReturnValue_1) == 0x0001A0, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_GetOwnerActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_CalculateVelocityCustomArc_ReturnValue_1) == 0x0001A8, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_CalculateVelocityCustomArc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_ApplyRandomSpread_ReturnValue) == 0x0001B4, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_ApplyRandomSpread_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_CalcRandomPointInCircle_CircleRadius_ImplicitCast) == 0x0001C0, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_CalcRandomPointInCircle_CircleRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_GunFireByType, CallFunc_CalculateSprayDirections_SprayDegree_ImplicitCast) == 0x0001C4, "Member 'NormalMonster_GunFire_C_GunFireByType::CallFunc_CalculateSprayDirections_SprayDegree_ImplicitCast' has a wrong offset!");

// Function NormalMonster_GunFire.NormalMonster_GunFire_C.ExecuteUbergraph_NormalMonster_GunFire
// 0x0328 (0x0328 - 0x0000)
struct NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FM1AbilityEvent                        K2Node_CustomEvent_Event_3;                        // 0x0008(0x0040)(ConstParm)
	struct FM1AbilityEvent                        Temp_struct_Variable;                              // 0x0048(0x0040)()
	TDelegate<void(float DeltaTime)>              K2Node_CreateDelegate_OutputDelegate;              // 0x0088(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DeltaTime;                      // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UM1AbilityTask_WaitTick*                CallFunc_WaitTick_ReturnValue;                     // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FM1AbilityEvent& Event)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x00AC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AbilityEvent                        K2Node_CustomEvent_Event_2;                        // 0x00C0(0x0040)(ConstParm)
	struct FM1AbilityEvent                        K2Node_CustomEvent_Event_1;                        // 0x0100(0x0040)(ConstParm)
	TDelegate<void(struct FM1AbilityEvent& Event)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0140(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FM1AbilityEvent                        K2Node_CustomEvent_Event;                          // 0x0150(0x0040)(ConstParm)
	TDelegate<void(struct FM1AbilityEvent& Event)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0190(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FM1AbilityEvent                        Temp_struct_Variable_1;                            // 0x01A0(0x0040)()
	class AActor*                                 CallFunc_GetOwnerActor_ReturnValue;                // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA[0x2];                                      // 0x01EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FM1AbilityEvent& Event)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x01EC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FM1AbilityEvent& Event)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x0200(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FM1AbilityEvent                        K2Node_CustomEvent_Event_4;                        // 0x0210(0x0040)(ConstParm)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UM1AbilityTask_WaitDelay*               CallFunc_WaitDelay_ReturnValue;                    // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UM1AbilityTask_PlayMontageAndWait*      CallFunc_PlayMontageAndWaitForEvent_ReturnValue;   // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FM1AbilityEvent& Event)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x0284(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UM1AbilityTask_PlayMontageAndWait*      CallFunc_PlayLoopCountMontageAndWaitForEvent_ReturnValue; // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FM1AbilityEvent                        K2Node_CustomEvent_Event_5;                        // 0x02A0(0x0040)(ConstParm)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwnerActor_ReturnValue_1;              // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AM1Monster*                             K2Node_DynamicCast_AsM1Monster;                    // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UM1AkComponent*                         CallFunc_GetAkComponent_ReturnValue;               // 0x0300(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryCommitCooltime_ReturnValue;            // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_7;            // 0x0310(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_WaitDelay_InTime_ImplicitCast;            // 0x0320(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire) == 0x000008, "Wrong alignment on NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire");
static_assert(sizeof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire) == 0x000328, "Wrong size on NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, EntryPoint) == 0x000000, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::EntryPoint' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CustomEvent_Event_3) == 0x000008, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CustomEvent_Event_3' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, Temp_struct_Variable) == 0x000048, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CreateDelegate_OutputDelegate) == 0x000088, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CustomEvent_DeltaTime) == 0x000098, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CustomEvent_DeltaTime' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, Temp_real_Variable) == 0x00009C, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_WaitTick_ReturnValue) == 0x0000A0, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_WaitTick_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000AC, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CustomEvent_Event_2) == 0x0000C0, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CustomEvent_Event_2' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CustomEvent_Event_1) == 0x000100, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CustomEvent_Event_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CreateDelegate_OutputDelegate_2) == 0x000140, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CustomEvent_Event) == 0x000150, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CustomEvent_Event' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CreateDelegate_OutputDelegate_3) == 0x000190, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, Temp_struct_Variable_1) == 0x0001A0, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_GetOwnerActor_ReturnValue) == 0x0001E0, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_GetOwnerActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_IsValid_ReturnValue_1) == 0x0001E8, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_HasAuthority_ReturnValue) == 0x0001E9, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CreateDelegate_OutputDelegate_4) == 0x0001EC, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_IsDedicatedServer_ReturnValue) == 0x0001FC, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CreateDelegate_OutputDelegate_5) == 0x000200, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CustomEvent_Event_4) == 0x000210, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CustomEvent_Event_4' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000250, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, Temp_int_Variable) == 0x000254, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000258, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_WaitDelay_ReturnValue) == 0x000260, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_WaitDelay_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_IsValid_ReturnValue_2) == 0x000268, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_PlayMontageAndWaitForEvent_ReturnValue) == 0x000270, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_PlayMontageAndWaitForEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_IsValid_ReturnValue_3) == 0x000278, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_Add_IntInt_ReturnValue_1) == 0x00027C, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_Less_IntInt_ReturnValue) == 0x000280, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CreateDelegate_OutputDelegate_6) == 0x000284, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_PlayLoopCountMontageAndWaitForEvent_ReturnValue) == 0x000298, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_PlayLoopCountMontageAndWaitForEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CustomEvent_Event_5) == 0x0002A0, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CustomEvent_Event_5' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_IsValid_ReturnValue_4) == 0x0002E0, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_GetOwnerActor_ReturnValue_1) == 0x0002E8, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_GetOwnerActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_DynamicCast_AsM1Monster) == 0x0002F0, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_DynamicCast_AsM1Monster' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_DynamicCast_bSuccess) == 0x0002F8, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_GetAkComponent_ReturnValue) == 0x000300, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_GetAkComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_TryCommitCooltime_ReturnValue) == 0x000308, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_TryCommitCooltime_ReturnValue' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, Temp_int_Variable_1) == 0x00030C, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, K2Node_CreateDelegate_OutputDelegate_7) == 0x000310, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire, CallFunc_WaitDelay_InTime_ImplicitCast) == 0x000320, "Member 'NormalMonster_GunFire_C_ExecuteUbergraph_NormalMonster_GunFire::CallFunc_WaitDelay_InTime_ImplicitCast' has a wrong offset!");

}

