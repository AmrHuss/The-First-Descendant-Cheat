#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NormalMonster_MeleeAttackBase

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "M1Data_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass NormalMonster_MeleeAttackBase.NormalMonster_MeleeAttackBase_C
// 0x0038 (0x0370 - 0x0338)
class UNormalMonster_MeleeAttackBase_C : public UM1SkillAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          DebugDraw;                                         // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x3];                                      // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CollisionLocationOffset;                           // 0x0344(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UM1DataHitEffects*                      HitEffects;                                        // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UM1DataSoundEffects*                    OptionalHitSoundEffects;                           // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EM1RelationsCheckType                         TargetCheckType;                                   // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinCount;                                          // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCount;                                          // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExecutionCount;                                    // 0x036C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnEventReceived_A19958C04C8AB1CE32CDBF9C7D4EC151(const struct FM1AbilityEvent& Event);
	void OnEventReceived_246FDEEB41893BBA6D12779DDF33B01E(const struct FM1AbilityEvent& Event);
	void OnCompleted_A19958C04C8AB1CE32CDBF9C7D4EC151(const struct FM1AbilityEvent& Event);
	void OnCompleted_246FDEEB41893BBA6D12779DDF33B01E(const struct FM1AbilityEvent& Event);
	void OnBlendOut_A19958C04C8AB1CE32CDBF9C7D4EC151(const struct FM1AbilityEvent& Event);
	void OnBlendOut_246FDEEB41893BBA6D12779DDF33B01E(const struct FM1AbilityEvent& Event);
	void ExecuteUbergraph_NormalMonster_MeleeAttackBase(int32 EntryPoint);
	void CheckOverlapHitDetection(TArray<class AActor*>* HitActors);
	void BP_OnActivated();
	void ApplyHit();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NormalMonster_MeleeAttackBase_C">();
	}
	static class UNormalMonster_MeleeAttackBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNormalMonster_MeleeAttackBase_C>();
	}
};
static_assert(alignof(UNormalMonster_MeleeAttackBase_C) == 0x000008, "Wrong alignment on UNormalMonster_MeleeAttackBase_C");
static_assert(sizeof(UNormalMonster_MeleeAttackBase_C) == 0x000370, "Wrong size on UNormalMonster_MeleeAttackBase_C");
static_assert(offsetof(UNormalMonster_MeleeAttackBase_C, UberGraphFrame) == 0x000338, "Member 'UNormalMonster_MeleeAttackBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UNormalMonster_MeleeAttackBase_C, DebugDraw) == 0x000340, "Member 'UNormalMonster_MeleeAttackBase_C::DebugDraw' has a wrong offset!");
static_assert(offsetof(UNormalMonster_MeleeAttackBase_C, CollisionLocationOffset) == 0x000344, "Member 'UNormalMonster_MeleeAttackBase_C::CollisionLocationOffset' has a wrong offset!");
static_assert(offsetof(UNormalMonster_MeleeAttackBase_C, HitEffects) == 0x000350, "Member 'UNormalMonster_MeleeAttackBase_C::HitEffects' has a wrong offset!");
static_assert(offsetof(UNormalMonster_MeleeAttackBase_C, OptionalHitSoundEffects) == 0x000358, "Member 'UNormalMonster_MeleeAttackBase_C::OptionalHitSoundEffects' has a wrong offset!");
static_assert(offsetof(UNormalMonster_MeleeAttackBase_C, TargetCheckType) == 0x000360, "Member 'UNormalMonster_MeleeAttackBase_C::TargetCheckType' has a wrong offset!");
static_assert(offsetof(UNormalMonster_MeleeAttackBase_C, MinCount) == 0x000364, "Member 'UNormalMonster_MeleeAttackBase_C::MinCount' has a wrong offset!");
static_assert(offsetof(UNormalMonster_MeleeAttackBase_C, MaxCount) == 0x000368, "Member 'UNormalMonster_MeleeAttackBase_C::MaxCount' has a wrong offset!");
static_assert(offsetof(UNormalMonster_MeleeAttackBase_C, ExecutionCount) == 0x00036C, "Member 'UNormalMonster_MeleeAttackBase_C::ExecutionCount' has a wrong offset!");

}

