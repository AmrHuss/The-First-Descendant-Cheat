#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Skill_Vault

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "M1Data_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Skill_Vault.Skill_Vault_C
// 0x00E0 (0x0418 - 0x0338)
class USkill_Vault_C final : public UM1SkillAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                StartLoc;                                          // 0x0340(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLoc;                                            // 0x034C(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VaultVelocity;                                     // 0x0358(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UM1AbilityTask_PlayMontageAndWait*      PlayMontageTask;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class UAnimMontage*>      VaultMontage;                                      // 0x0370(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, double>                   VaultMoveDuration;                                 // 0x03C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        VaultMaxDistance;                                  // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnActivated();
	void BP_OnDeactivated(bool bCancelled);
	void ExecuteUbergraph_Skill_Vault(int32 EntryPoint);
	void IsPlayerRunning(bool* bOutRunning);
	void OnBlendOut_349449594A1AAA7C2314D18749A10B22(const struct FM1AbilityEvent& Event);
	void OnCompleted_349449594A1AAA7C2314D18749A10B22(const struct FM1AbilityEvent& Event);
	void OnEventReceived_349449594A1AAA7C2314D18749A10B22(const struct FM1AbilityEvent& Event);
	void OnFinished_077188D3497B20144F7BCDBFD66C9E8C(bool DestinationReached, bool TimedOut, const struct FVector& FinalTargetLocation);

	void GetEndLocation(struct FVector* OutLocation) const;
	void GetVaultMontage(class UAnimMontage** OutMontage, double* OutDuration) const;
	TArray<struct FM1AbilityParamData> MakeSkillActivateParams(const class AActor* InOwner) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Skill_Vault_C">();
	}
	static class USkill_Vault_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkill_Vault_C>();
	}
};
static_assert(alignof(USkill_Vault_C) == 0x000008, "Wrong alignment on USkill_Vault_C");
static_assert(sizeof(USkill_Vault_C) == 0x000418, "Wrong size on USkill_Vault_C");
static_assert(offsetof(USkill_Vault_C, UberGraphFrame) == 0x000338, "Member 'USkill_Vault_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USkill_Vault_C, StartLoc) == 0x000340, "Member 'USkill_Vault_C::StartLoc' has a wrong offset!");
static_assert(offsetof(USkill_Vault_C, EndLoc) == 0x00034C, "Member 'USkill_Vault_C::EndLoc' has a wrong offset!");
static_assert(offsetof(USkill_Vault_C, VaultVelocity) == 0x000358, "Member 'USkill_Vault_C::VaultVelocity' has a wrong offset!");
static_assert(offsetof(USkill_Vault_C, PlayMontageTask) == 0x000368, "Member 'USkill_Vault_C::PlayMontageTask' has a wrong offset!");
static_assert(offsetof(USkill_Vault_C, VaultMontage) == 0x000370, "Member 'USkill_Vault_C::VaultMontage' has a wrong offset!");
static_assert(offsetof(USkill_Vault_C, VaultMoveDuration) == 0x0003C0, "Member 'USkill_Vault_C::VaultMoveDuration' has a wrong offset!");
static_assert(offsetof(USkill_Vault_C, VaultMaxDistance) == 0x000410, "Member 'USkill_Vault_C::VaultMaxDistance' has a wrong offset!");

}

