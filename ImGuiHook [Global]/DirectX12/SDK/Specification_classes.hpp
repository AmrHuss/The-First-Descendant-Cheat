#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Specification

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Specification.Specification_C
// 0x0370 (0x06E0 - 0x0370)
class USpecification_C final : public UM1BaseAnimInstance
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x0388(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x03A8(0x00C8)()
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization_1;                   // 0x0470(0x0100)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0570(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0590(0x0048)()
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization;                     // 0x05D8(0x0100)()

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void ExecuteUbergraph_Specification(int32 EntryPoint);
	void SpecificationLayer(const struct FPoseLink& InPose, struct FPoseLink* SpecificationLayer_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Specification_C">();
	}
	static class USpecification_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpecification_C>();
	}
};
static_assert(alignof(USpecification_C) == 0x000010, "Wrong alignment on USpecification_C");
static_assert(sizeof(USpecification_C) == 0x0006E0, "Wrong size on USpecification_C");
static_assert(offsetof(USpecification_C, UberGraphFrame) == 0x000370, "Member 'USpecification_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USpecification_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'USpecification_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(USpecification_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'USpecification_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(USpecification_C, AnimGraphNode_Root_1) == 0x000388, "Member 'USpecification_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(USpecification_C, AnimGraphNode_LinkedInputPose) == 0x0003A8, "Member 'USpecification_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(USpecification_C, AnimGraphNode_Inertialization_1) == 0x000470, "Member 'USpecification_C::AnimGraphNode_Inertialization_1' has a wrong offset!");
static_assert(offsetof(USpecification_C, AnimGraphNode_Root) == 0x000570, "Member 'USpecification_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(USpecification_C, AnimGraphNode_SequencePlayer) == 0x000590, "Member 'USpecification_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(USpecification_C, AnimGraphNode_Inertialization) == 0x0005D8, "Member 'USpecification_C::AnimGraphNode_Inertialization' has a wrong offset!");

}

