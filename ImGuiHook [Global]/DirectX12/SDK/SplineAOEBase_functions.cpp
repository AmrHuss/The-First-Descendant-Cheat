#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineAOEBase

#include "Basic.hpp"

#include "SplineAOEBase_classes.hpp"
#include "SplineAOEBase_parameters.hpp"


namespace SDK
{

// Function SplineAOEBase.SplineAOEBase_C.ReserveFinish
// (Public, BlueprintCallable, BlueprintEvent)

void ASplineAOEBase_C::ReserveFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "ReserveFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SplineAOEBase.SplineAOEBase_C.OnPeriod
// (BlueprintCallable, BlueprintEvent)

void ASplineAOEBase_C::OnPeriod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "OnPeriod");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SplineAOEBase.SplineAOEBase_C.OnFinish
// (Protected, BlueprintCallable, BlueprintEvent)

void ASplineAOEBase_C::OnFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "OnFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SplineAOEBase.SplineAOEBase_C.OnEvaluateCondition
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ASplineAOEBase_C::OnEvaluateCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "OnEvaluateCondition");

	Params::SplineAOEBase_C_OnEvaluateCondition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SplineAOEBase.SplineAOEBase_C.OnEndOverlap
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlapActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASplineAOEBase_C::OnEndOverlap(class AActor* OverlapActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "OnEndOverlap");

	Params::SplineAOEBase_C_OnEndOverlap Parms{};

	Parms.OverlapActor = OverlapActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SplineAOEBase.SplineAOEBase_C.OnBeginOverlap
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlapActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASplineAOEBase_C::OnBeginOverlap(class AActor* OverlapActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "OnBeginOverlap");

	Params::SplineAOEBase_C_OnBeginOverlap Parms{};

	Parms.OverlapActor = OverlapActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SplineAOEBase.SplineAOEBase_C.OnAddedCollision
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UShapeComponent*                  AddedShapeComp                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ASplineAOEBase_C::OnAddedCollision(class UShapeComponent* AddedShapeComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "OnAddedCollision");

	Params::SplineAOEBase_C_OnAddedCollision Parms{};

	Parms.AddedShapeComp = AddedShapeComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SplineAOEBase.SplineAOEBase_C.NetMulticastSpawnDecalVFX
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       InTransfrom                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASplineAOEBase_C::NetMulticastSpawnDecalVFX(const struct FTransform& InTransfrom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "NetMulticastSpawnDecalVFX");

	Params::SplineAOEBase_C_NetMulticastSpawnDecalVFX Parms{};

	Parms.InTransfrom = std::move(InTransfrom);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SplineAOEBase.SplineAOEBase_C.HasPeriodDamage
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ASplineAOEBase_C::HasPeriodDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "HasPeriodDamage");

	Params::SplineAOEBase_C_HasPeriodDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SplineAOEBase.SplineAOEBase_C.ExecuteUbergraph_SplineAOEBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASplineAOEBase_C::ExecuteUbergraph_SplineAOEBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "ExecuteUbergraph_SplineAOEBase");

	Params::SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SplineAOEBase.SplineAOEBase_C.ExecutePeriodDamage
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASplineAOEBase_C::ExecutePeriodDamage(class AActor* TargetActor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "ExecutePeriodDamage");

	Params::SplineAOEBase_C_ExecutePeriodDamage Parms{};

	Parms.TargetActor_0 = TargetActor_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SplineAOEBase.SplineAOEBase_C.BP_OnPostSpawnAbilityActor
// (Event, Protected, BlueprintEvent)

void ASplineAOEBase_C::BP_OnPostSpawnAbilityActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "BP_OnPostSpawnAbilityActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SplineAOEBase.SplineAOEBase_C.Auth_SpawnPeriodHitFX
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   InTargets                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ASplineAOEBase_C::Auth_SpawnPeriodHitFX(const TArray<class AActor*>& InTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineAOEBase_C", "Auth_SpawnPeriodHitFX");

	Params::SplineAOEBase_C_Auth_SpawnPeriodHitFX Parms{};

	Parms.InTargets = std::move(InTargets);

	UObject::ProcessEvent(Func, &Parms);
}

}

