#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineAOEBase

#include "Basic.hpp"

#include "M1Data_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "M1_structs.hpp"


namespace SDK::Params
{

// Function SplineAOEBase.SplineAOEBase_C.OnEvaluateCondition
// 0x0018 (0x0018 - 0x0000)
struct SplineAOEBase_C_OnEvaluateCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_As___;                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSpaceInterval_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SplineAOEBase_C_OnEvaluateCondition) == 0x000008, "Wrong alignment on SplineAOEBase_C_OnEvaluateCondition");
static_assert(sizeof(SplineAOEBase_C_OnEvaluateCondition) == 0x000018, "Wrong size on SplineAOEBase_C_OnEvaluateCondition");
static_assert(offsetof(SplineAOEBase_C_OnEvaluateCondition, ReturnValue) == 0x000000, "Member 'SplineAOEBase_C_OnEvaluateCondition::ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_OnEvaluateCondition, K2Node_DynamicCast_As___) == 0x000008, "Member 'SplineAOEBase_C_OnEvaluateCondition::K2Node_DynamicCast_As___' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_OnEvaluateCondition, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'SplineAOEBase_C_OnEvaluateCondition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_OnEvaluateCondition, CallFunc_CheckSpaceInterval_ReturnValue) == 0x000011, "Member 'SplineAOEBase_C_OnEvaluateCondition::CallFunc_CheckSpaceInterval_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_OnEvaluateCondition, CallFunc_IsMovingOnGround_ReturnValue) == 0x000012, "Member 'SplineAOEBase_C_OnEvaluateCondition::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");

// Function SplineAOEBase.SplineAOEBase_C.OnEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct SplineAOEBase_C_OnEndOverlap final
{
public:
	class AActor*                                 OverlapActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SplineAOEBase_C_OnEndOverlap) == 0x000008, "Wrong alignment on SplineAOEBase_C_OnEndOverlap");
static_assert(sizeof(SplineAOEBase_C_OnEndOverlap) == 0x000008, "Wrong size on SplineAOEBase_C_OnEndOverlap");
static_assert(offsetof(SplineAOEBase_C_OnEndOverlap, OverlapActor) == 0x000000, "Member 'SplineAOEBase_C_OnEndOverlap::OverlapActor' has a wrong offset!");

// Function SplineAOEBase.SplineAOEBase_C.OnBeginOverlap
// 0x0020 (0x0020 - 0x0000)
struct SplineAOEBase_C_OnBeginOverlap final
{
public:
	class AActor*                                 OverlapActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidTags_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AbilityId                           CallFunc_InvokeFirstStatusEffectToTargetByTag_ReturnValue; // 0x0010(0x0010)(HasGetValueTypeHash)
};
static_assert(alignof(SplineAOEBase_C_OnBeginOverlap) == 0x000008, "Wrong alignment on SplineAOEBase_C_OnBeginOverlap");
static_assert(sizeof(SplineAOEBase_C_OnBeginOverlap) == 0x000020, "Wrong size on SplineAOEBase_C_OnBeginOverlap");
static_assert(offsetof(SplineAOEBase_C_OnBeginOverlap, OverlapActor) == 0x000000, "Member 'SplineAOEBase_C_OnBeginOverlap::OverlapActor' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_OnBeginOverlap, CallFunc_IsValidTags_ReturnValue) == 0x000008, "Member 'SplineAOEBase_C_OnBeginOverlap::CallFunc_IsValidTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_OnBeginOverlap, CallFunc_InvokeFirstStatusEffectToTargetByTag_ReturnValue) == 0x000010, "Member 'SplineAOEBase_C_OnBeginOverlap::CallFunc_InvokeFirstStatusEffectToTargetByTag_ReturnValue' has a wrong offset!");

// Function SplineAOEBase.SplineAOEBase_C.OnAddedCollision
// 0x0040 (0x0040 - 0x0000)
struct SplineAOEBase_C_OnAddedCollision final
{
public:
	class UShapeComponent*                        AddedShapeComp;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0030)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SplineAOEBase_C_OnAddedCollision) == 0x000010, "Wrong alignment on SplineAOEBase_C_OnAddedCollision");
static_assert(sizeof(SplineAOEBase_C_OnAddedCollision) == 0x000040, "Wrong size on SplineAOEBase_C_OnAddedCollision");
static_assert(offsetof(SplineAOEBase_C_OnAddedCollision, AddedShapeComp) == 0x000000, "Member 'SplineAOEBase_C_OnAddedCollision::AddedShapeComp' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_OnAddedCollision, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'SplineAOEBase_C_OnAddedCollision::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_OnAddedCollision, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'SplineAOEBase_C_OnAddedCollision::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");

// Function SplineAOEBase.SplineAOEBase_C.NetMulticastSpawnDecalVFX
// 0x0030 (0x0030 - 0x0000)
struct SplineAOEBase_C_NetMulticastSpawnDecalVFX final
{
public:
	struct FTransform                             InTransfrom;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SplineAOEBase_C_NetMulticastSpawnDecalVFX) == 0x000010, "Wrong alignment on SplineAOEBase_C_NetMulticastSpawnDecalVFX");
static_assert(sizeof(SplineAOEBase_C_NetMulticastSpawnDecalVFX) == 0x000030, "Wrong size on SplineAOEBase_C_NetMulticastSpawnDecalVFX");
static_assert(offsetof(SplineAOEBase_C_NetMulticastSpawnDecalVFX, InTransfrom) == 0x000000, "Member 'SplineAOEBase_C_NetMulticastSpawnDecalVFX::InTransfrom' has a wrong offset!");

// Function SplineAOEBase.SplineAOEBase_C.HasPeriodDamage
// 0x0004 (0x0004 - 0x0000)
struct SplineAOEBase_C_HasPeriodDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidTags_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SplineAOEBase_C_HasPeriodDamage) == 0x000001, "Wrong alignment on SplineAOEBase_C_HasPeriodDamage");
static_assert(sizeof(SplineAOEBase_C_HasPeriodDamage) == 0x000004, "Wrong size on SplineAOEBase_C_HasPeriodDamage");
static_assert(offsetof(SplineAOEBase_C_HasPeriodDamage, ReturnValue) == 0x000000, "Member 'SplineAOEBase_C_HasPeriodDamage::ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_HasPeriodDamage, CallFunc_IsValidTags_ReturnValue) == 0x000001, "Member 'SplineAOEBase_C_HasPeriodDamage::CallFunc_IsValidTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_HasPeriodDamage, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000002, "Member 'SplineAOEBase_C_HasPeriodDamage::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_HasPeriodDamage, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'SplineAOEBase_C_HasPeriodDamage::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function SplineAOEBase.SplineAOEBase_C.ExecuteUbergraph_SplineAOEBase
// 0x02A0 (0x02A0 - 0x0000)
struct SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           Temp_name_Variable;                                // 0x0018(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* OverlappedActor)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FM1TaggedAbilityParamData>      Temp_struct_Variable;                              // 0x0040(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* OverlappedActor)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AbilityContextHandle                CallFunc_BP_MakeForwardingContext_ReturnValue;     // 0x0068(0x0010)()
	struct FM1AbilityContextHandle                CallFunc_GetAbilityContextHandle_ReturnValue;      // 0x0078(0x0010)(ConstParm)
	struct FM1AbilityTargetInfoHandle             CallFunc_AbilityContextGetTargetInfo_ReturnValue;  // 0x0088(0x0020)()
	class AActor*                                 CallFunc_GetFirstActorFromTargetInfo_ReturnValue;  // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_CustomEvent_InTransfrom;                    // 0x00B0(0x0030)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_LocalRebaseTrans_ReturnValue;             // 0x00F0(0x0030)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasPeriodDamage_ReturnValue;              // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0130(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_Array_Get_Item;                           // 0x0140(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDecalVFXRemovalDistance_ReturnValue;   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16E[0x2];                                      // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FM1FXScalarParam                       K2Node_MakeStruct_M1FXScalarParam;                 // 0x0174(0x000C)(NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UShapeComponent* AddedShapeComponent)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0184(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BeginCollisionTrace_ReturnValue;          // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0198(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x01A8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappedActors_ReturnValue;          // 0x01B8(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_CustomEvent_InTargets;                      // 0x01E0(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FM1FXScalarParam                       K2Node_MakeStruct_M1FXScalarParam_1;               // 0x0210(0x000C)(NoDestructor)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FM1FXScalarParam>               K2Node_MakeArray_Array;                            // 0x0220(0x0010)(ReferenceParm)
	struct FM1FXParam                             K2Node_MakeStruct_M1FXParam;                       // 0x0230(0x0030)()
	TArray<class UNiagaraComponent*>              CallFunc_SpawnFXsForAbility_ReturnValue;           // 0x0260(0x0010)(ReferenceParm, ContainsInstancedReference)
	float                                         K2Node_VariableSet_EachLifetime_ImplicitCast;      // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetCollosionShapeAsSphere_WorldHeightOffsetRangeMin_ImplicitCast; // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetCollosionShapeAsSphere_WorldHeightOffsetRangeMax_ImplicitCast; // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetCollosionShapeAsSphere_SphereRadius_ImplicitCast; // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_ComponentSpacing_ImplicitCast;  // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_ParamValue_ImplicitCast;         // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase) == 0x000010, "Wrong alignment on SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase");
static_assert(sizeof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase) == 0x0002A0, "Wrong size on SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, EntryPoint) == 0x000000, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, Temp_int_Array_Index_Variable) == 0x000004, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, Temp_name_Variable) == 0x000018, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_HasAuthority_ReturnValue) == 0x000028, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, Temp_struct_Variable) == 0x000040, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, Temp_int_Array_Index_Variable_1) == 0x000050, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_CreateDelegate_OutputDelegate_2) == 0x000054, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_BP_MakeForwardingContext_ReturnValue) == 0x000068, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_BP_MakeForwardingContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_GetAbilityContextHandle_ReturnValue) == 0x000078, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_GetAbilityContextHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_AbilityContextGetTargetInfo_ReturnValue) == 0x000088, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_AbilityContextGetTargetInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_GetFirstActorFromTargetInfo_ReturnValue) == 0x0000A8, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_GetFirstActorFromTargetInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_CustomEvent_InTransfrom) == 0x0000B0, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_CustomEvent_InTransfrom' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000E0, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_LocalRebaseTrans_ReturnValue) == 0x0000F0, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_LocalRebaseTrans_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_TransformLocation_ReturnValue) == 0x000120, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_HasPeriodDamage_ReturnValue) == 0x00012C, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_HasPeriodDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000130, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_HasAuthority_ReturnValue_1) == 0x000138, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_Array_Get_Item) == 0x000140, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_IsValid_ReturnValue) == 0x000148, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00014C, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_Vector_Distance_ReturnValue) == 0x000158, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_Array_Length_ReturnValue) == 0x000160, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, Temp_int_Loop_Counter_Variable) == 0x000164, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_GetDecalVFXRemovalDistance_ReturnValue) == 0x000168, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_GetDecalVFXRemovalDistance_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_Less_IntInt_ReturnValue) == 0x00016C, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x00016D, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_Add_IntInt_ReturnValue) == 0x000170, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_MakeStruct_M1FXScalarParam) == 0x000174, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_MakeStruct_M1FXScalarParam' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_SwitchEnum_CmpSuccess) == 0x000180, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_CreateDelegate_OutputDelegate_3) == 0x000184, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_BeginCollisionTrace_ReturnValue) == 0x000194, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_BeginCollisionTrace_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_CreateDelegate_OutputDelegate_4) == 0x000198, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_CreateDelegate_OutputDelegate_5) == 0x0001A8, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_GetOverlappedActors_ReturnValue) == 0x0001B8, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_GetOverlappedActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_NotEqual_NameName_ReturnValue) == 0x0001C8, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_Array_Get_Item_1) == 0x0001D0, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_Array_Length_ReturnValue_1) == 0x0001D8, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, Temp_int_Loop_Counter_Variable_1) == 0x0001DC, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_CustomEvent_InTargets) == 0x0001E0, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_CustomEvent_InTargets' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001F0, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001F4, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_BreakVector_X) == 0x0001F8, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_BreakVector_Y) == 0x000200, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_BreakVector_Z) == 0x000208, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_MakeStruct_M1FXScalarParam_1) == 0x000210, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_MakeStruct_M1FXScalarParam_1' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_MakeArray_Array) == 0x000220, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_MakeStruct_M1FXParam) == 0x000230, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_MakeStruct_M1FXParam' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_SpawnFXsForAbility_ReturnValue) == 0x000260, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_SpawnFXsForAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_VariableSet_EachLifetime_ImplicitCast) == 0x000270, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_VariableSet_EachLifetime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000274, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000278, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_SetCollosionShapeAsSphere_WorldHeightOffsetRangeMin_ImplicitCast) == 0x000280, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_SetCollosionShapeAsSphere_WorldHeightOffsetRangeMin_ImplicitCast' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_SetCollosionShapeAsSphere_WorldHeightOffsetRangeMax_ImplicitCast) == 0x000284, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_SetCollosionShapeAsSphere_WorldHeightOffsetRangeMax_ImplicitCast' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, CallFunc_SetCollosionShapeAsSphere_SphereRadius_ImplicitCast) == 0x000288, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::CallFunc_SetCollosionShapeAsSphere_SphereRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_VariableSet_ComponentSpacing_ImplicitCast) == 0x00028C, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_VariableSet_ComponentSpacing_ImplicitCast' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase, K2Node_MakeStruct_ParamValue_ImplicitCast) == 0x000290, "Member 'SplineAOEBase_C_ExecuteUbergraph_SplineAOEBase::K2Node_MakeStruct_ParamValue_ImplicitCast' has a wrong offset!");

// Function SplineAOEBase.SplineAOEBase_C.ExecutePeriodDamage
// 0x0030 (0x0030 - 0x0000)
struct SplineAOEBase_C_ExecutePeriodDamage final
{
public:
	class AActor*                                 TargetActor_0;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(SplineAOEBase_C_ExecutePeriodDamage) == 0x000008, "Wrong alignment on SplineAOEBase_C_ExecutePeriodDamage");
static_assert(sizeof(SplineAOEBase_C_ExecutePeriodDamage) == 0x000030, "Wrong size on SplineAOEBase_C_ExecutePeriodDamage");
static_assert(offsetof(SplineAOEBase_C_ExecutePeriodDamage, TargetActor_0) == 0x000000, "Member 'SplineAOEBase_C_ExecutePeriodDamage::TargetActor_0' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecutePeriodDamage, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'SplineAOEBase_C_ExecutePeriodDamage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecutePeriodDamage, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'SplineAOEBase_C_ExecutePeriodDamage::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(SplineAOEBase_C_ExecutePeriodDamage, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'SplineAOEBase_C_ExecutePeriodDamage::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function SplineAOEBase.SplineAOEBase_C.Auth_SpawnPeriodHitFX
// 0x0010 (0x0010 - 0x0000)
struct SplineAOEBase_C_Auth_SpawnPeriodHitFX final
{
public:
	TArray<class AActor*>                         InTargets;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(SplineAOEBase_C_Auth_SpawnPeriodHitFX) == 0x000008, "Wrong alignment on SplineAOEBase_C_Auth_SpawnPeriodHitFX");
static_assert(sizeof(SplineAOEBase_C_Auth_SpawnPeriodHitFX) == 0x000010, "Wrong size on SplineAOEBase_C_Auth_SpawnPeriodHitFX");
static_assert(offsetof(SplineAOEBase_C_Auth_SpawnPeriodHitFX, InTargets) == 0x000000, "Member 'SplineAOEBase_C_Auth_SpawnPeriodHitFX::InTargets' has a wrong offset!");

}

