#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Crosshair_Charge_001

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function UI_Crosshair_Charge_001.UI_Crosshair_Charge_001_C.EnemyInWeaponRange
// 0x0028 (0x0028 - 0x0000)
struct UI_Crosshair_Charge_001_C_EnemyInWeaponRange final
{
public:
	bool                                          bEnemyInWeaponRange;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 AimingNoticeCrosshairColor;                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Crosshair_Charge_001_C_EnemyInWeaponRange) == 0x000004, "Wrong alignment on UI_Crosshair_Charge_001_C_EnemyInWeaponRange");
static_assert(sizeof(UI_Crosshair_Charge_001_C_EnemyInWeaponRange) == 0x000028, "Wrong size on UI_Crosshair_Charge_001_C_EnemyInWeaponRange");
static_assert(offsetof(UI_Crosshair_Charge_001_C_EnemyInWeaponRange, bEnemyInWeaponRange) == 0x000000, "Member 'UI_Crosshair_Charge_001_C_EnemyInWeaponRange::bEnemyInWeaponRange' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Charge_001_C_EnemyInWeaponRange, AimingNoticeCrosshairColor) == 0x000004, "Member 'UI_Crosshair_Charge_001_C_EnemyInWeaponRange::AimingNoticeCrosshairColor' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Charge_001_C_EnemyInWeaponRange, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x000008, "Member 'UI_Crosshair_Charge_001_C_EnemyInWeaponRange::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Charge_001_C_EnemyInWeaponRange, CallFunc_SelectColor_ReturnValue) == 0x000018, "Member 'UI_Crosshair_Charge_001_C_EnemyInWeaponRange::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function UI_Crosshair_Charge_001.UI_Crosshair_Charge_001_C.ExecuteUbergraph_UI_Crosshair_Charge_001
// 0x0008 (0x0008 - 0x0000)
struct UI_Crosshair_Charge_001_C_ExecuteUbergraph_UI_Crosshair_Charge_001 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Crosshair_Charge_001_C_ExecuteUbergraph_UI_Crosshair_Charge_001) == 0x000004, "Wrong alignment on UI_Crosshair_Charge_001_C_ExecuteUbergraph_UI_Crosshair_Charge_001");
static_assert(sizeof(UI_Crosshair_Charge_001_C_ExecuteUbergraph_UI_Crosshair_Charge_001) == 0x000008, "Wrong size on UI_Crosshair_Charge_001_C_ExecuteUbergraph_UI_Crosshair_Charge_001");
static_assert(offsetof(UI_Crosshair_Charge_001_C_ExecuteUbergraph_UI_Crosshair_Charge_001, EntryPoint) == 0x000000, "Member 'UI_Crosshair_Charge_001_C_ExecuteUbergraph_UI_Crosshair_Charge_001::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Crosshair_Charge_001_C_ExecuteUbergraph_UI_Crosshair_Charge_001, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_Crosshair_Charge_001_C_ExecuteUbergraph_UI_Crosshair_Charge_001::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UI_Crosshair_Charge_001.UI_Crosshair_Charge_001_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Crosshair_Charge_001_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Crosshair_Charge_001_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Crosshair_Charge_001_C_PreConstruct");
static_assert(sizeof(UI_Crosshair_Charge_001_C_PreConstruct) == 0x000001, "Wrong size on UI_Crosshair_Charge_001_C_PreConstruct");
static_assert(offsetof(UI_Crosshair_Charge_001_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Crosshair_Charge_001_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

