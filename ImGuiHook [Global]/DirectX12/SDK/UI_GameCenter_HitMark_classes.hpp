#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_GameCenter_HitMark

#include "Basic.hpp"

#include "M1_structs.hpp"
#include "M1_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_GameCenter_HitMark.UI_GameCenter_HitMark_C
// 0x0040 (0x0748 - 0x0708)
class UUI_GameCenter_HitMark_C final : public UM1UIGameCenter_HitMark
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0708(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Test_Death;                                        // 0x0710(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Test_Hit;                                          // 0x0718(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ANIM_DeathMark;                                    // 0x0720(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ANIM_HitMark;                                      // 0x0728(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Open;                                         // 0x0730(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_Death;                                      // 0x0738(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_Hit;                                        // 0x0740(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void BP_EnemyHit(const EM1HitMarkType Type, bool bIsWeaknessHit);
	void ExecuteUbergraph_UI_GameCenter_HitMark(int32 EntryPoint);
	void OnEventWidgetOpen(EM1WidgetAnimDirection InDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_GameCenter_HitMark_C">();
	}
	static class UUI_GameCenter_HitMark_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_GameCenter_HitMark_C>();
	}
};
static_assert(alignof(UUI_GameCenter_HitMark_C) == 0x000008, "Wrong alignment on UUI_GameCenter_HitMark_C");
static_assert(sizeof(UUI_GameCenter_HitMark_C) == 0x000748, "Wrong size on UUI_GameCenter_HitMark_C");
static_assert(offsetof(UUI_GameCenter_HitMark_C, UberGraphFrame) == 0x000708, "Member 'UUI_GameCenter_HitMark_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_GameCenter_HitMark_C, Test_Death) == 0x000710, "Member 'UUI_GameCenter_HitMark_C::Test_Death' has a wrong offset!");
static_assert(offsetof(UUI_GameCenter_HitMark_C, Test_Hit) == 0x000718, "Member 'UUI_GameCenter_HitMark_C::Test_Hit' has a wrong offset!");
static_assert(offsetof(UUI_GameCenter_HitMark_C, ANIM_DeathMark) == 0x000720, "Member 'UUI_GameCenter_HitMark_C::ANIM_DeathMark' has a wrong offset!");
static_assert(offsetof(UUI_GameCenter_HitMark_C, ANIM_HitMark) == 0x000728, "Member 'UUI_GameCenter_HitMark_C::ANIM_HitMark' has a wrong offset!");
static_assert(offsetof(UUI_GameCenter_HitMark_C, Anim_Open) == 0x000730, "Member 'UUI_GameCenter_HitMark_C::Anim_Open' has a wrong offset!");
static_assert(offsetof(UUI_GameCenter_HitMark_C, Canvas_Death) == 0x000738, "Member 'UUI_GameCenter_HitMark_C::Canvas_Death' has a wrong offset!");
static_assert(offsetof(UUI_GameCenter_HitMark_C, Canvas_Hit) == 0x000740, "Member 'UUI_GameCenter_HitMark_C::Canvas_Hit' has a wrong offset!");

}

