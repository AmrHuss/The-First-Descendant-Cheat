#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_GameHP_Target

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "M1Data_structs.hpp"
#include "M1_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_GameHP_Target.UI_GameHP_Target_C.BP_NotifyTagAdded
// 0x0008 (0x0008 - 0x0000)
struct UI_GameHP_Target_C_BP_NotifyTagAdded final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_BP_NotifyTagAdded) == 0x000004, "Wrong alignment on UI_GameHP_Target_C_BP_NotifyTagAdded");
static_assert(sizeof(UI_GameHP_Target_C_BP_NotifyTagAdded) == 0x000008, "Wrong size on UI_GameHP_Target_C_BP_NotifyTagAdded");
static_assert(offsetof(UI_GameHP_Target_C_BP_NotifyTagAdded, Tag) == 0x000000, "Member 'UI_GameHP_Target_C_BP_NotifyTagAdded::Tag' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.BP_NotifyTagRemoved
// 0x0008 (0x0008 - 0x0000)
struct UI_GameHP_Target_C_BP_NotifyTagRemoved final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_BP_NotifyTagRemoved) == 0x000004, "Wrong alignment on UI_GameHP_Target_C_BP_NotifyTagRemoved");
static_assert(sizeof(UI_GameHP_Target_C_BP_NotifyTagRemoved) == 0x000008, "Wrong size on UI_GameHP_Target_C_BP_NotifyTagRemoved");
static_assert(offsetof(UI_GameHP_Target_C_BP_NotifyTagRemoved, Tag) == 0x000000, "Member 'UI_GameHP_Target_C_BP_NotifyTagRemoved::Tag' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.BP_OnBerserkGaugeChanged
// 0x0004 (0x0004 - 0x0000)
struct UI_GameHP_Target_C_BP_OnBerserkGaugeChanged final
{
public:
	float                                         GaugeRatio;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_BP_OnBerserkGaugeChanged) == 0x000004, "Wrong alignment on UI_GameHP_Target_C_BP_OnBerserkGaugeChanged");
static_assert(sizeof(UI_GameHP_Target_C_BP_OnBerserkGaugeChanged) == 0x000004, "Wrong size on UI_GameHP_Target_C_BP_OnBerserkGaugeChanged");
static_assert(offsetof(UI_GameHP_Target_C_BP_OnBerserkGaugeChanged, GaugeRatio) == 0x000000, "Member 'UI_GameHP_Target_C_BP_OnBerserkGaugeChanged::GaugeRatio' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.BP_PlayFocusAnim
// 0x0001 (0x0001 - 0x0000)
struct UI_GameHP_Target_C_BP_PlayFocusAnim final
{
public:
	bool                                          bInForwardAnim;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_BP_PlayFocusAnim) == 0x000001, "Wrong alignment on UI_GameHP_Target_C_BP_PlayFocusAnim");
static_assert(sizeof(UI_GameHP_Target_C_BP_PlayFocusAnim) == 0x000001, "Wrong size on UI_GameHP_Target_C_BP_PlayFocusAnim");
static_assert(offsetof(UI_GameHP_Target_C_BP_PlayFocusAnim, bInForwardAnim) == 0x000000, "Member 'UI_GameHP_Target_C_BP_PlayFocusAnim::bInForwardAnim' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.BP_PlayNameAnim
// 0x0001 (0x0001 - 0x0000)
struct UI_GameHP_Target_C_BP_PlayNameAnim final
{
public:
	bool                                          bInForwardAnim;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_BP_PlayNameAnim) == 0x000001, "Wrong alignment on UI_GameHP_Target_C_BP_PlayNameAnim");
static_assert(sizeof(UI_GameHP_Target_C_BP_PlayNameAnim) == 0x000001, "Wrong size on UI_GameHP_Target_C_BP_PlayNameAnim");
static_assert(offsetof(UI_GameHP_Target_C_BP_PlayNameAnim, bInForwardAnim) == 0x000000, "Member 'UI_GameHP_Target_C_BP_PlayNameAnim::bInForwardAnim' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.BP_UpdateWeakAdvantageIcon
// 0x0008 (0x0008 - 0x0000)
struct UI_GameHP_Target_C_BP_UpdateWeakAdvantageIcon final
{
public:
	class UTexture2D*                             WeakAdvantageIcon;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_BP_UpdateWeakAdvantageIcon) == 0x000008, "Wrong alignment on UI_GameHP_Target_C_BP_UpdateWeakAdvantageIcon");
static_assert(sizeof(UI_GameHP_Target_C_BP_UpdateWeakAdvantageIcon) == 0x000008, "Wrong size on UI_GameHP_Target_C_BP_UpdateWeakAdvantageIcon");
static_assert(offsetof(UI_GameHP_Target_C_BP_UpdateWeakAdvantageIcon, WeakAdvantageIcon) == 0x000000, "Member 'UI_GameHP_Target_C_BP_UpdateWeakAdvantageIcon::WeakAdvantageIcon' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.BP_UpdateWeakElementalIcons
// 0x0010 (0x0010 - 0x0000)
struct UI_GameHP_Target_C_BP_UpdateWeakElementalIcons final
{
public:
	TArray<class UTexture2D*>                     WeakElementalIcons;                                // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(UI_GameHP_Target_C_BP_UpdateWeakElementalIcons) == 0x000008, "Wrong alignment on UI_GameHP_Target_C_BP_UpdateWeakElementalIcons");
static_assert(sizeof(UI_GameHP_Target_C_BP_UpdateWeakElementalIcons) == 0x000010, "Wrong size on UI_GameHP_Target_C_BP_UpdateWeakElementalIcons");
static_assert(offsetof(UI_GameHP_Target_C_BP_UpdateWeakElementalIcons, WeakElementalIcons) == 0x000000, "Member 'UI_GameHP_Target_C_BP_UpdateWeakElementalIcons::WeakElementalIcons' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.ExecuteUbergraph_UI_GameHP_Target
// 0x0180 (0x0180 - 0x0000)
struct UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 CallFunc_SpawnObject_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_GaugeRatio;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTexture2D*>                     K2Node_Event_WeakElementalIcons;                   // 0x0030(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_2;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_WeakAdvantageIcon;                    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_Tag_1;                                // 0x005C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Tag;                                  // 0x0064(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1; // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_3;                              // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInForwardAnim_1;                     // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInForwardAnim;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_1;                           // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EM1WidgetAnimDirection                        K2Node_Event_InDirection;                          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x00B0(0x00C0)()
	struct FDeprecateSlateVector2D                K2Node_MakeStruct_ImageSize_ImplicitCast;          // 0x0170(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target) == 0x000010, "Wrong alignment on UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target");
static_assert(sizeof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target) == 0x000180, "Wrong size on UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, EntryPoint) == 0x000000, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, Temp_bool_Variable) == 0x000004, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_SpawnObject_ReturnValue) == 0x000008, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, Temp_byte_Variable) == 0x000010, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, Temp_byte_Variable_1) == 0x000011, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_MakeVector2D_ReturnValue) == 0x000014, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Event_GaugeRatio) == 0x00001C, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Event_GaugeRatio' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Event_IsDesignTime) == 0x000020, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Event_WeakElementalIcons) == 0x000030, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Event_WeakElementalIcons' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, Temp_byte_Variable_2) == 0x000044, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_Less_IntInt_ReturnValue) == 0x000045, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_AddChild_ReturnValue) == 0x000048, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Event_WeakAdvantageIcon) == 0x000050, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Event_WeakAdvantageIcon' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Event_Tag_1) == 0x00005C, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Event_Tag_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Event_Tag) == 0x000064, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Event_Tag' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x00006C, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1) == 0x00006D, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, Temp_byte_Variable_3) == 0x00006E, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Event_bInForwardAnim_1) == 0x00006F, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Event_bInForwardAnim_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Event_bInForwardAnim) == 0x000070, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Event_bInForwardAnim' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Select_Default) == 0x000071, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_PlayAnimation_ReturnValue) == 0x000078, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, Temp_bool_Variable_1) == 0x000080, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Select_Default_1) == 0x000081, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_PlayAnimation_ReturnValue_1) == 0x000088, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_Event_InDirection) == 0x000090, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_Event_InDirection' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, Temp_int_Array_Index_Variable) == 0x000094, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_PlayAnimation_ReturnValue_2) == 0x000098, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_MakeStruct_SlateBrush) == 0x0000B0, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target, K2Node_MakeStruct_ImageSize_ImplicitCast) == 0x000170, "Member 'UI_GameHP_Target_C_ExecuteUbergraph_UI_GameHP_Target::K2Node_MakeStruct_ImageSize_ImplicitCast' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.GetPhasedHP
// 0x0070 (0x0070 - 0x0000)
struct UI_GameHP_Target_C_GetPhasedHP final
{
public:
	struct FM1ScaledInteger                       CurrentHp;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	float                                         OutRatio;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurHP;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndHP;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalHP;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ScaledIntToInt_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AM1Character*                           CallFunc_GetInfoOwner_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTaggedIntVariantFrom_ReturnValue;      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTaggedIntVariantFrom_ReturnValue_1;    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_FunctionResult_OutRatio_ImplicitCast;       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_GetPhasedHP) == 0x000008, "Wrong alignment on UI_GameHP_Target_C_GetPhasedHP");
static_assert(sizeof(UI_GameHP_Target_C_GetPhasedHP) == 0x000070, "Wrong size on UI_GameHP_Target_C_GetPhasedHP");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CurrentHp) == 0x000000, "Member 'UI_GameHP_Target_C_GetPhasedHP::CurrentHp' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, OutRatio) == 0x000008, "Member 'UI_GameHP_Target_C_GetPhasedHP::OutRatio' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, ReturnValue) == 0x00000C, "Member 'UI_GameHP_Target_C_GetPhasedHP::ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CurHP) == 0x000010, "Member 'UI_GameHP_Target_C_GetPhasedHP::CurHP' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, EndHP) == 0x000014, "Member 'UI_GameHP_Target_C_GetPhasedHP::EndHP' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, TotalHP) == 0x000018, "Member 'UI_GameHP_Target_C_GetPhasedHP::TotalHP' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_Conv_ScaledIntToInt_ReturnValue) == 0x00001C, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_Conv_ScaledIntToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_GetInfoOwner_ReturnValue) == 0x000020, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_GetInfoOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_GetTaggedIntVariantFrom_ReturnValue) == 0x000028, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_GetTaggedIntVariantFrom_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_Greater_IntInt_ReturnValue) == 0x00002C, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_GetTaggedIntVariantFrom_ReturnValue_1) == 0x000030, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_GetTaggedIntVariantFrom_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000038, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_FMax_ReturnValue) == 0x000040, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_Subtract_IntInt_ReturnValue) == 0x000048, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000050, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000058, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, CallFunc_FClamp_ReturnValue) == 0x000060, "Member 'UI_GameHP_Target_C_GetPhasedHP::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetPhasedHP, K2Node_FunctionResult_OutRatio_ImplicitCast) == 0x000068, "Member 'UI_GameHP_Target_C_GetPhasedHP::K2Node_FunctionResult_OutRatio_ImplicitCast' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.GetStateVisibility
// 0x0010 (0x0010 - 0x0000)
struct UI_GameHP_Target_C_GetStateVisibility final
{
public:
	int32                                         PhaseTotalCount;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CheckingPhase;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              SlateVisibility;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_GetStateVisibility) == 0x000004, "Wrong alignment on UI_GameHP_Target_C_GetStateVisibility");
static_assert(sizeof(UI_GameHP_Target_C_GetStateVisibility) == 0x000010, "Wrong size on UI_GameHP_Target_C_GetStateVisibility");
static_assert(offsetof(UI_GameHP_Target_C_GetStateVisibility, PhaseTotalCount) == 0x000000, "Member 'UI_GameHP_Target_C_GetStateVisibility::PhaseTotalCount' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetStateVisibility, CheckingPhase) == 0x000004, "Member 'UI_GameHP_Target_C_GetStateVisibility::CheckingPhase' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetStateVisibility, SlateVisibility) == 0x000008, "Member 'UI_GameHP_Target_C_GetStateVisibility::SlateVisibility' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetStateVisibility, Temp_bool_Variable) == 0x000009, "Member 'UI_GameHP_Target_C_GetStateVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetStateVisibility, CallFunc_Greater_IntInt_ReturnValue) == 0x00000A, "Member 'UI_GameHP_Target_C_GetStateVisibility::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetStateVisibility, Temp_byte_Variable) == 0x00000B, "Member 'UI_GameHP_Target_C_GetStateVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetStateVisibility, Temp_byte_Variable_1) == 0x00000C, "Member 'UI_GameHP_Target_C_GetStateVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_GetStateVisibility, K2Node_Select_Default) == 0x00000D, "Member 'UI_GameHP_Target_C_GetStateVisibility::K2Node_Select_Default' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.LoopPhaseImmune
// 0x0008 (0x0008 - 0x0000)
struct UI_GameHP_Target_C_LoopPhaseImmune final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_LoopPhaseImmune) == 0x000008, "Wrong alignment on UI_GameHP_Target_C_LoopPhaseImmune");
static_assert(sizeof(UI_GameHP_Target_C_LoopPhaseImmune) == 0x000008, "Wrong size on UI_GameHP_Target_C_LoopPhaseImmune");
static_assert(offsetof(UI_GameHP_Target_C_LoopPhaseImmune, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'UI_GameHP_Target_C_LoopPhaseImmune::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.OnEventWidgetClose
// 0x0001 (0x0001 - 0x0000)
struct UI_GameHP_Target_C_OnEventWidgetClose final
{
public:
	EM1WidgetAnimDirection                        InDirection;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_OnEventWidgetClose) == 0x000001, "Wrong alignment on UI_GameHP_Target_C_OnEventWidgetClose");
static_assert(sizeof(UI_GameHP_Target_C_OnEventWidgetClose) == 0x000001, "Wrong size on UI_GameHP_Target_C_OnEventWidgetClose");
static_assert(offsetof(UI_GameHP_Target_C_OnEventWidgetClose, InDirection) == 0x000000, "Member 'UI_GameHP_Target_C_OnEventWidgetClose::InDirection' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_GameHP_Target_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_PreConstruct) == 0x000001, "Wrong alignment on UI_GameHP_Target_C_PreConstruct");
static_assert(sizeof(UI_GameHP_Target_C_PreConstruct) == 0x000001, "Wrong size on UI_GameHP_Target_C_PreConstruct");
static_assert(offsetof(UI_GameHP_Target_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_GameHP_Target_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.RefreshPhaseImmune
// 0x0018 (0x0018 - 0x0000)
struct UI_GameHP_Target_C_RefreshPhaseImmune final
{
public:
	bool                                          bReset;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AM1Character*                           CallFunc_GetInfoOwner_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveTag_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_RefreshPhaseImmune) == 0x000008, "Wrong alignment on UI_GameHP_Target_C_RefreshPhaseImmune");
static_assert(sizeof(UI_GameHP_Target_C_RefreshPhaseImmune) == 0x000018, "Wrong size on UI_GameHP_Target_C_RefreshPhaseImmune");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseImmune, bReset) == 0x000000, "Member 'UI_GameHP_Target_C_RefreshPhaseImmune::bReset' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseImmune, CallFunc_GetInfoOwner_ReturnValue) == 0x000008, "Member 'UI_GameHP_Target_C_RefreshPhaseImmune::CallFunc_GetInfoOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseImmune, CallFunc_IsActiveTag_ReturnValue) == 0x000010, "Member 'UI_GameHP_Target_C_RefreshPhaseImmune::CallFunc_IsActiveTag_ReturnValue' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.RefreshPhaseState
// 0x0038 (0x0038 - 0x0000)
struct UI_GameHP_Target_C_RefreshPhaseState final
{
public:
	bool                                          bReset;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PhaseRemainCount;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PhaseTotalCount;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AM1Character*                           CallFunc_GetInfoOwner_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTaggedIntVariantFrom_ReturnValue;      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTaggedIntVariantFrom_ReturnValue_1;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_GameHP_Named_Phase_C*               K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_IntInt_ReturnValue;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_RefreshPhaseState) == 0x000008, "Wrong alignment on UI_GameHP_Target_C_RefreshPhaseState");
static_assert(sizeof(UI_GameHP_Target_C_RefreshPhaseState) == 0x000038, "Wrong size on UI_GameHP_Target_C_RefreshPhaseState");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, bReset) == 0x000000, "Member 'UI_GameHP_Target_C_RefreshPhaseState::bReset' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, PhaseRemainCount) == 0x000004, "Member 'UI_GameHP_Target_C_RefreshPhaseState::PhaseRemainCount' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, PhaseTotalCount) == 0x000008, "Member 'UI_GameHP_Target_C_RefreshPhaseState::PhaseTotalCount' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'UI_GameHP_Target_C_RefreshPhaseState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, CallFunc_GetInfoOwner_ReturnValue) == 0x000010, "Member 'UI_GameHP_Target_C_RefreshPhaseState::CallFunc_GetInfoOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, CallFunc_GetTaggedIntVariantFrom_ReturnValue) == 0x000018, "Member 'UI_GameHP_Target_C_RefreshPhaseState::CallFunc_GetTaggedIntVariantFrom_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, CallFunc_GetTaggedIntVariantFrom_ReturnValue_1) == 0x00001C, "Member 'UI_GameHP_Target_C_RefreshPhaseState::CallFunc_GetTaggedIntVariantFrom_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, Temp_int_Variable) == 0x000020, "Member 'UI_GameHP_Target_C_RefreshPhaseState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, K2Node_Select_Default) == 0x000028, "Member 'UI_GameHP_Target_C_RefreshPhaseState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000030, "Member 'UI_GameHP_Target_C_RefreshPhaseState::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, CallFunc_InRange_IntInt_ReturnValue) == 0x000031, "Member 'UI_GameHP_Target_C_RefreshPhaseState::CallFunc_InRange_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_RefreshPhaseState, CallFunc_BooleanAND_ReturnValue) == 0x000032, "Member 'UI_GameHP_Target_C_RefreshPhaseState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.SetPhaseUIPlayFillOrEmpty
// 0x0010 (0x0010 - 0x0000)
struct UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty final
{
public:
	int32                                         PhaseRemainCount;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_4;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_5;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_6;             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_7;             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_8;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_9;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty) == 0x000004, "Wrong alignment on UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty");
static_assert(sizeof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty) == 0x000010, "Wrong size on UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, PhaseRemainCount) == 0x000000, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::PhaseRemainCount' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000005, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000006, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, CallFunc_Greater_IntInt_ReturnValue_3) == 0x000007, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, CallFunc_Greater_IntInt_ReturnValue_4) == 0x000008, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::CallFunc_Greater_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, CallFunc_Greater_IntInt_ReturnValue_5) == 0x000009, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::CallFunc_Greater_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, CallFunc_Greater_IntInt_ReturnValue_6) == 0x00000A, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::CallFunc_Greater_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, CallFunc_Greater_IntInt_ReturnValue_7) == 0x00000B, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::CallFunc_Greater_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, CallFunc_Greater_IntInt_ReturnValue_8) == 0x00000C, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::CallFunc_Greater_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty, CallFunc_Greater_IntInt_ReturnValue_9) == 0x00000D, "Member 'UI_GameHP_Target_C_SetPhaseUIPlayFillOrEmpty::CallFunc_Greater_IntInt_ReturnValue_9' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.SetPhaseUIVisible
// 0x0010 (0x0010 - 0x0000)
struct UI_GameHP_Target_C_SetPhaseUIVisible final
{
public:
	int32                                         PhaseTotalCount;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStateVisibility_SlateVisibility;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStateVisibility_SlateVisibility_1;     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStateVisibility_SlateVisibility_2;     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStateVisibility_SlateVisibility_3;     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStateVisibility_SlateVisibility_4;     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStateVisibility_SlateVisibility_5;     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStateVisibility_SlateVisibility_6;     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStateVisibility_SlateVisibility_7;     // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStateVisibility_SlateVisibility_8;     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetStateVisibility_SlateVisibility_9;     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_SetPhaseUIVisible) == 0x000004, "Wrong alignment on UI_GameHP_Target_C_SetPhaseUIVisible");
static_assert(sizeof(UI_GameHP_Target_C_SetPhaseUIVisible) == 0x000010, "Wrong size on UI_GameHP_Target_C_SetPhaseUIVisible");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, PhaseTotalCount) == 0x000000, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::PhaseTotalCount' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, CallFunc_GetStateVisibility_SlateVisibility) == 0x000004, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::CallFunc_GetStateVisibility_SlateVisibility' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, CallFunc_GetStateVisibility_SlateVisibility_1) == 0x000005, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::CallFunc_GetStateVisibility_SlateVisibility_1' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, CallFunc_GetStateVisibility_SlateVisibility_2) == 0x000006, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::CallFunc_GetStateVisibility_SlateVisibility_2' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, CallFunc_GetStateVisibility_SlateVisibility_3) == 0x000007, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::CallFunc_GetStateVisibility_SlateVisibility_3' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, CallFunc_GetStateVisibility_SlateVisibility_4) == 0x000008, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::CallFunc_GetStateVisibility_SlateVisibility_4' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, CallFunc_GetStateVisibility_SlateVisibility_5) == 0x000009, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::CallFunc_GetStateVisibility_SlateVisibility_5' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, CallFunc_GetStateVisibility_SlateVisibility_6) == 0x00000A, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::CallFunc_GetStateVisibility_SlateVisibility_6' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, CallFunc_GetStateVisibility_SlateVisibility_7) == 0x00000B, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::CallFunc_GetStateVisibility_SlateVisibility_7' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, CallFunc_GetStateVisibility_SlateVisibility_8) == 0x00000C, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::CallFunc_GetStateVisibility_SlateVisibility_8' has a wrong offset!");
static_assert(offsetof(UI_GameHP_Target_C_SetPhaseUIVisible, CallFunc_GetStateVisibility_SlateVisibility_9) == 0x00000D, "Member 'UI_GameHP_Target_C_SetPhaseUIVisible::CallFunc_GetStateVisibility_SlateVisibility_9' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.SetUIPhaseView
// 0x0001 (0x0001 - 0x0000)
struct UI_GameHP_Target_C_SetUIPhaseView final
{
public:
	bool                                          In_Phase;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_SetUIPhaseView) == 0x000001, "Wrong alignment on UI_GameHP_Target_C_SetUIPhaseView");
static_assert(sizeof(UI_GameHP_Target_C_SetUIPhaseView) == 0x000001, "Wrong size on UI_GameHP_Target_C_SetUIPhaseView");
static_assert(offsetof(UI_GameHP_Target_C_SetUIPhaseView, In_Phase) == 0x000000, "Member 'UI_GameHP_Target_C_SetUIPhaseView::In_Phase' has a wrong offset!");

// Function UI_GameHP_Target.UI_GameHP_Target_C.StopPhaseImmune
// 0x0008 (0x0008 - 0x0000)
struct UI_GameHP_Target_C_StopPhaseImmune final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_GameHP_Target_C_StopPhaseImmune) == 0x000008, "Wrong alignment on UI_GameHP_Target_C_StopPhaseImmune");
static_assert(sizeof(UI_GameHP_Target_C_StopPhaseImmune) == 0x000008, "Wrong size on UI_GameHP_Target_C_StopPhaseImmune");
static_assert(offsetof(UI_GameHP_Target_C_StopPhaseImmune, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'UI_GameHP_Target_C_StopPhaseImmune::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

