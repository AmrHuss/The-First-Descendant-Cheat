#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Mission_CheckPointTime

#include "Basic.hpp"

#include "M1_structs.hpp"


namespace SDK::Params
{

// Function UI_Mission_CheckPointTime.UI_Mission_CheckPointTime_C.BP_SetTimerHighlight
// 0x0001 (0x0001 - 0x0000)
struct UI_Mission_CheckPointTime_C_BP_SetTimerHighlight final
{
public:
	bool                                          bInSet;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Mission_CheckPointTime_C_BP_SetTimerHighlight) == 0x000001, "Wrong alignment on UI_Mission_CheckPointTime_C_BP_SetTimerHighlight");
static_assert(sizeof(UI_Mission_CheckPointTime_C_BP_SetTimerHighlight) == 0x000001, "Wrong size on UI_Mission_CheckPointTime_C_BP_SetTimerHighlight");
static_assert(offsetof(UI_Mission_CheckPointTime_C_BP_SetTimerHighlight, bInSet) == 0x000000, "Member 'UI_Mission_CheckPointTime_C_BP_SetTimerHighlight::bInSet' has a wrong offset!");

// Function UI_Mission_CheckPointTime.UI_Mission_CheckPointTime_C.BP_ShowAsContinueSelected
// 0x0020 (0x0020 - 0x0000)
struct UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected final
{
public:
	class UUI_Mission_CheckPointTime_Item_C*      K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_Mission_CheckPointTime_Item_C*      K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item_1; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected) == 0x000008, "Wrong alignment on UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected");
static_assert(sizeof(UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected) == 0x000020, "Wrong size on UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected");
static_assert(offsetof(UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected, K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item) == 0x000000, "Member 'UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected::K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected, K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item_1) == 0x000010, "Member 'UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected::K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item_1' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected, K2Node_DynamicCast_bSuccess_1) == 0x000018, "Member 'UI_Mission_CheckPointTime_C_BP_ShowAsContinueSelected::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function UI_Mission_CheckPointTime.UI_Mission_CheckPointTime_C.BP_ShowAsStopSelected
// 0x0020 (0x0020 - 0x0000)
struct UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected final
{
public:
	class UUI_Mission_CheckPointTime_Item_C*      K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_Mission_CheckPointTime_Item_C*      K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item_1; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected) == 0x000008, "Wrong alignment on UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected");
static_assert(sizeof(UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected) == 0x000020, "Wrong size on UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected");
static_assert(offsetof(UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected, K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item) == 0x000000, "Member 'UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected::K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected, K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item_1) == 0x000010, "Member 'UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected::K2Node_DynamicCast_AsUI_Mission_Check_Point_Time_Item_1' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected, K2Node_DynamicCast_bSuccess_1) == 0x000018, "Member 'UI_Mission_CheckPointTime_C_BP_ShowAsStopSelected::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function UI_Mission_CheckPointTime.UI_Mission_CheckPointTime_C.ExecuteUbergraph_UI_Mission_CheckPointTime
// 0x0038 (0x0038 - 0x0000)
struct UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EM1WidgetAnimDirection                        K2Node_Event_InDirection_1;                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EM1WidgetAnimDirection                        K2Node_Event_InDirection;                          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUI_Mission_World_WaveItem_C*           K2Node_DynamicCast_AsUI_Mission_World_Wave_Item;   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInSet;                               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime) == 0x000008, "Wrong alignment on UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime");
static_assert(sizeof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime) == 0x000038, "Wrong size on UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime");
static_assert(offsetof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime, EntryPoint) == 0x000000, "Member 'UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime, K2Node_Event_IsDesignTime) == 0x000004, "Member 'UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime, K2Node_Event_InDirection_1) == 0x000010, "Member 'UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime::K2Node_Event_InDirection_1' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime, K2Node_Event_InDirection) == 0x000011, "Member 'UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime::K2Node_Event_InDirection' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime, CallFunc_PlayAnimation_ReturnValue_1) == 0x000018, "Member 'UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime, K2Node_DynamicCast_AsUI_Mission_World_Wave_Item) == 0x000020, "Member 'UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime::K2Node_DynamicCast_AsUI_Mission_World_Wave_Item' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime, K2Node_Event_bInSet) == 0x000029, "Member 'UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime::K2Node_Event_bInSet' has a wrong offset!");
static_assert(offsetof(UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime, CallFunc_PlayAnimation_ReturnValue_2) == 0x000030, "Member 'UI_Mission_CheckPointTime_C_ExecuteUbergraph_UI_Mission_CheckPointTime::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");

// Function UI_Mission_CheckPointTime.UI_Mission_CheckPointTime_C.OnEventWidgetClose
// 0x0001 (0x0001 - 0x0000)
struct UI_Mission_CheckPointTime_C_OnEventWidgetClose final
{
public:
	EM1WidgetAnimDirection                        InDirection;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Mission_CheckPointTime_C_OnEventWidgetClose) == 0x000001, "Wrong alignment on UI_Mission_CheckPointTime_C_OnEventWidgetClose");
static_assert(sizeof(UI_Mission_CheckPointTime_C_OnEventWidgetClose) == 0x000001, "Wrong size on UI_Mission_CheckPointTime_C_OnEventWidgetClose");
static_assert(offsetof(UI_Mission_CheckPointTime_C_OnEventWidgetClose, InDirection) == 0x000000, "Member 'UI_Mission_CheckPointTime_C_OnEventWidgetClose::InDirection' has a wrong offset!");

// Function UI_Mission_CheckPointTime.UI_Mission_CheckPointTime_C.OnEventWidgetOpen
// 0x0001 (0x0001 - 0x0000)
struct UI_Mission_CheckPointTime_C_OnEventWidgetOpen final
{
public:
	EM1WidgetAnimDirection                        InDirection;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Mission_CheckPointTime_C_OnEventWidgetOpen) == 0x000001, "Wrong alignment on UI_Mission_CheckPointTime_C_OnEventWidgetOpen");
static_assert(sizeof(UI_Mission_CheckPointTime_C_OnEventWidgetOpen) == 0x000001, "Wrong size on UI_Mission_CheckPointTime_C_OnEventWidgetOpen");
static_assert(offsetof(UI_Mission_CheckPointTime_C_OnEventWidgetOpen, InDirection) == 0x000000, "Member 'UI_Mission_CheckPointTime_C_OnEventWidgetOpen::InDirection' has a wrong offset!");

// Function UI_Mission_CheckPointTime.UI_Mission_CheckPointTime_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Mission_CheckPointTime_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Mission_CheckPointTime_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Mission_CheckPointTime_C_PreConstruct");
static_assert(sizeof(UI_Mission_CheckPointTime_C_PreConstruct) == 0x000001, "Wrong size on UI_Mission_CheckPointTime_C_PreConstruct");
static_assert(offsetof(UI_Mission_CheckPointTime_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Mission_CheckPointTime_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

