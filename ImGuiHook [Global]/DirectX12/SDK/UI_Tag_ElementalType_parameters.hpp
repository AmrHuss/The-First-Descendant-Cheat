#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Tag_ElementalType

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "M1Data_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function UI_Tag_ElementalType.UI_Tag_ElementalType_C.ExecuteUbergraph_UI_Tag_ElementalType
// 0x000C (0x000C - 0x0000)
struct UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType) == 0x000004, "Wrong alignment on UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType");
static_assert(sizeof(UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType) == 0x00000C, "Wrong size on UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType");
static_assert(offsetof(UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType, EntryPoint) == 0x000000, "Member 'UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType::EntryPoint' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType, Temp_byte_Variable) == 0x000004, "Member 'UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType, Temp_byte_Variable_1) == 0x000005, "Member 'UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType, K2Node_Event_IsDesignTime) == 0x000006, "Member 'UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType, Temp_bool_Variable) == 0x000007, "Member 'UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType, K2Node_Select_Default) == 0x000008, "Member 'UI_Tag_ElementalType_C_ExecuteUbergraph_UI_Tag_ElementalType::K2Node_Select_Default' has a wrong offset!");

// Function UI_Tag_ElementalType.UI_Tag_ElementalType_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UI_Tag_ElementalType_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Tag_ElementalType_C_PreConstruct) == 0x000001, "Wrong alignment on UI_Tag_ElementalType_C_PreConstruct");
static_assert(sizeof(UI_Tag_ElementalType_C_PreConstruct) == 0x000001, "Wrong size on UI_Tag_ElementalType_C_PreConstruct");
static_assert(offsetof(UI_Tag_ElementalType_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UI_Tag_ElementalType_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UI_Tag_ElementalType.UI_Tag_ElementalType_C.SetUICondition
// 0x0001 (0x0001 - 0x0000)
struct UI_Tag_ElementalType_C_SetUICondition final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Tag_ElementalType_C_SetUICondition) == 0x000001, "Wrong alignment on UI_Tag_ElementalType_C_SetUICondition");
static_assert(sizeof(UI_Tag_ElementalType_C_SetUICondition) == 0x000001, "Wrong size on UI_Tag_ElementalType_C_SetUICondition");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUICondition, Condition) == 0x000000, "Member 'UI_Tag_ElementalType_C_SetUICondition::Condition' has a wrong offset!");

// Function UI_Tag_ElementalType.UI_Tag_ElementalType_C.SetUIElementalType
// 0x0080 (0x0080 - 0x0000)
struct UI_Tag_ElementalType_C_SetUIElementalType final
{
public:
	EM1ElementalDamageChannel                     ElementalType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Get_UI_ElemntalType_Text_ElementalTypeText; // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Get_UI_ElemntalType_Color_ElementalTypeColor; // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Get_UI_ElemntalType_Icon_ElementalTypeIcon; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0030(0x0014)()
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0048(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UI_Tag_ElementalType_C_SetUIElementalType) == 0x000008, "Wrong alignment on UI_Tag_ElementalType_C_SetUIElementalType");
static_assert(sizeof(UI_Tag_ElementalType_C_SetUIElementalType) == 0x000080, "Wrong size on UI_Tag_ElementalType_C_SetUIElementalType");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, ElementalType) == 0x000000, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::ElementalType' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, Temp_byte_Variable) == 0x000001, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, CallFunc_Get_UI_ElemntalType_Text_ElementalTypeText) == 0x000008, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::CallFunc_Get_UI_ElemntalType_Text_ElementalTypeText' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, CallFunc_Get_UI_ElemntalType_Color_ElementalTypeColor) == 0x000018, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::CallFunc_Get_UI_ElemntalType_Color_ElementalTypeColor' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, CallFunc_Get_UI_ElemntalType_Icon_ElementalTypeIcon) == 0x000028, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::CallFunc_Get_UI_ElemntalType_Icon_ElementalTypeIcon' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, K2Node_MakeStruct_SlateColor) == 0x000030, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000048, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, Temp_byte_Variable_1) == 0x000078, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, Temp_bool_Variable) == 0x000079, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UI_Tag_ElementalType_C_SetUIElementalType, K2Node_Select_Default) == 0x00007A, "Member 'UI_Tag_ElementalType_C_SetUIElementalType::K2Node_Select_Default' has a wrong offset!");

}

