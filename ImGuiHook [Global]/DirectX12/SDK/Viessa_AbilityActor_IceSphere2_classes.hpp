#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Viessa_AbilityActor_IceSphere2

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "Viessa_IceSphereData_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Viessa_AbilityActor_IceSphere2.Viessa_AbilityActor_IceSphere2_C
// 0x0128 (0x0870 - 0x0748)
class AViessa_AbilityActor_IceSphere2_C final : public AM1AbilityActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0748(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPlayerDroneTransformComponent_C*       IceSphereTransform;                                // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DetectSphere;                                      // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 IceSphere_Right;                                   // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 IceSphere_Center;                                  // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 IceSphere_Left;                                    // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FViessa_IceSphereData>          DetectedMonsters;                                  // 0x0780(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        ReshotTime;                                        // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RedetectTime;                                      // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RedetectElapsedTime;                               // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AM1Monster*                             Target;                                            // 0x07A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 IceSphere;                                         // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   IceSphereName;                                     // 0x07B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        RotationTime;                                      // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkelRotationAlpha;                                 // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          DestroyAnim;                                       // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bShooting;                                         // 0x07D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSpawnedProjectile;                              // 0x07D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7DA[0x6];                                      // 0x07DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lifetime;                                          // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementAlpha;                                     // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           SocketNameArray;                                   // 0x07F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class USkeletalMeshComponent*> IceSphereSkelArray;                                // 0x0800(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                MovementDirection;                                 // 0x0850(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastMovementDirection;                             // 0x085C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InvisibleDelay;                                    // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TickUpdateShoot(double DeltaSeconds);
	void TickUpdateRedetection(double DeltaSeconds);
	void RotateTarget(double DeltaSeconds, bool* FinishedRotation);
	void ReceiveTick(float DeltaSeconds);
	void ProccessDestory();
	void OnRep_IceSphereName();
	void OnEndOverlap_12C639954662F9343796309174B8162C(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnEndDetect(class AActor* Target_0);
	void OnBeginOverlap_12C639954662F9343796309174B8162C(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnBeginDetect(class AActor* Target_0);
	void IsNearest(class AM1Monster* Standarad, class USkeletalMeshComponent* OriginTarget, class USkeletalMeshComponent* ComparisonTarget, bool* Result);
	void FindNearestTarget(class AM1Monster** Target_0);
	void FindNearestIceSphere(class AM1Monster* Target_0, class USkeletalMeshComponent** Result, class FName* ResultIceSphereName);
	void ExecuteUbergraph_Viessa_AbilityActor_IceSphere2(int32 EntryPoint);
	void DestroyIceSphereAfterDelay(double InDelay, class FName InIceSphereName);
	void DestroyIceSphere(class FName InIceSphereName);
	void DestroyFiredIceSphere(class FName InIceSphereName);
	void CanShoot(bool* Result);
	void BP_OnPostSpawnAbilityActor();
	void AddSkeletalMeshControl(class USkeletalMeshComponent* OwnedSkeletalMeshComp, class FName ControlTag, class FName BaseSocketName, bool bIsCosmetic);
	void AddIceSphereControls();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Viessa_AbilityActor_IceSphere2_C">();
	}
	static class AViessa_AbilityActor_IceSphere2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AViessa_AbilityActor_IceSphere2_C>();
	}
};
static_assert(alignof(AViessa_AbilityActor_IceSphere2_C) == 0x000008, "Wrong alignment on AViessa_AbilityActor_IceSphere2_C");
static_assert(sizeof(AViessa_AbilityActor_IceSphere2_C) == 0x000870, "Wrong size on AViessa_AbilityActor_IceSphere2_C");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, UberGraphFrame) == 0x000748, "Member 'AViessa_AbilityActor_IceSphere2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, IceSphereTransform) == 0x000750, "Member 'AViessa_AbilityActor_IceSphere2_C::IceSphereTransform' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, DetectSphere) == 0x000758, "Member 'AViessa_AbilityActor_IceSphere2_C::DetectSphere' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, Root) == 0x000760, "Member 'AViessa_AbilityActor_IceSphere2_C::Root' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, IceSphere_Right) == 0x000768, "Member 'AViessa_AbilityActor_IceSphere2_C::IceSphere_Right' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, IceSphere_Center) == 0x000770, "Member 'AViessa_AbilityActor_IceSphere2_C::IceSphere_Center' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, IceSphere_Left) == 0x000778, "Member 'AViessa_AbilityActor_IceSphere2_C::IceSphere_Left' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, DetectedMonsters) == 0x000780, "Member 'AViessa_AbilityActor_IceSphere2_C::DetectedMonsters' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, ReshotTime) == 0x000790, "Member 'AViessa_AbilityActor_IceSphere2_C::ReshotTime' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, RedetectTime) == 0x000798, "Member 'AViessa_AbilityActor_IceSphere2_C::RedetectTime' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, RedetectElapsedTime) == 0x0007A0, "Member 'AViessa_AbilityActor_IceSphere2_C::RedetectElapsedTime' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, Target) == 0x0007A8, "Member 'AViessa_AbilityActor_IceSphere2_C::Target' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, IceSphere) == 0x0007B0, "Member 'AViessa_AbilityActor_IceSphere2_C::IceSphere' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, IceSphereName) == 0x0007B8, "Member 'AViessa_AbilityActor_IceSphere2_C::IceSphereName' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, RotationTime) == 0x0007C0, "Member 'AViessa_AbilityActor_IceSphere2_C::RotationTime' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, SkelRotationAlpha) == 0x0007C8, "Member 'AViessa_AbilityActor_IceSphere2_C::SkelRotationAlpha' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, DestroyAnim) == 0x0007D0, "Member 'AViessa_AbilityActor_IceSphere2_C::DestroyAnim' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, bShooting) == 0x0007D8, "Member 'AViessa_AbilityActor_IceSphere2_C::bShooting' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, bIsSpawnedProjectile) == 0x0007D9, "Member 'AViessa_AbilityActor_IceSphere2_C::bIsSpawnedProjectile' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, Lifetime) == 0x0007E0, "Member 'AViessa_AbilityActor_IceSphere2_C::Lifetime' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, MovementAlpha) == 0x0007E8, "Member 'AViessa_AbilityActor_IceSphere2_C::MovementAlpha' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, SocketNameArray) == 0x0007F0, "Member 'AViessa_AbilityActor_IceSphere2_C::SocketNameArray' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, IceSphereSkelArray) == 0x000800, "Member 'AViessa_AbilityActor_IceSphere2_C::IceSphereSkelArray' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, MovementDirection) == 0x000850, "Member 'AViessa_AbilityActor_IceSphere2_C::MovementDirection' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, LastMovementDirection) == 0x00085C, "Member 'AViessa_AbilityActor_IceSphere2_C::LastMovementDirection' has a wrong offset!");
static_assert(offsetof(AViessa_AbilityActor_IceSphere2_C, InvisibleDelay) == 0x000868, "Member 'AViessa_AbilityActor_IceSphere2_C::InvisibleDelay' has a wrong offset!");

}

