#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_CrosshairLayerBase_Rectangles

#include "Basic.hpp"

#include "WB_CrosshairLayerBase_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_CrosshairLayerBase_Rectangles.WB_CrosshairLayerBase_Rectangles_C
// 0x0080 (0x0868 - 0x07E8)
class UWB_CrosshairLayerBase_Rectangles_C : public UWB_CrosshairLayerBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WB_CrosshairLayerBase_Rectangles_C; // 0x07E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_9;                                           // 0x07F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             _texture;                                          // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          _useTextureSize;                                   // 0x0800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_801[0x3];                                      // 0x0801(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              _size;                                             // 0x0804(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              _sizePivot;                                        // 0x080C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              _rotationPivot;                                    // 0x0814(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              EffectiveSize;                                     // 0x081C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              EffectiveSizePivot;                                // 0x0824(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82C[0x4];                                      // 0x082C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceOfTexturePivotY;                           // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _fillOutside;                                      // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839[0x3];                                      // 0x0839(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           _outsideColor;                                     // 0x083C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EffectiveOutsideColor;                             // 0x084C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              _recoilResponsePercentage__size_;                  // 0x085C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_CrosshairLayerBase_Rectangles(int32 EntryPoint);
	void GetImagePlane(class UImage** Image);
	void GetMaterial(class UMaterialInterface** Material);
	void OptimizeMaterialSizeAndPosition();
	void PreRender();
	void Render();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_CrosshairLayerBase_Rectangles_C">();
	}
	static class UWB_CrosshairLayerBase_Rectangles_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_CrosshairLayerBase_Rectangles_C>();
	}
};
static_assert(alignof(UWB_CrosshairLayerBase_Rectangles_C) == 0x000008, "Wrong alignment on UWB_CrosshairLayerBase_Rectangles_C");
static_assert(sizeof(UWB_CrosshairLayerBase_Rectangles_C) == 0x000868, "Wrong size on UWB_CrosshairLayerBase_Rectangles_C");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, UberGraphFrame_WB_CrosshairLayerBase_Rectangles_C) == 0x0007E8, "Member 'UWB_CrosshairLayerBase_Rectangles_C::UberGraphFrame_WB_CrosshairLayerBase_Rectangles_C' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, Image_9) == 0x0007F0, "Member 'UWB_CrosshairLayerBase_Rectangles_C::Image_9' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, _texture) == 0x0007F8, "Member 'UWB_CrosshairLayerBase_Rectangles_C::_texture' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, _useTextureSize) == 0x000800, "Member 'UWB_CrosshairLayerBase_Rectangles_C::_useTextureSize' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, _size) == 0x000804, "Member 'UWB_CrosshairLayerBase_Rectangles_C::_size' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, _sizePivot) == 0x00080C, "Member 'UWB_CrosshairLayerBase_Rectangles_C::_sizePivot' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, _rotationPivot) == 0x000814, "Member 'UWB_CrosshairLayerBase_Rectangles_C::_rotationPivot' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, EffectiveSize) == 0x00081C, "Member 'UWB_CrosshairLayerBase_Rectangles_C::EffectiveSize' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, EffectiveSizePivot) == 0x000824, "Member 'UWB_CrosshairLayerBase_Rectangles_C::EffectiveSizePivot' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, DistanceOfTexturePivotY) == 0x000830, "Member 'UWB_CrosshairLayerBase_Rectangles_C::DistanceOfTexturePivotY' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, _fillOutside) == 0x000838, "Member 'UWB_CrosshairLayerBase_Rectangles_C::_fillOutside' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, _outsideColor) == 0x00083C, "Member 'UWB_CrosshairLayerBase_Rectangles_C::_outsideColor' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, EffectiveOutsideColor) == 0x00084C, "Member 'UWB_CrosshairLayerBase_Rectangles_C::EffectiveOutsideColor' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_Rectangles_C, _recoilResponsePercentage__size_) == 0x00085C, "Member 'UWB_CrosshairLayerBase_Rectangles_C::_recoilResponsePercentage__size_' has a wrong offset!");

}

