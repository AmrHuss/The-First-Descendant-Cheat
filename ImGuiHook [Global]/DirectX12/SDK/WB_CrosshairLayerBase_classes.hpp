#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_CrosshairLayerBase

#include "Basic.hpp"

#include "M1_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_CrosshairLayerBase.WB_CrosshairLayerBase_C
// 0x00E0 (0x07E8 - 0x0708)
class UWB_CrosshairLayerBase_C : public UM1UICrosshairLayerBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0708(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialInstanceDynamic*               DynamicMaterialInstance;                           // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        EffectiveAAFilterSize;                             // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              _scale__element_;                                  // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _angle__Layer_;                                    // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         _totalElements;                                    // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _enableRecoilResponse;                             // 0x0734(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_735[0x3];                                      // 0x0735(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        _recoilResponsePercentage__center_gap_;            // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _autoRotationRPM__layer_;                          // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _autoRotationRPM__element_;                        // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _gap;                                              // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _stepAngle;                                        // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EffectiveSpreading;                                // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LayerTranslation;                                  // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _angle__Element_;                                  // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MaterialImagePosition;                             // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MaterialImageSize;                                 // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CrosshairScale;                                    // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ViewportSize;                                      // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              EffectiveTranslation;                              // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WidgetColorAndOpacity;                             // 0x07A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ElementAutoRotationValue;                          // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LayerAutoRotationValue;                            // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EffectiveColorAndOpacity;                          // 0x07C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RadialType;                                        // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _forceEqualDivision;                               // 0x07D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D9[0x7];                                      // 0x07D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InputedSpread;                                     // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ComputeRenderingInfo();
	void ExecuteUbergraph_WB_CrosshairLayerBase(int32 EntryPoint);
	void GetImagePlane(class UImage** Image);
	void GetMaterial(class UMaterialInterface** Material);
	void GetSafeViewportSize(struct FVector2D* ViewportSize_0);
	void GetWeaponRecoilResponse__pixels_(double* Recoil);
	void Idle(double DeltaTime);
	void Initialize();
	void InitializeEditableVariables();
	void OptimizeMaterialSizeAndPosition();
	void PreConstruct(bool IsDesignTime);
	void PreRender();
	void Render();
	void SetSpread(double Spread);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateAutoRotation(double DeltaTime);
	void UpdateCanvasPanelSlot();
	void UpdateMaterialParameters();
	void UpdateRender();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_CrosshairLayerBase_C">();
	}
	static class UWB_CrosshairLayerBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_CrosshairLayerBase_C>();
	}
};
static_assert(alignof(UWB_CrosshairLayerBase_C) == 0x000008, "Wrong alignment on UWB_CrosshairLayerBase_C");
static_assert(sizeof(UWB_CrosshairLayerBase_C) == 0x0007E8, "Wrong size on UWB_CrosshairLayerBase_C");
static_assert(offsetof(UWB_CrosshairLayerBase_C, UberGraphFrame) == 0x000708, "Member 'UWB_CrosshairLayerBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, DynamicMaterialInstance) == 0x000710, "Member 'UWB_CrosshairLayerBase_C::DynamicMaterialInstance' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, EffectiveAAFilterSize) == 0x000718, "Member 'UWB_CrosshairLayerBase_C::EffectiveAAFilterSize' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _scale__element_) == 0x000720, "Member 'UWB_CrosshairLayerBase_C::_scale__element_' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _angle__Layer_) == 0x000728, "Member 'UWB_CrosshairLayerBase_C::_angle__Layer_' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _totalElements) == 0x000730, "Member 'UWB_CrosshairLayerBase_C::_totalElements' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _enableRecoilResponse) == 0x000734, "Member 'UWB_CrosshairLayerBase_C::_enableRecoilResponse' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _recoilResponsePercentage__center_gap_) == 0x000738, "Member 'UWB_CrosshairLayerBase_C::_recoilResponsePercentage__center_gap_' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _autoRotationRPM__layer_) == 0x000740, "Member 'UWB_CrosshairLayerBase_C::_autoRotationRPM__layer_' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _autoRotationRPM__element_) == 0x000748, "Member 'UWB_CrosshairLayerBase_C::_autoRotationRPM__element_' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _gap) == 0x000750, "Member 'UWB_CrosshairLayerBase_C::_gap' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _stepAngle) == 0x000758, "Member 'UWB_CrosshairLayerBase_C::_stepAngle' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, EffectiveSpreading) == 0x000760, "Member 'UWB_CrosshairLayerBase_C::EffectiveSpreading' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, LayerTranslation) == 0x000768, "Member 'UWB_CrosshairLayerBase_C::LayerTranslation' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _angle__Element_) == 0x000770, "Member 'UWB_CrosshairLayerBase_C::_angle__Element_' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, MaterialImagePosition) == 0x000778, "Member 'UWB_CrosshairLayerBase_C::MaterialImagePosition' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, MaterialImageSize) == 0x000780, "Member 'UWB_CrosshairLayerBase_C::MaterialImageSize' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, CrosshairScale) == 0x000788, "Member 'UWB_CrosshairLayerBase_C::CrosshairScale' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, ViewportSize) == 0x000790, "Member 'UWB_CrosshairLayerBase_C::ViewportSize' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, EffectiveTranslation) == 0x000798, "Member 'UWB_CrosshairLayerBase_C::EffectiveTranslation' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, WidgetColorAndOpacity) == 0x0007A0, "Member 'UWB_CrosshairLayerBase_C::WidgetColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, ElementAutoRotationValue) == 0x0007B0, "Member 'UWB_CrosshairLayerBase_C::ElementAutoRotationValue' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, LayerAutoRotationValue) == 0x0007B8, "Member 'UWB_CrosshairLayerBase_C::LayerAutoRotationValue' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, EffectiveColorAndOpacity) == 0x0007C0, "Member 'UWB_CrosshairLayerBase_C::EffectiveColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, RadialType) == 0x0007D0, "Member 'UWB_CrosshairLayerBase_C::RadialType' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, _forceEqualDivision) == 0x0007D8, "Member 'UWB_CrosshairLayerBase_C::_forceEqualDivision' has a wrong offset!");
static_assert(offsetof(UWB_CrosshairLayerBase_C, InputedSpread) == 0x0007E0, "Member 'UWB_CrosshairLayerBase_C::InputedSpread' has a wrong offset!");

}

