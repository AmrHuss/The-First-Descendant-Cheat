#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_CrosshairLayerBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.computeRenderingInfo
// 0x0058 (0x0058 - 0x0000)
struct WB_CrosshairLayerBase_C_ComputeRenderingInfo final
{
public:
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_getWeaponRecoilResponse__pixels__recoil;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCrosshairScale_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetSafeViewportSize_ViewportSize;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_crosshairScale_ImplicitCast;    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_ComputeRenderingInfo) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_ComputeRenderingInfo");
static_assert(sizeof(WB_CrosshairLayerBase_C_ComputeRenderingInfo) == 0x000058, "Wrong size on WB_CrosshairLayerBase_C_ComputeRenderingInfo");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000000, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000010, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, CallFunc_getWeaponRecoilResponse__pixels__recoil) == 0x000018, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::CallFunc_getWeaponRecoilResponse__pixels__recoil' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000020, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, CallFunc_GetCrosshairScale_ReturnValue) == 0x000028, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::CallFunc_GetCrosshairScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000038, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, CallFunc_GetSafeViewportSize_ViewportSize) == 0x000040, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::CallFunc_GetSafeViewportSize_ViewportSize' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000048, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ComputeRenderingInfo, K2Node_VariableSet_crosshairScale_ImplicitCast) == 0x000050, "Member 'WB_CrosshairLayerBase_C_ComputeRenderingInfo::K2Node_VariableSet_crosshairScale_ImplicitCast' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.ExecuteUbergraph_WB_CrosshairLayerBase
// 0x0078 (0x0078 - 0x0000)
struct WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_getMaterial_material;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_DeltaTime;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0020(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 CallFunc_getImagePlane_image;                      // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Idle_DeltaTime_ImplicitCast;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase");
static_assert(sizeof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase) == 0x000078, "Wrong size on WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, EntryPoint) == 0x000000, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, CallFunc_getMaterial_material) == 0x000008, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::CallFunc_getMaterial_material' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, K2Node_CustomEvent_DeltaTime) == 0x000018, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::K2Node_CustomEvent_DeltaTime' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, K2Node_Event_MyGeometry) == 0x000020, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, K2Node_Event_InDeltaTime) == 0x000058, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, K2Node_Event_IsDesignTime) == 0x00005C, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, CallFunc_getImagePlane_image) == 0x000060, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::CallFunc_getImagePlane_image' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, CallFunc_GetVisibility_ReturnValue) == 0x000068, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, K2Node_SwitchEnum_CmpSuccess) == 0x000069, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase, CallFunc_Idle_DeltaTime_ImplicitCast) == 0x000070, "Member 'WB_CrosshairLayerBase_C_ExecuteUbergraph_WB_CrosshairLayerBase::CallFunc_Idle_DeltaTime_ImplicitCast' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.getImagePlane
// 0x0008 (0x0008 - 0x0000)
struct WB_CrosshairLayerBase_C_GetImagePlane final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_GetImagePlane) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_GetImagePlane");
static_assert(sizeof(WB_CrosshairLayerBase_C_GetImagePlane) == 0x000008, "Wrong size on WB_CrosshairLayerBase_C_GetImagePlane");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetImagePlane, Image) == 0x000000, "Member 'WB_CrosshairLayerBase_C_GetImagePlane::Image' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.GetMaterial
// 0x0008 (0x0008 - 0x0000)
struct WB_CrosshairLayerBase_C_GetMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_GetMaterial) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_GetMaterial");
static_assert(sizeof(WB_CrosshairLayerBase_C_GetMaterial) == 0x000008, "Wrong size on WB_CrosshairLayerBase_C_GetMaterial");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetMaterial, Material) == 0x000000, "Member 'WB_CrosshairLayerBase_C_GetMaterial::Material' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.GetSafeViewportSize
// 0x0028 (0x0028 - 0x0000)
struct WB_CrosshairLayerBase_C_GetSafeViewportSize final
{
public:
	struct FVector2D                              ViewportSize_0;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsZero2D_ReturnValue;                     // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_GetSafeViewportSize) == 0x000004, "Wrong alignment on WB_CrosshairLayerBase_C_GetSafeViewportSize");
static_assert(sizeof(WB_CrosshairLayerBase_C_GetSafeViewportSize) == 0x000028, "Wrong size on WB_CrosshairLayerBase_C_GetSafeViewportSize");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetSafeViewportSize, ViewportSize_0) == 0x000000, "Member 'WB_CrosshairLayerBase_C_GetSafeViewportSize::ViewportSize_0' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetSafeViewportSize, Temp_bool_Variable) == 0x000008, "Member 'WB_CrosshairLayerBase_C_GetSafeViewportSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetSafeViewportSize, Temp_struct_Variable) == 0x00000C, "Member 'WB_CrosshairLayerBase_C_GetSafeViewportSize::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetSafeViewportSize, CallFunc_GetViewportSize_ReturnValue) == 0x000014, "Member 'WB_CrosshairLayerBase_C_GetSafeViewportSize::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetSafeViewportSize, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x00001C, "Member 'WB_CrosshairLayerBase_C_GetSafeViewportSize::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetSafeViewportSize, CallFunc_IsZero2D_ReturnValue) == 0x00001D, "Member 'WB_CrosshairLayerBase_C_GetSafeViewportSize::CallFunc_IsZero2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetSafeViewportSize, CallFunc_BooleanOR_ReturnValue) == 0x00001E, "Member 'WB_CrosshairLayerBase_C_GetSafeViewportSize::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetSafeViewportSize, K2Node_Select_Default) == 0x000020, "Member 'WB_CrosshairLayerBase_C_GetSafeViewportSize::K2Node_Select_Default' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.getWeaponRecoilResponse (pixels)
// 0x0018 (0x0018 - 0x0000)
struct WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_ final
{
public:
	double                                        Recoil;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_");
static_assert(sizeof(WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_) == 0x000018, "Wrong size on WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_, Recoil) == 0x000000, "Member 'WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_::Recoil' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x000008, "Member 'WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'WB_CrosshairLayerBase_C_GetWeaponRecoilResponse__pixels_::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.Idle
// 0x0008 (0x0008 - 0x0000)
struct WB_CrosshairLayerBase_C_Idle final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_Idle) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_Idle");
static_assert(sizeof(WB_CrosshairLayerBase_C_Idle) == 0x000008, "Wrong size on WB_CrosshairLayerBase_C_Idle");
static_assert(offsetof(WB_CrosshairLayerBase_C_Idle, DeltaTime) == 0x000000, "Member 'WB_CrosshairLayerBase_C_Idle::DeltaTime' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.optimizeMaterialSizeAndPosition
// 0x00A0 (0x00A0 - 0x0000)
struct WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition final
{
public:
	struct FVector2D                              MinSize;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Abs__Vector2D__out;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_1;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition");
static_assert(sizeof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition) == 0x0000A0, "Wrong size on WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, MinSize) == 0x000000, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::MinSize' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Abs__Vector2D__out) == 0x000008, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Abs__Vector2D__out' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000010, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000018, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000020, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x000028, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_BreakVector2D_X) == 0x000030, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_BreakVector2D_Y) == 0x000038, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_FTrunc_ReturnValue) == 0x000040, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_FTrunc_ReturnValue_1) == 0x000044, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Percent_IntInt_ReturnValue) == 0x000048, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Percent_IntInt_ReturnValue_1) == 0x00004C, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Percent_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Add_IntInt_ReturnValue_1) == 0x000054, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000058, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000060, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_BreakVector2D_X_1) == 0x000068, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_BreakVector2D_Y_1) == 0x000070, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_BreakVector2D_X_2) == 0x000078, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_BreakVector2D_Y_2) == 0x000080, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_FClamp_ReturnValue) == 0x000088, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_FClamp_ReturnValue_1) == 0x000090, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition, CallFunc_MakeVector2D_ReturnValue) == 0x000098, "Member 'WB_CrosshairLayerBase_C_OptimizeMaterialSizeAndPosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_CrosshairLayerBase_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_PreConstruct) == 0x000001, "Wrong alignment on WB_CrosshairLayerBase_C_PreConstruct");
static_assert(sizeof(WB_CrosshairLayerBase_C_PreConstruct) == 0x000001, "Wrong size on WB_CrosshairLayerBase_C_PreConstruct");
static_assert(offsetof(WB_CrosshairLayerBase_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_CrosshairLayerBase_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.SetSpread
// 0x0008 (0x0008 - 0x0000)
struct WB_CrosshairLayerBase_C_SetSpread final
{
public:
	double                                        Spread;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_SetSpread) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_SetSpread");
static_assert(sizeof(WB_CrosshairLayerBase_C_SetSpread) == 0x000008, "Wrong size on WB_CrosshairLayerBase_C_SetSpread");
static_assert(offsetof(WB_CrosshairLayerBase_C_SetSpread, Spread) == 0x000000, "Member 'WB_CrosshairLayerBase_C_SetSpread::Spread' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_CrosshairLayerBase_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_Tick) == 0x000004, "Wrong alignment on WB_CrosshairLayerBase_C_Tick");
static_assert(sizeof(WB_CrosshairLayerBase_C_Tick) == 0x00003C, "Wrong size on WB_CrosshairLayerBase_C_Tick");
static_assert(offsetof(WB_CrosshairLayerBase_C_Tick, MyGeometry) == 0x000000, "Member 'WB_CrosshairLayerBase_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_CrosshairLayerBase_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.updateAutoRotation
// 0x0048 (0x0048 - 0x0000)
struct WB_CrosshairLayerBase_C_UpdateAutoRotation final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_UpdateAutoRotation) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_UpdateAutoRotation");
static_assert(sizeof(WB_CrosshairLayerBase_C_UpdateAutoRotation) == 0x000048, "Wrong size on WB_CrosshairLayerBase_C_UpdateAutoRotation");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateAutoRotation, DeltaTime) == 0x000000, "Member 'WB_CrosshairLayerBase_C_UpdateAutoRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateAutoRotation, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000008, "Member 'WB_CrosshairLayerBase_C_UpdateAutoRotation::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateAutoRotation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'WB_CrosshairLayerBase_C_UpdateAutoRotation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateAutoRotation, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000018, "Member 'WB_CrosshairLayerBase_C_UpdateAutoRotation::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateAutoRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000020, "Member 'WB_CrosshairLayerBase_C_UpdateAutoRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateAutoRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000028, "Member 'WB_CrosshairLayerBase_C_UpdateAutoRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateAutoRotation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'WB_CrosshairLayerBase_C_UpdateAutoRotation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateAutoRotation, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000038, "Member 'WB_CrosshairLayerBase_C_UpdateAutoRotation::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateAutoRotation, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'WB_CrosshairLayerBase_C_UpdateAutoRotation::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.updateCanvasPanelSlot
// 0x0038 (0x0038 - 0x0000)
struct WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot final
{
public:
	class UCanvasPanelSlot*                       PanelSlot;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 CallFunc_getImagePlane_image;                      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       K2Node_DynamicCast_As_________;                    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_Vector2DFloat_B_ImplicitCast;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot");
static_assert(sizeof(WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot) == 0x000038, "Wrong size on WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot, PanelSlot) == 0x000000, "Member 'WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot::PanelSlot' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot, CallFunc_GetViewportScale_ReturnValue) == 0x000008, "Member 'WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x00000C, "Member 'WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot, CallFunc_getImagePlane_image) == 0x000018, "Member 'WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot::CallFunc_getImagePlane_image' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot, K2Node_DynamicCast_As_________) == 0x000020, "Member 'WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot::K2Node_DynamicCast_As_________' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot, CallFunc_Divide_Vector2DFloat_B_ImplicitCast) == 0x000030, "Member 'WB_CrosshairLayerBase_C_UpdateCanvasPanelSlot::CallFunc_Divide_Vector2DFloat_B_ImplicitCast' has a wrong offset!");

// Function WB_CrosshairLayerBase.WB_CrosshairLayerBase_C.updateMaterialParameters
// 0x00B8 (0x00B8 - 0x0000)
struct WB_CrosshairLayerBase_C_UpdateMaterialParameters final
{
public:
	double                                        CallFunc_BreakVector2D_X;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorToSRGB_SRGB_;                  // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_R_ImplicitCast;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_G_ImplicitCast;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_R_ImplicitCast_1;                // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_G_ImplicitCast_1;                // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_R_ImplicitCast_2;                // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_G_ImplicitCast_2;                // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_2; // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_3; // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_4; // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_5; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_CrosshairLayerBase_C_UpdateMaterialParameters) == 0x000008, "Wrong alignment on WB_CrosshairLayerBase_C_UpdateMaterialParameters");
static_assert(sizeof(WB_CrosshairLayerBase_C_UpdateMaterialParameters) == 0x0000B8, "Wrong size on WB_CrosshairLayerBase_C_UpdateMaterialParameters");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_BreakVector2D_X) == 0x000000, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_BreakVector2D_Y) == 0x000008, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, K2Node_MakeStruct_LinearColor) == 0x000010, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_BreakVector2D_X_1) == 0x000020, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_BreakVector2D_Y_1) == 0x000028, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, K2Node_MakeStruct_LinearColor_1) == 0x000030, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_BreakVector2D_X_2) == 0x000040, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_BreakVector2D_Y_2) == 0x000048, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, K2Node_MakeStruct_LinearColor_2) == 0x000050, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_LinearColorToSRGB_SRGB_) == 0x000068, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_LinearColorToSRGB_SRGB_' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000078, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, K2Node_MakeStruct_R_ImplicitCast) == 0x000088, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::K2Node_MakeStruct_R_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, K2Node_MakeStruct_G_ImplicitCast) == 0x00008C, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::K2Node_MakeStruct_G_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, K2Node_MakeStruct_R_ImplicitCast_1) == 0x000090, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::K2Node_MakeStruct_R_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, K2Node_MakeStruct_G_ImplicitCast_1) == 0x000094, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::K2Node_MakeStruct_G_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000098, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, K2Node_MakeStruct_R_ImplicitCast_2) == 0x00009C, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::K2Node_MakeStruct_R_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, K2Node_MakeStruct_G_ImplicitCast_2) == 0x0000A0, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::K2Node_MakeStruct_G_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x0000A4, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_SetScalarParameterValue_Value_ImplicitCast_2) == 0x0000A8, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_SetScalarParameterValue_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_SetScalarParameterValue_Value_ImplicitCast_3) == 0x0000AC, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_SetScalarParameterValue_Value_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_SetScalarParameterValue_Value_ImplicitCast_4) == 0x0000B0, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_SetScalarParameterValue_Value_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(WB_CrosshairLayerBase_C_UpdateMaterialParameters, CallFunc_SetScalarParameterValue_Value_ImplicitCast_5) == 0x0000B4, "Member 'WB_CrosshairLayerBase_C_UpdateMaterialParameters::CallFunc_SetScalarParameterValue_Value_ImplicitCast_5' has a wrong offset!");

}

